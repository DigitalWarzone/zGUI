<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE MudletPackage>
<MudletPackage version="1.001">
	<ScriptPackage>
		<ScriptGroup isActive="yes" isFolder="yes">
			<name>zGUI</name>
			<packageName></packageName>
			<script>-------------------------------------------------
-- Zulah GUI build 
-- 6/15/21
-- v4.0
-- convert Adjustable.Containers to UserWindows and back
-- v0.1
-- Note: saving if UserWindow won't bring back as UserWindow if reloading
-- by Edru 7th October 2020
-------------------------------------------------
zgui = zgui or {}

function zgui.echo(text)
	cecho("\n&lt;cyan&gt;[&lt;magenta&gt;zGui&lt;cyan&gt;]: &lt;NavajoWhite&gt;"..text)
end

zgui.modules = zgui.modules or {}
zgui.styles = zgui.styles or {  
    ["greygroove"] = "background-color:rgba(0,0,0,0%); border: 5px groove grey;",
    ["greengroove"] = "background-color:rgba(0,0,0,100%); border: 5px groove green;",
    
    ["dimgreyinset"] = "background-color:rgba(20,20,20,100%); border: 5px inset dimgray;",
    ["greyinset"] = "background-color:rgba(0,0,0,100%); border: 10px inset grey;",
    ["greeninset"] = "background-color:rgba(0,0,0,100%); border: 5px inset green;",
    ["chaosinset"] = "background-color:rgba(0,40,100,100%); border: 5px inset purple;",
    
    ["greydouble"] = "background-color:rgba(0,0,0,0%); border: 5px double grey;",
    ["greendouble"] = "background-color:rgba(0,0,0,50%); border: 5px double green;",    
    ["golddouble"] = "background-color:rgba(0,0,0,50%); border: 5px double gold;",
}</script>
			<eventHandlerList />
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>DarkTheme</name>
				<packageName>DarkTheme</packageName>
				<script></script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>DarkTheme</name>
					<packageName></packageName>
					<script>local packagepath = getMudletHomeDir():gsub("\\", "/")..[[/zGUI/DarkTheme/Images/]]
local txt_col =  "#808080"
local txt_col2 = "#404040"
local bg_col =  "#181818"
local bg_col2 = "#1c1c1c"
local bg_col3 = "#202020"
local bg_col_hover = "#282828"
local bd_col =  "#383838"
local bd_col2 = "#404040"
local bd_col_hover = "#909090"
local dim_col =  "#080808"
local dim_col2 = "#0e0e0e"
local hi_col = "#303030"
local test_col = "#ff0000"
--border styles: ridge, outset, inset, groove, double, dotted, dashed, dot-dash, and dot-dot-dash

dark_style1 = [[
QMainWindow, 
QSplitter, 
QSplitterHandle, 
QWidget#mainArea, 
dlgConnectionProfiles, 
QWidget#panel, 
QWidget#widget_searchAreaTop,
QMessageBox,
QWidget#widget_top,
QWidget#widget_right,
QWidget#widget_bottom {
   background-color: ]]..bg_col..[[; 
	 color: ]]..txt_col..[[;
}
QCheckBox[enabled="false"] {
   color: ]]..txt_col2..[[;
}
QToolTip {
    background-color:]]..bg_col2..[[; 
    color: ]]..txt_col..[[;
    padding: 5px;
    opacity: 220;
		border-width: 1px;
		border-style: solid;
		border-left-color: ]]..hi_col..[[;
		border-top-color: ]]..hi_col..[[;
		border-right-color: ]]..dim_col..[[;
		border-bottom-color: ]]..dim_col..[[;
}
QWidget {
   color: ]]..txt_col..[[;
}
QDialog {
    background-color: ]]..bg_col..[[; 
}
QDockWidget {
    background-color: ]]..bg_col3..[[;
		color: ]]..txt_col..[[;
}
QDockWidget::close-button, QDockWidget::float-button {
    background: transparent;
}
QDockWidget::close-button:hover, QDockWidget::float-button:hover {
    background: rgba(255, 255, 255, 60);
		border-width: 1px;
		border-style: solid;
		border-color: ]]..bd_col..[[;
}
QDockWidget::close-button:pressed, QDockWidget::float-button:pressed {
    padding: 1px -1px -1px 1px;
    background: rgba(255, 255, 255, 60);
}
QWidget:item:selected {
    background-color: ]]..hi_col..[[;
}
QMenuBar {
    background-color: ]]..bg_col..[[;
		color: ]]..txt_col..[[;
}
QMenu {
    border-width: 1px;
		border-style: solid;
    border-color: ]]..bd_col..[[;
		background-color: ]]..bg_col..[[;
    color: ]]..txt_col..[[;
    margin: 0px;
}
QMenu::separator {
    height: 1px;
    background-color: ]]..dim_col..[[;
    padding-left: 4px;
    margin-left: 5px;
    margin-right: 5px;
}
QMenuBar::item:pressed {
    border-width: 1px;
		border-style: solid;
		border-color: ]]..bd_col..[[;
    color: ]]..txt_col..[[;
    margin-bottom:-1px;
    padding-bottom:1px;
}
QMenu::item:selected {
    color: ]]..txt_col..[[;
}
QMenu::item:disabled {
    background-color: ]]..bg_col..[[;
    color: ]]..txt_col2..[[;
}
QMenu:hover {
    background-color: ]]..bg_col..[[;
}
QMenu::item:hover {
    background-color: ]]..dim_col..[[;
}
QMenu::indicator {
    width: 18px;
    height: 18px;
}
QComboBox {
    background-color: ]]..dim_col..[[;
    selection-background-color: ]]..hi_col..[[;
    border-width: 1px;
    border-left-color: ]]..dim_col..[[;
		border-top-color: ]]..dim_col..[[;
		border-right-color: ]]..hi_col..[[;
		border-bottom-color: ]]..hi_col..[[;
    border-style: solid;
}
QComboBox::drop-down {
    background-color: ]]..bg_col..[[;
		color: #ff0000;
    subcontrol-origin: padding;
    subcontrol-position: top right;
    width: 12px;
		border-width: 2px;
		border-style: solid;
		border-left-color: ]]..hi_col..[[;
		border-top-color: ]]..hi_col..[[;
		border-right-color: ]]..dim_col..[[;
		border-bottom-color: ]]..dim_col..[[;
    border-radius: 0px;
}
QAbstractSpinBox {
    padding: 1px;
		border-style: solid;
    border-left-color: ]]..dim_col..[[;
		border-top-color: ]]..dim_col..[[;
		border-right-color: ]]..hi_col..[[;
		border-bottom-color: ]]..hi_col..[[;
    background-color: ]]..dim_col..[[;
    color: ]]..txt_col..[[;
    border-radius: 0px;
}
QAbstractSpinBox:up-button {
    background-color: ]]..bg_col2..[[;
		border-width: 1px;
    border-left-color: ]]..hi_col..[[;
		border-top-color: ]]..hi_col..[[;
		border-right-color: ]]..dim_col..[[;
		border-bottom-color: ]]..dim_col..[[;
    border-style: solid;
    border-radius: 0px;
}
QAbstractSpinBox:down-button {
    background-color: ]]..bg_col2..[[;
		border-width: 1px;
		border-style: solid;
    border-left-color: ]]..hi_col..[[;
		border-top-color: ]]..hi_col..[[;
		border-right-color: ]]..dim_col..[[;
		border-bottom-color: ]]..dim_col..[[;
    border-radius: 0px;
}

QToolBar {
    background-color: ]]..bg_col..[[;
		border-left-color: ]]..hi_col..[[;
		border-top-color: ]]..hi_col..[[;
		border-right-color: ]]..dim_col..[[;
		border-bottom-color: ]]..dim_col..[[;
}
QToolButton {
    background-color: ]]..bg_col..[[;
    border-radius: 0px;
    padding: 3px;
}
QToolButton:hover, QToolButton::menu-button:hover {
    background-color: ]]..bg_col2..[[;
		border-width: 2px;
		border-style: solid;
    border-left-color: ]]..hi_col..[[;
		border-top-color: ]]..hi_col..[[;
		border-right-color: ]]..dim_col..[[;
		border-bottom-color: ]]..dim_col..[[;		
}
QToolButton:checked, QToolButton:pressed,
QToolButton::menu-button:pressed {
    background-color: ]]..dim_col..[[;;
		border-width: 2px;
		border-style: solid;
    border-left-color: ]]..dim_col..[[;
		border-top-color: ]]..dim_col..[[;
		border-right-color: ]]..hi_col..[[;
		border-bottom-color: ]]..hi_col..[[;
}
QToolButton:checked {
    background-color: transparent;
    border-width: 1px;
		border-style: solid;
		border-color: ]]..bd_col..[[;
}
QToolButton#togglePanel {
    background-color: ]]..bg_col..[[;
		border-width: 1px;
		border-style: solid;
		border-left-color: ]]..hi_col..[[;
		border-top-color: ]]..hi_col..[[;
		border-right-color: ]]..dim_col..[[;
		border-bottom-color: ]]..dim_col..[[;
}
QToolButton#togglePanel:hover {
    background-color: ]]..bg_col2..[[;
}
QPushButton::menu-indicator  {
    background-color: ]]..bg_col..[[;
    subcontrol-origin: padding;
    subcontrol-position: bottom right;
    left: 0px;
}
QPushButton {
    color: ]]..txt_col..[[;
    background-color: ]]..bg_col2..[[;
}
QPushButton:disabled {
    background-color: ]]..bg_col2..[[;
    border-width: 1px;
    border-color: ]]..dim_col..[[;
    border-style: solid;
    border-radius: 0px;
    color: ]]..txt_col..[[;
		padding-top: 4px;
    padding-bottom: 4px;
    padding-left: 10px;
    padding-right: 10px;
}
QPushButton:focus {
    background-color: ]]..bg_col2..[[;
    color: ]]..txt_col..[[;
}
QPushButton:pressed
{
    background-color: ]]..bg_col2..[[;
    padding-top: -15px;
    padding-bottom: -17px;
}
/* scrolling window background */
QAbstractScrollArea {
    border-radius: 0px;
    border-top:    1px solid ]]..dim_col..[[;
		border-left:   1px solid ]]..dim_col..[[;
		border-bottom: 1px solid ]]..hi_col..[[;
		border-right:  1px solid ]]..hi_col..[[;
    background-color: ]]..dim_col..[[;
		color: ]]..txt_col..[[;
}
]]
--
-- ================================== PART TWO ====================================
--
dark_style2 = [[
QListView::item:!selected:hover, QTreeView::item:!selected:hover  {
    background: rgba(40, 40, 40, 0.6);
    color:]]..txt_col..[[;
}
QListView::item:selected:hover, QTreeView::item:selected:hover  {
    background: #404040;
    color: ]]..txt_col..[[;
}
QListView::item:selected, QTreeView::item:selected  {
    background: ]]..bg_col2..[[;
    color: ]]..txt_col..[[;
}
QHeaderView::section  {
    background-color: ]]..bg_col..[[;
    color: ]]..txt_col..[[;
    padding: 1px;
		border-width: 1px;
		border-style: solid;
    border-left-color: ]]..hi_col..[[;
		border-top-color: ]]..hi_col..[[;
		border-right-color: ]]..dim_col..[[;
		border-bottom-color: ]]..dim_col..[[;
    border-radius: 0px;
    text-align: center;
}
QHeaderView {
    background-color: ]]..bg_col..[[;
    border: 1px transparent;
    border-radius: 0px;
    margin: 0px;
    padding: 0px;
}
QLineEdit {
    background-color: ]]..dim_col..[[;
    padding: 1px;
    border-radius: 0px;
		border-top:    1px solid ]]..dim_col..[[;
		border-left:   1px solid ]]..dim_col..[[;
		border-bottom: 1px solid ]]..hi_col..[[;
		border-right:  1px solid ]]..hi_col..[[;
}
QLineEdit#pattern {
    background-color: ]]..bg_col..[[;
    padding: 1px;
		border-width: 1px;
		border-style: solid;
    border-color: ]]..bd_col..[[;
    border-radius: 0px;
}
QLineEdit#qt_spinbox_lineedit {
    padding: 1px;
		background-color: ]]..dim_col..[[;
}

/* --------profile area---------*/
QDialog#profile_preferences {
    background-color: ]]..dim_col2..[[;
}
QStackedWidget {
    color: ]]..txt_col..[[;
    background-color: ]]..bg_col3..[[;
}

/* PREFERENCES TABS */
/* unselected tabs */
QTabBar::tab:!selected {
    padding: 5px;
		margin-top: 2px;
    color: ]]..txt_col..[[;
    background-color: ]]..bg_col..[[;
		border-width: 1px;
		border-style: solid;
		border-top-color: ]]..bd_col..[[;
		border-left-color: ]]..bd_col..[[;
		border-right-color: ]]..dim_col..[[;
		border-bottom: 0px transparent black;
		border-top-left-radius: 1px;
    border-top-right-radius: 1px;
}
/*selected tab*/
QTabBar::tab:selected {  
    padding: 5px;
    color: ]]..txt_col..[[;
		background-color: ]]..bg_col3..[[;
    border-top-left-radius: 1px;
    border-top-right-radius: 1px;
		border-width: 1px;
		border-style: solid;
		border-top-color: ]]..bd_col..[[;
		border-left-color: ]]..bd_col..[[;
		border-right-color: ]]..dim_col..[[;
		border-bottom: 0px transparent black;
}
QTabBar::tab:top:!selected:hover {
    color: ]]..txt_col..[[;
    background-color: ]]..bg_col_hover..[[;
}
QTabBar::tab:top:selected:hover {
    color: ]]..txt_col..[[;
    background-color: ]]..bg_col_hover..[[;
}
QColorDialog, QColorLuminancePicker {
    background-color: ]]..bg_col..[[;
}
QTabWidget::pane {
    border-width: 1px;
		border-style: solid;
    border-color-top: ]]..bg_col..[[;
		border-color-left: ]]..bg_col2..[[;
	  border-color-bottom: ]]..dim_col..[[;
		border-color-right: ]]..dim_col..[[;
    padding: 0px;
    margin: 0px;
}
QGroupBox {
    border-radius: 0px;
    margin-top: 5px;
		border-width: 1px;
		border-style: solid;
		border-top: ]]..bg_col..[[;
		border-left: ]]..bg_col..[[;
	  border-bottom: ]]..dim_col..[[;
		border-right: ]]..dim_col..[[;
}
QGroupBox::title {
    subcontrol-origin: margin;
    subcontrol-position: top center;
    padding-left:  0px;
    padding-right: 1px;
    margin-top: -5px;
}
QGroupBox {
    border: 1px solid ]]..bd_col..[[;
		padding: 5px;
		margin: 5px;
}
dlgRoomExits {
    background-color: ]]..bg_col..[[;
}
QGroupBox#groupBox_normalExits, QGroupBox#groupBox_specialExits {
    background-color: ]]..bg_col2..[[;
}
QFrame#frame_key {
    background-color: ]]..bg_col..[[;
		border-width: 1px;
		border-style: solid;
		border-color: ]]..bd_col..[[;
}
/* SCROLLBAR AREA */
/*vertical scroll*/
  QScrollBar:vertical {
    background: ]]..dim_col2..[[;
    width: 15px;
    margin: 16px 0 16px 0;
  }
  QScrollBar::handle:vertical {
    background-color: ]]..bg_col..[[;
    min-height: 20px;
		border-width: 2px;
		border-style: solid;
    border-left-color: ]]..hi_col..[[;
		border-top-color: ]]..hi_col..[[;
		border-right-color: ]]..dim_col..[[;
		border-bottom-color: ]]..dim_col..[[;
  }
  QScrollBar::add-line:vertical {
    background-color: ]]..bg_col..[[;
    height: 12px;
    subcontrol-position: bottom;
    subcontrol-origin: margin;
	  border-width: 2px;
		border-style: solid;
    border-left-color: ]]..hi_col..[[;
		border-top-color: ]]..hi_col..[[;
		border-right-color: ]]..dim_col..[[;
		border-bottom-color: ]]..dim_col..[[;
  }

  QScrollBar::sub-line:vertical {
    background-color: ]]..bg_col..[[;
    height: 12px;
    subcontrol-position: top;
    subcontrol-origin: margin;
		border-width: 2px;
		border-style: solid;
    border-left-color: ]]..hi_col..[[;
		border-top-color: ]]..hi_col..[[;
		border-right-color: ]]..dim_col..[[;
		border-bottom-color: ]]..dim_col..[[;
  }
  QScrollBar::up-arrow:vertical, QScrollBar::down-arrow:vertical {
    background: grey;
    width: 4px;
    height: 4px;
  }
  QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical {
    background: none;
  }
	
/* --- horizontal scroll --- */
  QScrollBar:horizontal {
    background: ]]..dim_col2..[[;
    height: 16px;
    margin: 0 16px 0 16px;
  }
	
  QScrollBar::handle:horizontal {
    background-color: ]]..bg_col..[[;
    min-width: 20px;
		height: 15px;
    border-radius: 1px;
		border-width: 2px;
		border-style: solid;
    border-left-color: ]]..hi_col..[[;
		border-top-color: ]]..hi_col..[[;
		border-right-color: ]]..dim_col..[[;
		border-bottom-color: ]]..dim_col..[[;
  }
	
  QScrollBar::add-line:horizontal {
    background-color: ]]..bg_col..[[;
    height: 12px;
    width: 12px;
    subcontrol-position: right;
    subcontrol-origin: margin;
		border-width: 2px;
		border-style: solid;
    border-left-color: ]]..hi_col..[[;
		border-top-color: ]]..hi_col..[[;
		border-right-color: ]]..dim_col..[[;
		border-bottom-color: ]]..dim_col..[[;
  }
	
  QScrollBar::sub-line:horizontal {
    background-color: ]]..bg_col..[[;
    height: 12px;
    width: 12px;
    subcontrol-position: left;
    subcontrol-origin: margin;
		border-width: 2px;
		border-style: solid;
    border-left-color: ]]..hi_col..[[;
		border-top-color: ]]..hi_col..[[;
		border-right-color: ]]..dim_col..[[;
		border-bottom-color: ]]..dim_col..[[;
  }
	QScrollBar::left-arrow:horizontal, QScrollBar::right-arrow:horizontal {
    background: grey;
    width: 4px;
    height: 4px;
  }
  QScrollBar::add-page:horizontal, QScrollBar::sub-page:horizontal {
    background: none;
  }
 ]]
 dark_style3 = [[
 
 /* Trigger Area Elements */
 QWidget#widget_top, QLabel#label_patternNumber {
     background-color: ]]..bg_col..[[; }
 QWidget#widget_4 {
      background-color: ]]..bg_col..[[; }
 QGroupBox#groupBox_stayOpen {
     background-color: #2a2a20; }
 QGroupBox#groupBox_soundTrigger {
     background-color: #202a20; }
 QWidget#widget_13, QWidget#widget_3 {
     background-color: ]]..bg_col..[[; }
 QGroupBox#groupBox_multiLineTrigger {
     background-color: #252530; }
 QWidget#widget_12 {
     background-color: ]]..bg_col..[[; }
 QGroupBox#groupBox_filterTrigger {
      background-color: #302530; }
 QWidget#widget_11 {
     background-color: ]]..bg_col..[[; }
 QGroupBox#groupBox_perlSlashGOption {
     background-color: #382525; }
 QGroupBox#groupBox_triggerColorizer {
     background-color: #203038; }
 QWidget#widget_10 {
     background-color: ]]..bg_col..[[; }
		 
 /* ------ variable area things-------- */
 QWidget#widget_variable_key_type { background-color: #352535; }
 QWidget#widget_variable_var_type { background-color: #352525; }
 QWidget#widget_variable_hide { background-color: #353525; }
 
 QTabBar QToolButton::right-arrow:enabled {
     image: url(]]..packagepath..[[right_arrow.png);
 }
 QTabBar QToolButton::left-arrow:enabled {
     image: url(]]..packagepath..[[left_arrow.png);
 }
QTabBar QToolButton::right-arrow:disabled {
     image: url(]]..packagepath..[[right_arrow_disabled.png);
}
 QTabBar QToolButton::left-arrow:disabled {
     image: url(]]..packagepath..[[left_arrow_disabled.png);
}


QTreeView::branch {
        border-image: url(]]..packagepath..[[transparent.png);
    }
    QTreeView::branch:closed:has-children {
        image: url(]]..packagepath..[[branch_closed.png);
    }
    QTreeView::branch:open:has-children {
        image: url(]]..packagepath..[[branch_open.png);
    }
    QTreeView::branch:closed:has-children:hover {
        image: url(]]..packagepath..[[branch_closed-on.png);
    }
    QTreeView::branch:open:has-children:hover  {
        image: url(]]..packagepath..[[branch_open-on.png);
    }
 
 
QSizeGrip {
    image: url(]]..packagepath..[[sizegrip.png);
    width: 12px;
    height: 12px;
}
QToolBar::handle:horizontal {
    image: url(]]..packagepath..[[Hmovetoolbar.png);
}
QToolBar::handle:vertical {
    image: url(]]..packagepath..[[Vmovetoolbar.png);
}
QToolBar::separator:horizontal {
    image: url(]]..packagepath..[[Hsepartoolbar.png);
}
QToolBar::separator:vertical {
    image: url(]]..packagepath..[[Vsepartoolbar.png);
}
QAbstractSpinBox::up-arrow,QAbstractSpinBox::up-arrow:disabled,QAbstractSpinBox::up-arrow:off {
    image: url(]]..packagepath..[[up_arrow_disabled.png);
    width: 8px;
    height: 8px;
}
QAbstractSpinBox::up-arrow:hover {
    image: url(]]..packagepath..[[up_arrow.png);
}
QAbstractSpinBox::down-arrow,QAbstractSpinBox::down-arrow:disabled,QAbstractSpinBox::down-arrow:off {
    image: url(]]..packagepath..[[down_arrow_disabled.png);
    width: 8px;
    height: 8px;
}
QAbstractSpinBox::down-arrow:hover {
    image: url(]]..packagepath..[[down_arrow.png);
}
]]
DarkStyle = dark_style1..dark_style2..dark_style3
function DarkTheme()
zgui.darkmode = true
setAppStyleSheet(DarkStyle)
  zgui.echo("Mudlet Stylesheet Set to Dark Mode.")
end</script>
					<eventHandlerList>
						<string>sysLoadEvent</string>
						<string>sysInstall</string>
					</eventHandlerList>
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>DarkThemeUninstall</name>
					<packageName></packageName>
					<script>function DarkThemeUninstall()
  zgui.darkmode = false
  setAppStyleSheet([[]])
  zgui.echo("Mudlet Stylesheet reverted to default.")
end</script>
					<eventHandlerList>
						<string>sysUninstallPackage</string>
					</eventHandlerList>
				</Script>
			</ScriptGroup>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>Extra Code</name>
				<packageName>convertToUserWindow</packageName>
				<script></script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>convertAdj.Init</name>
					<packageName></packageName>
					<script>-- convert Adjustable.Containers to UserWindows and back
-- v0.1
-- Note: saving if UserWindow won't bring back as UserWindow if reloading
-- by Edru 7th October 2020

convertAdj = convertAdj or {}
function Adjustable.Container:onDoubleClick()
  self.isUserWindow = self.isUserWindow or false
  if not self.isUserWindow then
    self.userwindow = self.userwindow or Geyser.UserWindow:new({name = self.name.."userWindow"})
    self.userwindow:show()
    self.userwindow:setTitle(self.name)
    self.userwindow:move(self:get_x(), self:get_y())
    self.userwindow:resize(self:get_width(), self:get_height())
    self:changeContainer(self.userwindow)
    self:move(0,0)
    self:resize("100%", "100%")
    self:lockContainer("standard")
  else
    registerAnonymousEventHandler("sysWindowMousePressEvent", "convertAdj.sendToPosition", true)
    convertAdj.container = self
    self.userwindow:hide_impl()
  end
  self.isUserWindow = self.isUserWindow == false and true or false 
end

function convertAdj.Init()
  Adjustable.Container:doAll(function(self) self.adjLabel:setDoubleClickCallback(function(event) self:onDoubleClick() end)end)
  local newWrapper = Adjustable.Container.new
  local saveWrapper = Adjustable.Container.save
  
  function Adjustable.Container:new(cons, container)
    local me = newWrapper(self, cons, container)
    me.adjLabel:setDoubleClickCallback(function(event) me:onDoubleClick() end)
    return me
  end
  
  function Adjustable.Container:save(slot, dir)
    if self.isUserWindow then
      local tempWindowName = self.windowname
      self.windowname = "main"
      self:setAbsolute(true, true)
      self:unlockContainer()
      saveWrapper(self, slot, dir)
      self:lockContainer()
      self.windowname = tempWindowName
      self:setPercent(true, true)
    else
      saveWrapper(self, slot, dir)
    end
    return true
  end
  
end

function convertAdj.sendToPosition(event, button, x, y, windowname)
    local self = convertAdj.container
    local newContainer = Geyser
    if windowname ~= "main" then
        newContainer = Geyser.windowList[windowname.."Container"].windowList[windowname]
    end
    self:resize(self:get_width(), self:get_height())
    self:move(x, y)
    self:changeContainer(Geyser)
    self:setPercent(true, true)
    self:unlockContainer()
    self:show()
    convertAdj.container = nil
end</script>
					<eventHandlerList>
						<string>sysLoadEvent</string>
						<string>sysInstall</string>
					</eventHandlerList>
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>ansiArt()</name>
					<packageName></packageName>
					<script>function zgui.ansiArt(artWork, showWord)
  local ansiColor = "red"
  local ansiColor2 = "red"
  if artWork == "skull" then
    ansiColor = "red"
    cecho("\n&lt;"..ansiColor.."&gt;            .                                                      .")
    cecho("\n&lt;"..ansiColor.."&gt;          .n                   .                 .                  n.")
    cecho("\n&lt;"..ansiColor.."&gt;    .   .dP                  dP                   9b                 9b.    .")
    cecho("\n&lt;"..ansiColor.."&gt;   4    qXb         .       dX                     Xb       .        dXp     t")
    cecho("\n&lt;"..ansiColor.."&gt;  dX.    9Xb      .dXb    __                         __    dXb.     dXP     .Xb")
    cecho("\n&lt;"..ansiColor.."&gt;  9XXb._       _.dXXXXb dXXXXbo.                 .odXXXXb dXXXXb._       _.dXXP")
    cecho("\n&lt;"..ansiColor.."&gt;   9XXXXXXXXXXXXXXXXXXXVXXXXXXXXOo.           .oOXXXXXXXXVXXXXXXXXXXXXXXXXXXXP")
    cecho("\n&lt;"..ansiColor.."&gt;    `9XXXXXXXXXXXXXXXXXXXXX'~   ~`OOO8b   d8OOO'~   ~`XXXXXXXXXXXXXXXXXXXXXP'")
    cecho("\n&lt;"..ansiColor.."&gt;      `9XXXXXXXXXXXP' `9XX'          `98v8P'          `XXP' `9XXXXXXXXXXXP'")
    cecho("\n&lt;"..ansiColor.."&gt;          ~~~~~~~       9X.          .db|db.          .XP       ~~~~~~~")
    cecho("\n&lt;"..ansiColor.."&gt;                          )b.  .dbo.dP'`v'`9b.odb.  .dX(")
    cecho("\n&lt;"..ansiColor.."&gt;                        ,dXXXXXXXXXXXb     dXXXXXXXXXXXb.")
    cecho("\n&lt;"..ansiColor.."&gt;                       dXXXXXXXXXXXP'   .   `9XXXXXXXXXXXb")
    cecho("\n&lt;"..ansiColor.."&gt;                      dXXXXXXXXXXXXb   d|b   dXXXXXXXXXXXXb")
    cecho("\n&lt;"..ansiColor.."&gt;                      9XXb'   `XXXXXb.dX|Xb.dXXXXX'   `dXXP")
    cecho("\n&lt;"..ansiColor.."&gt;                       `'      9XXXXXX(   )XXXXXXP      `'")
    cecho("\n&lt;"..ansiColor.."&gt;                                XXXX X.`v'.X XXXX")
    cecho("\n&lt;"..ansiColor.."&gt;                                XP^X'`b   d'`X^XX")
    cecho("\n&lt;"..ansiColor.."&gt;                                X. 9  `   '  P )X")
    cecho("\n&lt;"..ansiColor.."&gt;                                `b  `       '  d'")
    cecho("\n&lt;"..ansiColor.."&gt;                                 `             '")
    cecho("\n")
  end
  
  if artWork == "relic" then
    if showWord then
      zgui.relicWord = showWord
    else
      zgui.relicWord = "Relic Found"
    end
    ansiColor = "gold"
    ansiColor2 = "red"
    cecho("\n&lt;"..ansiColor.."&gt;           \/\\                         &lt;"..ansiColor2.."&gt;"..zgui.relicWord.."&lt;"..ansiColor.."&gt;                         \/\\")
    cecho("\n&lt;"..ansiColor.."&gt; _         )( ______________________  &lt;"..ansiColor2.."&gt;"..zgui.relicWord.."&lt;"..ansiColor.."&gt;  ______________________ )(         _")
    cecho("\n&lt;"..ansiColor.."&gt;(_)///////(**)______________________) &lt;"..ansiColor2.."&gt;"..zgui.relicWord.."&lt;"..ansiColor.."&gt; (______________________(**)\\\\\\\\\\\\\\(_)")
    cecho("\n&lt;"..ansiColor.."&gt;           )(                         &lt;"..ansiColor2.."&gt;"..zgui.relicWord.."&lt;"..ansiColor.."&gt;                         )(")
    cecho("\n&lt;"..ansiColor.."&gt;           \\\/                         &lt;"..ansiColor2.."&gt;"..zgui.relicWord.."&lt;"..ansiColor.."&gt;                         \\\/")
    cecho("\n&lt;"..ansiColor.."&gt;")
  end

end</script>
					<eventHandlerList />
				</Script>
			</ScriptGroup>
			<Script isActive="yes" isFolder="no">
				<name>EDIT ME: Startup Main</name>
				<packageName></packageName>
				<script>-------------------------------------------------
-- Zulah GUI build 
-- 6/15/21
-- v4.0
-- convert Adjustable.Containers to UserWindows and back
-- v0.1
-- Note: saving if UserWindow won't bring back as UserWindow if reloading
-- by Edru 7th October 2020
-------------------------------------------------

local startupEvent = registerAnonymousEventHandler("gmcp.Char", "zgui.zStartup", true)

function zgui.zStartup() 
 if not zgui.running then
  zgui.running = true
--------------------------------------------------------------------
-- Change the Font Size of each window on startup to fit your screen size better if needed
  zgui.chatSize = 10
  zgui.loggerSize = 9
  zgui.promptSize = 9
  zgui.goldSize = 9
  zgui.defenceSize = 9
  zgui.afflictionSize = 9
  zgui.targetAffsSize = 9
  zgui.targetListSize = 9
  zgui.enemySize = 9
  zgui.allySize = 9
  zgui.roomDenizensSize = 9
  zgui.roomItemsSize = 9
  zgui.roomPlayersSize = 9
  zgui.mapSize = 9
--------------------------------------------------------------------
  setBorderColor("0","0","0")  -- Change this if you attach windows to side borders and want to color the background of those borders
                               -- setBorderColor("218","218","218") -- Mudlet Default Menu Grey
                               -- setBorderColor("RED","GREEN","BLUE")
--------------------------------------------------------------------       
-- Which Style To Start With?  
  if not zgui.useStyle then zgui.useStyle = "dimgreyinset" end    
                      
  for k,v in pairs(zgui.styles) do
    if zgui.useStyle == k then
      zgui.adjLabelstyle = v
    end
  end   
----------------------------------------------------------------------------------------------------------------------------------------
    zgui.setupDefences() 
    zgui.windows = "unknown"
    
    sendGMCP([[Core.Supports.Add ["Comm.Channel 1"] ]])
    sendGMCP('Core.Supports.Add ["IRE.Tasks 1"]')
    sendGMCP('Core.Supports.Add ["IRE.Time 1"]')
    sendGMCP('Core.Supports.Add ["IRE.Misc 1"]')
    sendGMCP('Core.Supports.Add ["IRE.Display 1"]')
    sendGMCP('Core.Supports.Add ["IRE.Sound 1"]')
    
    if not table.contains(zgui.modules, "Chat") then table.insert(zgui.modules, "Chat") end
    if not table.contains(zgui.modules, "Map") then table.insert(zgui.modules, "Map") end  
    if not table.contains(zgui.modules, "Balances") then table.insert(zgui.modules, "Balances") end
    if not table.contains(zgui.modules, "Exp") then table.insert(zgui.modules, "Exp") end
    if not table.contains(zgui.modules, "Logger") then table.insert(zgui.modules, "Logger") end
    if not table.contains(zgui.modules, "Prompt") then table.insert(zgui.modules, "Prompt") end
    if not table.contains(zgui.modules, "Gold") then table.insert(zgui.modules, "Gold") end  
    if not table.contains(zgui.modules, "Ally") then table.insert(zgui.modules, "Ally") end
    if not table.contains(zgui.modules, "Enemy") then table.insert(zgui.modules, "Enemy") end
    if not table.contains(zgui.modules, "Defence") then table.insert(zgui.modules, "Defence") end
    if not table.contains(zgui.modules, "Affliction") then table.insert(zgui.modules, "Affliction") end 
    if not table.contains(zgui.modules, "Afflictionlock") then table.insert(zgui.modules, "Afflictionlock") end 
    if not table.contains(zgui.modules, "Targetaffliction") then table.insert(zgui.modules, "Targetaffliction") end
    if not table.contains(zgui.modules, "Roomplayers") then table.insert(zgui.modules, "Roomplayers") end
    if not table.contains(zgui.modules, "Roomdenizens") then table.insert(zgui.modules, "Roomdenizens") end
    if not table.contains(zgui.modules, "Roomitems") then table.insert(zgui.modules, "Roomitems") end
    --if not table.contains(zgui.modules, "Targetlist") then table.insert(zgui.modules, "Targetlist") end
    if not table.contains(zgui.modules, "Brage") then table.insert(zgui.modules, "Brage") end
    if not table.contains(zgui.modules, "Charstat") then table.insert(zgui.modules, "Charstat") end
    if not table.contains(zgui.modules, "Ship") then table.insert(zgui.modules, "Ship") end 
    if not table.contains(zgui.modules, "Healthbar") then table.insert(zgui.modules, "Healthbar") end
    if not table.contains(zgui.modules, "Manabar") then table.insert(zgui.modules, "Manabar") end
    
    if not table.contains(zgui.modules, "Help") then table.insert(zgui.modules, "Help") end
    
    
    for i=1, #zgui.modules, 1 do
      zgui["build"..zgui.modules[i]]()
    end 
    
    ------------------------------------------------------------------------
    zgui.debug = false
    zgui.trueTime = 0

	  zgui.vitals = {
 		  h = 5000,
 		  m = 5000,
 		  maxh = 5000,
 	 	  maxm = 5000,
  		oh = 5000, --old health
  		om = 5000, --old mana
 	  	xp = 0,
   		oxp = 0, --old xp
	  }
    
    zgui.myTargetList = zgui.myTargetList or {} 

	  zgui.allies = zgui.allies or {}
	  zgui.enemies = zgui.enemies or {}
  
    send("ql")    
    send("allies")
    send("enemies")
    ------------------------------------------------------------------------
    
    disableTimer("Deathcape Timer")
    
    killAnonymousEventHandler(startupEvent)
    Adjustable.Container.hideAll()
    zgui.buildHelp()
    Adjustable.Container:loadAll("default")
    zgui.windows = "default"
    zgui.showHelp()
  end
end</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>EDIT ME: zGUI Defences</name>
				<packageName></packageName>
				<script>function zgui.setupDefences()
-------------------------------------------------------------
	zgui.defs = zgui.defs or {}
	zgui.defs.classless = {
		["basic"] = {
			"insomnia",
			"cloak",
			"mindseye",	
			"selfishness"},
		["combat"] = {
			"selfishness",
			"insomnia",
			"blindness",
			"cloak",
			"mindseye",				
			"thirdeye",
			"deafness",
			"deathsight",
			"alertness",
			"kola",
			"skywatch",
			"groundwatch",
			"levitating",
			"temperance",
			"insulation",
			"poisonresist",
			"speed",
			"nightsight"},
	}
-------------------------------------------------------------
	zgui.defs.class = {
		["none"] = {},
    ["Alchemist"] = {},
    ["Apostate"] = {},
		["Bard"] = {
			"tune",
			"lay"},        
		["Blademaster"] = {
			"shinbinding",
			"shintrance",
			"shinclarity",
			"mindnet",
			"twoartsstance",
			"weathering",
			"toughness"},
    ["Depthswalker"] = {},
    ["Druid"] = {},
    ["Infernal"] = {},
    ["Jester"] = {},
		["Magi"] = {
			"stoneskin",
			"stonefist",
			"chargeshield",
			"diamondskin"},                	
		["Monk"] = {                   
			"kaitrance",
			"vitality",
			"mindnet",
			"splitmind",
			"weathering",
			"toughness",
			"regeneration",
			"boostedregeneration",
			"vitality",
			"resistance",
			"constitution"},              
    ["Occultist"] = {},
    ["Paladin"] = {},
    ["Priest"] = {},
    ["Psion"] = {},
    ["Runewarden"] = {},
    ["Sentinel"] = {},         
		["Serpent"] = {
			"hiding",
			"shroud",
			"scales",
			"pacing",
			"lipreading",
			"ghost",
			"secondsight"},
    ["Shaman"] = {},
    ["Sylvan"] = {},         
	}
	
end</script>
				<eventHandlerList />
			</Script>
			<Script isActive="yes" isFolder="no">
				<name>EDIT ME: Restyle GUI Colors</name>
				<packageName></packageName>
				<script>function zgui.restyle()
  zgui.styles = {  
     -- https://doc.qt.io/qt-5/stylesheet-reference.html (more info)                      
                                     --rgba(RED, GREEN, BLUE, Transparency)
    ["greygroove"] = "background-color:rgba(0,0,0,0%); border: 5px groove grey;",
    ["greengroove"] = "background-color:rgba(0,0,0,100%); border: 5px groove green;",
    
    ["dimgreyinset"] = "background-color:rgba(20,20,20,100%); border: 5px inset dimgray;",
    ["greyinset"] = "background-color:rgba(0,0,0,100%); border: 10px inset grey;",
    ["greeninset"] = "background-color:rgba(0,0,0,100%); border: 5px inset green;",
    ["chaosinset"] = "background-color:rgba(0,40,100,100%); border: 5px inset purple;",
    
    ["greydouble"] = "background-color:rgba(0,0,0,0%); border: 5px double grey;",
    ["greendouble"] = "background-color:rgba(0,0,0,50%); border: 5px double green;",    
    ["golddouble"] = "background-color:rgba(0,0,0,50%); border: 5px double gold;",
  }
--------------------------------------------------------------------
-- Which Style To Start With?  
  if not zgui.useStyle then zgui.useStyle = "dimgreyinset" end
  
----------------------------------------------------------------------------------------------------------------------------------------
  setBorderColor("0","0","0")  -- Change this if you attach windows to side borders and want to color the background of those borders
                               -- setBorderColor("218","218","218") -- Mudlet Default Menu Grey
                               -- setBorderColor("RED","GREEN","BLUE")
                               
                               
----------------------------------------------------------------------------------------------------------------------------------------                               
  for k,v in pairs(zgui.styles) do
    if zgui.useStyle == k then
      zgui.adjLabelstyle = v
    end
  end   
  
  for i=1, #zgui.modules, 1 do
    zgui["build"..zgui.modules[i]]()
  end  
----------------------------------------------------------------------------------------------------------------------------------------
end</script>
				<eventHandlerList />
			</Script>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>Chat</name>
				<packageName></packageName>
				<script></script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>buildChat</name>
					<packageName></packageName>
					<script>function zgui.buildChat()
  zgui.chatSize = zgui.chatSize or 9
  zgui.chat = {}
  zgui.chat.tabs = {"All","City","House","Order","Party","Clans","Tells","Market","Misc"}
  zgui.chat.color1 = "rgb(100,100,100)"
  zgui.chat.color2 = "rgb(0,0,0)"
  zgui.chat.color3 = "rgb(150,150,150)"
  zgui.chat.width = "100%"
  zgui.chat.height = "100%"
  zgui.chat.current = zgui.chat.tabs[1]
  zgui.chat.useCmdLine = false

  --Create the main container
  --Our tabbed window will need a container. This will be the bottom layer. Containers are invisible so no need to set a stylesheet. 
  zgui.chat.window = Adjustable.Container:new({
    name = "zgui.chat.window",
    x = 0, y = 0,
    width = "50%",
    height = "50%",  
    adjLabelstyle = zgui.adjLabelstyle,
    buttonstyle=[[
      QLabel{ border-radius: 5px; background-color: rgba(140,140,140,100%);}
      QLabel::hover{ background-color: rgba(160,160,160,50%);}
    ]],
    buttonFontSize = 10,
    buttonsize = 15,          
  },main)
  zgui.chat.window:changeMenuStyle("dark")

  --Create the main container
  --Our tabbed window will need a container. This will be the bottom layer. Containers are invisible so no need to set a stylesheet. 
  zgui.chat.container = Geyser.Container:new({
    name = "zgui.chat.back",
    x = 0, y = 0,
    width = "100%",
    height = "100%",        
  },zgui.chat.window)
  
 --Create an HBox
 --All of our tabs will be evenly spaced. So we'll create an HBox to sit at the top of our container. 
 zgui.chat.header = Geyser.HBox:new({
    name = "zgui.chat.header",
    x = 0, y = 0,
    width = "100%",
    height = "8%",
  },zgui.chat.container)  
  
  --Create a label
  --This label will serve as a container for each window. It sits right underneath the HBox we just created for the tabs. 
  zgui.chat.footer = Geyser.Label:new({
    name = "zgui.chat.footer",
    x = 0, y = "8%",
    width = "100%",
    height = "92%",
  },zgui.chat.container)
  
  --Each window actually has two labels.
  zgui.chat.center = Geyser.Label:new({
    name = "zgui.chat.center",
    x = 0, y = 0,
    width = "100%",
    height = "100%",
  },zgui.chat.footer)
  zgui.chat.center:setBackgroundImage(getMudletHomeDir()..[[\zGUI\Artwork\Wallpapers\slate.jpg]], "center")

  zgui.chat.click = function(tab)
    zgui.chat[zgui.chat.current.."tab"]:setStyleSheet([[
      background-color: ]]..zgui.chat.color1..[[;
      border-top-left-radius: 10px;
      border-top-right-radius: 10px;
      margin-right: 1px;
      margin-left: 1px;
    ]])
    zgui.chat[zgui.chat.current]:hide()
    zgui.chat.current = tab
    zgui.chat[zgui.chat.current]:show()
    zgui.chat[zgui.chat.current.."tab"]:setStyleSheet([[
      background-color: ]]..zgui.chat.color3..[[;
      border-top-left-radius: 20px;
      border-top-right-radius: 20px;
      margin-right: 2px;
      margin-left: 2px;
    ]])  
  end
  
  for k,v in pairs(zgui.chat.tabs) do
    zgui.chat[v.."tab"] = Geyser.Label:new({
      name = "zgui.chat."..v.."tab",
      fgColor = "black",
    },zgui.chat.header)
    
    zgui.chat[v.."tab"]:setStyleSheet([[
      background-color: ]]..zgui.chat.color1..[[;
      border-top-left-radius: 10px;
      border-top-right-radius: 10px;
      margin-right: 1px;
      margin-left: 1px;
    ]])
    
    zgui.chat[v.."tab"]:echo("&lt;center&gt;"..v)
    zgui.chat[v.."tab"]:setClickCallback("zgui.chat.click",v)

    zgui.chat[v] = Geyser.Label:new({
      name = "zgui.chat."..v,
      x = 0, y = 0,
      width = "100%",
      height = "100%",
    },zgui.chat.footer)

    zgui.chat[v.."center"] = Geyser.Label:new({
      name = "zgui.chat."..v.."center",
      x = 0, y = 0,
      width = "100%",
      height = "100%",
    },zgui.chat[v])
  
    zgui.chat[v]:hide()
  end
  
  -- Create each channel window
  zgui.chat.allchat = Geyser.MiniConsole:new({
    name = "All",
    x = 0, y = 0,
    autoWrap = true,
    width = "100%",
    height = "100%",
    color="black",
  },zgui.chat.Allcenter)     
  hideWindow("All")
  zgui.chat.allchat:setBackgroundImage(getMudletHomeDir()..[[\zGUI\Artwork\Wallpapers\slate.jpg]], "center")

  zgui.chat.citychat = Geyser.MiniConsole:new({
    name = "City",
    x = 0, y = 0,
    autoWrap = true,
    width = "100%",
    height = "100%",
    color="black",
  },zgui.chat.Citycenter)     
  hideWindow("City")
  zgui.chat.citychat:setBackgroundImage(getMudletHomeDir()..[[\zGUI\Artwork\Wallpapers\slate.jpg]], "center")
  
  zgui.chat.housechat = Geyser.MiniConsole:new({
    name = "House",
    x = 0, y = 0,
    autoWrap = true,
    width = "100%",
    height = "100%",
    color="black",
  },zgui.chat.Housecenter)       
  hideWindow("House")
  zgui.chat.housechat:setBackgroundImage(getMudletHomeDir()..[[\zGUI\Artwork\Wallpapers\slate.jpg]], "center")
  
  zgui.chat.orderchat = Geyser.MiniConsole:new({
    name = "Order",
    x = 0, y = 0,
    width = "100%",
    height = "100%",
    color="black",
  },zgui.chat.Ordercenter)       
  hideWindow("Order")
  zgui.chat.orderchat:setBackgroundImage(getMudletHomeDir()..[[\zGUI\Artwork\Wallpapers\slate.jpg]], "center")

  zgui.chat.partychat = Geyser.MiniConsole:new({
    name = "Party",
    x = 0, y = 0,
    autoWrap = true,
    width = "100%",
    height = "100%",
    color="black",
  },zgui.chat.Partycenter)       
  hideWindow("Party")
  zgui.chat.partychat:setBackgroundImage(getMudletHomeDir()..[[\zGUI\Artwork\Wallpapers\slate.jpg]], "center")

  zgui.chat.clanschat = Geyser.MiniConsole:new({
    name = "Clans",
    x = 0, y = 0,
    autoWrap = true,
    width = "100%",
    height = "100%",
    color="black",
  },zgui.chat.Clanscenter)       
  hideWindow("Clans")
  zgui.chat.clanschat:setBackgroundImage(getMudletHomeDir()..[[\zGUI\Artwork\Wallpapers\slate.jpg]], "center")
  
  zgui.chat.tellschat = Geyser.MiniConsole:new({
    name = "Tells",
    x = 0, y = 0,
    autoWrap = true,
    width = "100%",
    height = "100%",
    color="black",
  },zgui.chat.Tellscenter)         
  hideWindow("Tells")
  zgui.chat.tellschat:setBackgroundImage(getMudletHomeDir()..[[\zGUI\Artwork\Wallpapers\slate.jpg]], "center")
  
  zgui.chat.marketchat = Geyser.MiniConsole:new({
    name = "Market",
    x = 0, y = 0,
    autoWrap = true,
    width = "100%",
    height = "100%",
    color="black",
  },zgui.chat.Marketcenter)     
  hideWindow("Market")
  zgui.chat.marketchat:setBackgroundImage(getMudletHomeDir()..[[\zGUI\Artwork\Wallpapers\slate.jpg]], "center")
  
  zgui.chat.miscchat = Geyser.MiniConsole:new({
    name = "Misc",
    x = 0, y = 0,
    autoWrap = true,
    width = "100%",
    height = "100%",
    color="black",
  },zgui.chat.Misccenter)     
  hideWindow("Misc")
  zgui.chat.miscchat:setBackgroundImage(getMudletHomeDir()..[[\zGUI\Artwork\Wallpapers\slate.jpg]], "center")
  
  setFontSize("All", zgui.chatSize)
  setFontSize("City", zgui.chatSize)
  setFontSize("House", zgui.chatSize)
  setFontSize("Order", zgui.chatSize)
  setFontSize("Party", zgui.chatSize)
  setFontSize("Clans", zgui.chatSize)
  setFontSize("Tells", zgui.chatSize)
  setFontSize("Market", zgui.chatSize)
  setFontSize("Misc", zgui.chatSize)
  zgui.chat.window:setTitle("Chat","gray")
  zgui.chat.window:show()
  
  if not table.contains(zgui.modules, "Chat") then
    table.insert(zgui.modules, "Chat")
  end
end

</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>showChat</name>
					<packageName></packageName>
					<script>function zgui.showChat()
  local shortName = ""
  local chatWindow = ""
  local text = ansi2decho(gmcp.Comm.Channel.Text.text)
  for k,v in pairs(gmcp.Comm.Channel.List) do
    shortName = gmcp.Comm.Channel.List[k].command
  end
  
  if string.starts(gmcp.Comm.Channel.Start, "says") then
    chatWindow = "All"
  elseif string.starts(gmcp.Comm.Channel.Start, "armytell") then
    chatWindow = "City"
  elseif string.starts(gmcp.Comm.Channel.Start, "yell") then
    chatWindow = "Misc"
  elseif string.starts(gmcp.Comm.Channel.Start, "shout") then
    chatWindow = "Misc"    
  elseif string.starts(gmcp.Comm.Channel.Start, "ct") then
    chatWindow = "City"
  elseif string.starts(gmcp.Comm.Channel.Start, "ht") then
    chatWindow = "House"
  elseif string.starts(gmcp.Comm.Channel.Start, "hnt") then
    chatWindow = "House"
  elseif string.starts(gmcp.Comm.Channel.Start, "ot") then
    chatWindow = "Order"
  elseif string.starts(gmcp.Comm.Channel.Start, "party") then
    chatWindow = "Party"
  elseif string.starts(gmcp.Comm.Channel.Start, "clt17") then
    chatWindow = "Misc"
  elseif string.starts(gmcp.Comm.Channel.Start, "clt") then
    chatWindow = "Clans"
  elseif string.starts(gmcp.Comm.Channel.Start, "tell") then
    chatWindow = "Tells"
  elseif string.starts(gmcp.Comm.Channel.Start, "market") then
    chatWindow = "Market"    
  elseif string.starts(gmcp.Comm.Channel.Start, "newbie") then
    chatWindow = "Misc"    
  end    

  local sending = zgui.talkerIsDenizen()
  if not sending then return end
  
  decho(chatWindow, text.."\n")
  if chatWindow ~= "All" and not string.starts(gmcp.Comm.Channel.Start, "clt17") then
    decho("All", text.."\n")
  end
end

function zgui.talkerIsDenizen()
  local talker = gmcp.Comm.Channel.Text.talker
  if table.contains(zgui.roomDenizenList, talker) or table.contains(zgui.roomItemList, talker) then
    return false
  else
    return true
  end
end

registerAnonymousEventHandler("gmcp.Comm.Channel.Start", "zgui.showChat")</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>Chat Cmd Prompt</name>
					<packageName></packageName>
					<script>zgui.chat.citychat:setCmdAction(zgui.chatSend, "ct")
zgui.chat.housechat:setCmdAction(zgui.chatSend, "ht")
zgui.chat.orderchat:setCmdAction(zgui.chatSend, "ot")
zgui.chat.partychat:setCmdAction(zgui.chatSend, "pt")
zgui.chat.marketchat:setCmdAction(zgui.chatSend, "market")

function zgui.chatSend(channel, text)
  send(channel.." "..text)
end</script>
					<eventHandlerList />
				</Script>
			</ScriptGroup>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>Balances</name>
				<packageName></packageName>
				<script></script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>buildBalances</name>
					<packageName></packageName>
					<script>function zgui.buildBalances()
  zgui.balances = {}
  
  --Create the main Adjustable
  zgui.balances.window = Adjustable.Container:new({
    name = "zgui.balances.window",
    x = 0, y = 0,
    width = "50%",
    height = "50%",  
    adjLabelstyle = zgui.adjLabelstyle,
    buttonstyle=[[
      QLabel{ border-radius: 5px; background-color: rgba(140,140,140,100%);}
      QLabel::hover{ background-color: rgba(160,160,160,50%);}
    ]],
    buttonFontSize = 10,
    buttonsize = 15,          
  },main)
  zgui.balances.window:changeMenuStyle("dark")

  --Create the log container
  zgui.balances.container = Geyser.Container:new({
    name = "zgui.balances.container",
    x = 0, y = 0,
    width = "100%",
    height = "100%",        
  },zgui.balances.window)  

  --Each Balance Toggle
-----------------------------------------------------------------------------  
  --Balance
  zgui.balances.b = Geyser.Label:new({
    name = "zgui.balances.b",
    x = "1%", y = "2%",
    width = "98%",
    height = "10%",
  },zgui.balances.container)
  zgui.balances.b:setStyleSheet([[
      background-color: rgba(150,50,50,50%);
      border-top-left-radius: 10px;
      border-top-right-radius: 10px;
      border-bottom-left-radius: 10px;
      border-bottom-right-radius: 10px;      
      margin-right: 1px;
      margin-left: 1px;
    ]])
  zgui.balances.b:echo("&lt;center&gt;Balance")

  --Equilibrium
  zgui.balances.e = Geyser.Label:new({
    name = "zgui.balances.e",
    x = "1%", y = "15%",
    width = "98%",
    height = "10%",
  },zgui.balances.container) 
  zgui.balances.e:setStyleSheet([[
      background-color: rgba(150,50,50,50%);
      border-top-left-radius: 10px;
      border-top-right-radius: 10px;
      border-bottom-left-radius: 10px;
      border-bottom-right-radius: 10px;      
      margin-right: 1px;
      margin-left: 1px;
    ]])
  zgui.balances.e:echo("&lt;center&gt;Equilibrium")    
  
  --Tree
  zgui.balances.tree = Geyser.Label:new({
    name = "zgui.balances.tree",
    x = "3%", y = "35%",
    width = "94%",
    height = "8%",
  },zgui.balances.container) 
  zgui.balances.tree:setStyleSheet([[
      background-color: rgba(150,50,50,50%);
      border-top-left-radius: 10px;
      border-top-right-radius: 10px;
      border-bottom-left-radius: 10px;
      border-bottom-right-radius: 10px;      
      margin-right: 1px;
      margin-left: 1px;
    ]])
  zgui.balances.tree:echo("&lt;center&gt;Tree") 

  --Focus
  zgui.balances.focus = Geyser.Label:new({
    name = "zgui.balances.focus",
    x = "3%", y = "45%",
    width = "94%",
    height = "8%",
  },zgui.balances.container) 
  zgui.balances.focus:setStyleSheet([[
      background-color: rgba(150,50,50,50%);
      border-top-left-radius: 10px;
      border-top-right-radius: 10px;
      border-bottom-left-radius: 10px;
      border-bottom-right-radius: 10px;      
      margin-right: 1px;
      margin-left: 1px;
    ]])
  zgui.balances.focus:echo("&lt;center&gt;Focus")   

  --Sipping
  zgui.balances.hm = Geyser.Label:new({
    name = "zgui.balances.hm",
    x = "3%", y = "65%",
    width = "94%",
    height = "8%",
  },zgui.balances.container) 
  zgui.balances.hm:setStyleSheet([[
      background-color: rgba(150,50,50,50%);
      border-top-left-radius: 10px;
      border-top-right-radius: 10px;
      border-bottom-left-radius: 10px;
      border-bottom-right-radius: 10px;      
      margin-right: 1px;
      margin-left: 1px;
    ]])
  zgui.balances.hm:echo("&lt;center&gt;Sipping")

  --Moss
  zgui.balances.moss = Geyser.Label:new({
    name = "zgui.balances.moss",
    x = "3%", y = "75%",
    width = "94%",
    height = "8%",    
  },zgui.balances.container) 
  zgui.balances.moss:setStyleSheet([[
      background-color: rgba(150,50,50,50%);
      border-top-left-radius: 10px;
      border-top-right-radius: 10px;
      border-bottom-left-radius: 10px;
      border-bottom-right-radius: 10px;      
      margin-right: 1px;
      margin-left: 1px;
    ]])
  zgui.balances.moss:echo("&lt;center&gt;Moss")   
  
  --Herb
  zgui.balances.herb = Geyser.Label:new({
    name = "zgui.balances.herb",
    x = "5%", y = "90%",
    width = "30%",
    height = "8%",    
  },zgui.balances.container) 
  zgui.balances.herb:setStyleSheet([[
      background-color: rgba(150,50,50,50%);
      border-top-left-radius: 5px;
      border-top-right-radius: 5px;
      border-bottom-left-radius: 5px;
      border-bottom-right-radius: 5px;      
      margin-right: 1px;
      margin-left: 1px;
    ]])
  zgui.balances.herb:echo("&lt;center&gt;Herb") 

  --Smoke
  zgui.balances.smoke = Geyser.Label:new({
    name = "zgui.balances.smoke",
    x = "35%", y = "90%",
    width = "30%",
    height = "8%",    
  },zgui.balances.container) 
  zgui.balances.smoke:setStyleSheet([[
      background-color: rgba(150,50,50,50%);
      border-top-left-radius: 5px;
      border-top-right-radius: 5px;
      border-bottom-left-radius: 5px;
      border-bottom-right-radius: 5px;      
      margin-right: 1px;
      margin-left: 1px;
    ]])
  zgui.balances.smoke:echo("&lt;center&gt;Smoke") 
    
  --Salve
  zgui.balances.salve = Geyser.Label:new({
    name = "zgui.balances.salve",
    x = "65%", y = "90%",
    width = "30%",
    height = "8%",    
  },zgui.balances.container) 
  zgui.balances.salve:setStyleSheet([[
      background-color: rgba(150,50,50,50%);
      border-top-left-radius: 5px;
      border-top-right-radius: 5px;
      border-bottom-left-radius: 5px;
      border-bottom-right-radius: 5px;      
      margin-right: 1px;
      margin-left: 1px;
    ]])
  zgui.balances.salve:echo("&lt;center&gt;Salve")    
  
----------------------------------------------------------------------------- 
  zgui.balances.window:setTitle("Survival","gray")
  zgui.balances.window:show()  
  
  if not table.contains(zgui.modules, "Balances") then
    table.insert(zgui.modules, "Balances")
  end
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>showBals</name>
					<packageName></packageName>
					<script>function zgui.showBals()
  if wsys then
  for k,v in pairs(wsys.bals) do
    if k == "b" or k == "e" or k == "tree" or k == "focus" or k == "hm" or k == "moss" or k == "herb" or k == "smoke" or k == "salve" then
        if v then
          zgui.balances[k]:setStyleSheet([[
            background-color: rgba(50,150,50,25%);
            border-top-left-radius: 10px;
            border-top-right-radius: 10px;
            border-bottom-left-radius: 10px;
            border-bottom-right-radius: 10px;      
            margin-right: 5px;
            margin-left: 5px;
          ]])
        else
          zgui.balances[k]:setStyleSheet([[
            background-color: rgba(150,50,50,50%);
            border-top-left-radius: 10px;
            border-top-right-radius: 10px;
            border-bottom-left-radius: 10px;
            border-bottom-right-radius: 10px;      
            margin-right: 1px;
            margin-left: 1px;
          ]])   
        end
      end
    end
   end
end

  --[[
  fitness = true,
  immunity = true, --7s
  dragonheal = true,
  fool = true,
  voice = true,
  rage = true,
  shrugging = true,
  la
  ra
  legs
  ]]--</script>
					<eventHandlerList />
				</Script>
			</ScriptGroup>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>Logger</name>
				<packageName></packageName>
				<script></script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>buildLogger</name>
					<packageName></packageName>
					<script>function zgui.buildLogger()
  zgui.loggerSize = zgui.loggerSize or 9
  zgui.logger = {}

  --Create the main Adjustable
  zgui.logger.window = Adjustable.Container:new({
    name = "zgui.logger.window",
    x = 0, y = 0,
    width = "50%",
    height = "50%",  
    adjLabelstyle = zgui.adjLabelstyle,
    buttonstyle=[[
      QLabel{ border-radius: 5px; background-color: rgba(140,140,140,100%);}
      QLabel::hover{ background-color: rgba(160,160,160,50%);}
    ]],
    buttonFontSize = 10,
    buttonsize = 15,          
  },main)
  zgui.logger.window:changeMenuStyle("dark")

  --Create the log container
  zgui.logger.container = Geyser.Container:new({
    name = "zgui.logger.back",
    x = 0, y = 0,
    width = "100%",
    height = "100%",        
  },zgui.logger.window)  

  --Create the Logger Console
  zgui.logger.console = Geyser.MiniConsole:new({
    name = "logDisplay",
    x = 0, y = 0,
    autoWrap = true,
    width = "100%",
    height = "100%",
    color="black",
  },zgui.logger.container)

  setFontSize("logDisplay", zgui.loggerSize)
  zgui.logger.window:setTitle("Logger","gray")
  zgui.logger.window:show()  
  
  if not table.contains(zgui.modules, "Logger") then
    table.insert(zgui.modules, "Logger")
  end
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>zgui.stats()</name>
					<packageName></packageName>
					<script>function zgui.stats()
	zgui.vitals = zgui.vitals or {
 		  h = 5000,
 		  m = 5000,
 		  maxh = 5000,
 	 	  maxm = 5000,
  		oh = 5000, --old health
  		om = 5000, --old mana
 	  	xp = 0,
   		oxp = 0, --old xp
	  }

  if gmcp.Char then
    zgui.vitals.h = tonumber(gmcp.Char.Vitals.hp)
    zgui.vitals.m = tonumber(gmcp.Char.Vitals.mp)
    zgui.vitals.e = tonumber(gmcp.Char.Vitals.ep)
    zgui.vitals.w = tonumber(gmcp.Char.Vitals.wp)
  
    zgui.vitals.maxh = tonumber(gmcp.Char.Vitals.maxhp)
    zgui.vitals.maxm = tonumber(gmcp.Char.Vitals.maxmp)
    zgui.vitals.maxe = tonumber(gmcp.Char.Vitals.maxep)
    zgui.vitals.maxw = tonumber(gmcp.Char.Vitals.maxwp)
	
	----------------------------------------------------------
	  zgui.statChange() -- If you want to see health and Mana changes in Log window

    zgui.vitals.oh = zgui.vitals.h
    zgui.vitals.om = zgui.vitals.m	
  end
end

registerAnonymousEventHandler("gmcp.Char.Vitals", "zgui.stats")</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>zgui.sendLogger</name>
					<packageName></packageName>
					<script>function zgui.sendLogger(colorCode, logMessage)
  zgui.trueTime = string.cut(getTime(true, "hh:mm:ss:zzz"), 11)
	cecho("logDisplay", "&lt;gold&gt;"..zgui.trueTime)
	cecho("logDisplay", "&lt;"..colorCode.."&gt;-- "..logMessage.."\n")
	--deleteLine()
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>zgui.statChange()</name>
					<packageName></packageName>
					<script>function zgui.statChange()
  zgui.trueTime = string.cut(getTime(true, "hh:mm:ss:zzz"), 11)
	local changeAmount = 0
	local sendThisString = ""
  zgui.tempOh = zgui.tempOh or 0
  if zgui.vitals.oh then
    if zgui.vitals.oh &gt; 0 then
      zgui.tempOh = zgui.vitals.oh
    end
  end
  if not zgui.vitals.h then
--BLACKOUT Most likely, don't even try.
  else
  if not zgui.vitals.oh then
    zgui.vitals.oh = 0
  end
	if (zgui.vitals.oh + 100) &lt; zgui.vitals.h then
		changeAmount = zgui.vitals.h - zgui.vitals.oh
		sendThisString = changeAmount.." Health Gain"
		cecho("logDisplay", "&lt;green&gt;"..zgui.trueTime)
		cecho("logDisplay", "&lt;green&gt;   "..sendThisString.."\n")
	elseif zgui.vitals.oh &gt; (zgui.vitals.h + 100) then
		changeAmount = zgui.vitals.oh - zgui.vitals.h
		sendThisString = changeAmount.." Health Loss"
		cecho("logDisplay", "&lt;red&gt;"..zgui.trueTime)
		cecho("logDisplay", "&lt;red&gt;   "..sendThisString.."\n")
	end
  if not zgui.vitals.om then
    zgui.vitals.om = 0
  end
	if (zgui.vitals.om + 100) &lt; zgui.vitals.m then
		changeAmount = zgui.vitals.m - zgui.vitals.om
		sendThisString = changeAmount.." Mana Gain"
		cecho("logDisplay", "&lt;blue&gt;"..zgui.trueTime)
		cecho("logDisplay", "&lt;blue&gt;   "..sendThisString.."\n")
	elseif zgui.vitals.om &gt; (zgui.vitals.m + 100) then
		changeAmount = zgui.vitals.om - zgui.vitals.m
		sendThisString = changeAmount.." Mana Loss"
		cecho("logDisplay", "&lt;red&gt;"..zgui.trueTime)
		cecho("logDisplay", "&lt;red&gt;   "..sendThisString.."\n")
	end
	end
  
end</script>
					<eventHandlerList />
				</Script>
			</ScriptGroup>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>Mapper</name>
				<packageName></packageName>
				<script></script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>wildMoved</name>
					<packageName></packageName>
					<script>function zgui.wildMoved()
  --Update Window On Movement  
  clearWindow("Wilderness") 
  clearWindow("Ocean")
  WildernessCoords()
end
-------------------------------------------------------------------
registerAnonymousEventHandler("gmcp.Room.Info", "zgui.wildMoved")</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>buildMap</name>
					<packageName></packageName>
					<script>function zgui.buildMap()
  zgui.mapSize = zgui.mapSize or 9
  zgui.map = {}
  zgui.map.tabs = {"Wilderness","Ocean","Mapper"}
  zgui.map.color1 = "rgb(218,218,218)"
  zgui.map.color2 = "rgb(0,0,0)"
  zgui.map.color3 = "rgb(150,150,150)"
  zgui.map.width = "100%"
  zgui.map.height = "100%"
  zgui.map.current = zgui.map.tabs[3]

  --Create the Adjustable container
  --Our tabbed window will need a container. This will be the bottom layer. Containers are invisible so no need to set a stylesheet. 
  zgui.map.window = Adjustable.Container:new({
    name = "zgui.map.window",
    x = 0, y = 0,
    width = "50%",
    height = "50%",  
    adjLabelstyle = zgui.adjLabelstyle,
    buttonstyle=[[
      QLabel{ border-radius: 5px; background-color: rgba(140,140,140,100%);}
      QLabel::hover{ background-color: rgba(160,160,160,50%);}
    ]],
    buttonFontSize = 10,
    buttonsize = 15,          
  },main)
  zgui.map.window:changeMenuStyle("dark")

  --Create the main container
  zgui.map.container = Geyser.Container:new({
    name = "zgui.map.back",
    x = 0, y = 0,
    width = "100%",
    height = "100%",        
  },zgui.map.window)
  
 --Create an HBox
 --All of our tabs will be evenly spaced. So we'll create an HBox to sit at the top of our container. 
 zgui.map.header = Geyser.HBox:new({
    name = "zgui.map.header",
    x = 0, y = 0,
    width = "100%",
    height = "0%",
  },zgui.map.container)  
  setBackgroundColor("zgui.map.header", 0,0,0,255) 
  
  --Create a label
  --This label will serve as a container for each window. It sits right underneath the HBox we just created for the tabs. 
  zgui.map.footer = Geyser.Label:new({
    name = "zgui.map.footer",
    x = 0, y = 0,
    width = "100%",
    height = "100%",
  },zgui.map.container)
  
  --Each window actually has two labels. One for the light blue background, and another for the dark blue center. This will create that dark blue center.
  zgui.map.center = Geyser.Label:new({
    name = "zgui.map.center",
    x = 0, y = 0,
    width = "100%",
    height = "100%",
  },zgui.map.footer)

    zgui.map.Mapper = Geyser.Label:new({
      name = "zgui.map.Mapper",
      x = 0, y = 0,
      width = "100%",
      height = "100%",
    },zgui.map.footer)
    zgui.map["Mappercenter"] = Geyser.Label:new({
      name = "zgui.map.Mappercenter",
      x = 0, y = 0,
      width = "100%",
      height = "100%",
      bgColor = "black",
    },zgui.map.Mapper)
    zgui.map.Mapper:hide()

    zgui.map.Wilderness = Geyser.Label:new({
      name = "zgui.map.Wilderness",
        x = 0, y = 0,
      width = "100%",
      height = "100%",
    },zgui.map.footer)
    zgui.map["Wildernesscenter"] = Geyser.Label:new({
      name = "zgui.map.Wildernesscenter",
      x = 0, y = 0,
      width = "100%",
      height = "100%",
      bgColor = "black",
    },zgui.map.Wilderness)
    zgui.map.Wilderness:hide()  
    
    zgui.map.Ocean = Geyser.Label:new({
      name = "zgui.map.Ocean",
      x = 0, y = 0,
      width = "100%",
      height = "100%",
      bgColor = "black",
    },zgui.map.footer)
    zgui.map["Oceancenter"] = Geyser.Label:new({
      name = "zgui.map.Oceancenter",
      x = 0, y = 0,
      width = "100%",
      height = "100%",
    },zgui.map.Ocean)
    zgui.map.Ocean:hide()     
  
  zgui.map.mapperWindow = Geyser.Mapper:new({
    name = "Mapper",
    x = 0, y = 0,
    width = "100%",
    height = "100%",
  },zgui.map.Mappercenter)
  showWindow("Mapper")
  
  zgui.map.oceanWindow = Geyser.MiniConsole:new({
    name = "Ocean",
    x = 0, y = 0,
    width = "100%",
    height = "100%",
  },zgui.map.Oceancenter)  
  setBackgroundColor("Ocean", 0,0,0,255)
  hideWindow("Ocean")
 
  zgui.map.wildernessWindow = Geyser.MiniConsole:new({
    name = "Wilderness",
    x = 0, y = 0,
    width = "100%",
    height = "100%",
  },zgui.map.Wildernesscenter)  
  setBackgroundColor("Wilderness", 0,0,0,255)  
  hideWindow("Wilderness")

  setFontSize("Ocean", zgui.mapSize)
  setFontSize("Wilderness", zgui.mapSize)
  zgui.map.window:setTitle("Map","gray")
  zgui.map.window:show()  
  
  if not table.contains(zgui.modules, "Map") then
    table.insert(zgui.modules, "Map")
  end
end</script>
					<eventHandlerList />
				</Script>
				<ScriptGroup isActive="yes" isFolder="yes">
					<name>WildWalker</name>
					<packageName></packageName>
					<script>wildernessLocations = wildernessLocations or {}</script>
					<eventHandlerList />
					<Script isActive="yes" isFolder="no">
						<name>WildernessCoords</name>
						<packageName></packageName>
						<script>function WildernessCoords(...)
 local displayRoomsWithin = 100
 if gmcp.Room.Info.ohmap and gmcp.Room.Info.environment ~= "Vessel" then
    local posx,posy,chunkx,chunky,x,y = translateWilderness()
    cecho("Wilderness", "&lt;gray&gt;-----[ Wilderness Coords ]----")
    cecho("Wilderness", "\n&lt;gray&gt;-- &lt;ansiLightBlack&gt;Chunk: &lt;ansiLightRed&gt;"..chunk)
--    cehco("\n&lt;ansiLightBlack&gt;Cx:&lt;ansiLightRed&gt;" .. chunkx .. " &lt;ansiLightBlack&gt;Cy:&lt;ansiLightRed&gt;".. chunky)
--    cecho("\n&lt;ansiLightBlack&gt;X:&lt;ansiLightRed&gt;"..x .. "&lt;ansiLightBlack&gt; Y:&lt;ansiLightRed&gt;"..y)
    cecho("Wilderness", " : &lt;ansiLightBlack&gt;X:&lt;ansiLightRed&gt;".. posx .. "&lt;ansiLightBlack&gt; Y:&lt;ansiLightRed&gt;"..posy.." &lt;gray&gt;--".."\n")
    --cecho("\n&lt;ansiGreen&gt;------------------------")
    for k,v in pairsByKeys(wildernessExits) do
    local dir,dash = directionsTo(k)
    local color = "&lt;ansiWhite&gt;"
      if dir == "enter" then dir = "&lt;ansiGreen&gt;all around you!" else dir = "to the " .. dir end
      if k == wildernessWhere then color = "&lt;ansiLightRed&gt;" end
      if k == wildernessWhere or (math.abs(posx-v.x)&lt;displayRoomsWithin  and 
                                  math.abs(posy-v.y)&lt;displayRoomsWithin) then
        cecho("\n".. color.. v.name .. " is " .. dir .. "")
      end -- if
    end-- for
  end-- if
end-- func

function translateWilderness(num)
  local info = gmcp.Room.Info
  local num = num or info.num
  local posx,posy,chunkx,chunky,x,y
  if info.ohmap then
    --wilderness rooms always have 6 digits for x and y, but can have
    --1, 2, or theoretically 3 digits for their chunk number
    chunk,x,y = string.match(num, "(.?.?.)(...)(...)")
    --4 chunks per row, so let's change the chunk number into a chunk position instead
    chunkx = chunk%4
    chunky = math.ceil(chunk/4)
    --set an actual x/y grid position based on our chunk and our current x/y
    posx = (chunkx-1)*250 + x 
    posy = ((chunky-1)*250 + y)*-1 --invert our y so grid math works right,
                                   --because Achaea y pos is top to bottom
  end
  return posx, posy, chunkx, chunky, x*1, y*1
end

local firstSpace, secondSpace = 25,30 </script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>Wilderness Walking Brains</name>
						<packageName></packageName>
						<script>function travelTo(where,dash) -- Tries to get where we are going. Does a decent job.
  local dash = dash or ""
  local dir, num = directionsTo(where:lower())
  if dir == false then
    return false
  elseif dir == "enter" then
    send("enter",false)
  end
  num = num or ""
  dir = closestDir(dir)
  send(dash .. " " .. dir .. " " .. num,false)
end

function closestDir(dir) -- gives us the closest dir in case of impassable exits
  local rexits = gmcp.Room.Info.exits
  if (rexits[translateDir[dir]] or dir == "enter") then return dir end
  local dir = translateDir[dir]
  local compass = {"n","ne","e","se","s","sw","w","nw"}
  local translateDir = {
    north = "n", northeast = "ne", east = "e", southeast = "se", 
    south = "s", southwest = "sw", west = "w", northwest = "nw" } 
  local untranslateDir = { 
    nw = "northwest", w = "west", se = "southeast", s = "south",
    sw = "southwest", ne = "northeast", e = "east", n = "north" }
  local exit
  --populate possible exits
  local want = table.index_of(compass,dir)
  
  for i = 1,4 do
    local ccw, cw = 0,0
    --these circle past the respective ends to the next exit on the circle
    if want-i &lt; 1 then
      ccw = 8
    end
    if want+i &gt; 8 then
      cw = 8
    end
    -- check if the exit exists, use it if it does
    exit = rexits[compass[want-i+ccw]] and compass[want-i+ccw]
    if exit then break end
    exit = rexits[compass[want+i-cw]] and compass[want+i-cw]
    if exit then break end 
  end
  
  return untranslateDir[exit]
  
end

function directionsTo(where)
  local going
  if wildernessExits[where] then
    going = wildernessExits[where]
  else
    echo("Don't know how to get there\n")
    return false
  end
  local x,y = translateWilderness()
  local riseDist,runDist
  riseDist = going.y-y
  runDist = going.x-x
  local rise,run = riserun(riseDist,runDist)
  riseDist = math.abs(riseDist)
  runDist = math.abs(runDist)
  currentHead = math.max(riseDist,runDist)
  local directionToGo = ""
  --More precise directional code
  if rise == 0 then
      if run &gt; 0 then -- directly east or west of us (or at us)
        directionToGo = "east"
      elseif run &lt; 0 then
        directionToGo = "west"
	  else
	    return "enter"
      end
  elseif run == 0 then
      if rise &gt; 0 then --directly north or south of us
        directionToGo = "north"
      elseif rise &lt; 0 then
        directionToGo = "south"
	else
	  cecho("&lt;red&gt;UNTRAPPED DIRECTION run 0")
      end
  -- if it's negative, it's southeast or northwest
  elseif rise/run &lt; -2 then -- at an angle, but a steep one
    if rise &lt; 0 then
      directionToGo = "south" -- south-southeast
    elseif run &lt; 0 then
      directionToGo = "north" -- north-northwest
	else
	  cecho("&lt;red&gt;UNTRAPPED DIRECTION &lt; -2")
    end
  elseif rise/run &lt; -0.5 then -- at a normal angle
    if rise &lt; 0 then
      directionToGo = "southeast"
    elseif run &lt; 0 then
      directionToGo = "northwest"
	else
	  cecho("&lt;red&gt;UNTRAPPED DIRECTION &lt; -0.5")
    end
  elseif rise/run &lt; 0 then -- at an angle, but a shallow one
      if rise &lt; 0 then
      directionToGo = "east" -- east-southeast
    elseif run &lt; 0 then
      directionToGo = "west" -- west-northwest
	else
	  cecho("&lt;red&gt;UNTRAPPED DIRECTION &lt; 0")
    end
  -- if it's positive, it's southwest or northeast
  elseif rise/run &gt; 2 then -- steep angle
    if rise &lt; 0 then
      directionToGo = "south" -- south-southwest
    elseif rise &gt; 0 then
      directionToGo = "north" -- north-northeast
	else
	  cecho("&lt;red&gt;UNTRAPPED DIRECTION &gt; 2")
    end  
  elseif rise/run &gt; 0.5 then -- normal angle
    if rise &lt; 0 then
      directionToGo = "southwest"
    elseif rise &gt; 0 then
      directionToGo = "northeast"
	else
	  cecho("&lt;red&gt;UNTRAPPED DIRECTION &gt; 0.5")
    end  
  elseif rise/run &gt; 0 then -- shallow angle
    if rise &lt; 0 then
      directionToGo = "west" -- west-southwest
    elseif rise &gt; 0 then
      directionToGo = "east" -- east-northeast
	else
	  cecho("&lt;red&gt;UNTRAPPED DIRECTION &gt; 0")
    end  
  else
    cecho("&lt;red&gt;UNTRAPPED DIRECTION")
  end
  --[[ old directional code
  --north south
  if y &lt; going.y then
    directionToGo = directionToGo .. "north"
  elseif y &gt; going.y then
    directionToGo = directionToGo .. "south"
  end
  --east west
  if x &gt; going.x then
    directionToGo = directionToGo .. "west"
  elseif x &lt; going.x then
    directionToGo = directionToGo .. "east"
  end  --]]
  return directionToGo, currentHead
end
</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>Wilderness Exits</name>
						<packageName></packageName>
						<script>wildernessExits = wildernessExits or {
aaleneast =                {name="The Aalen Forest (east)",       x = 427,  y = -700},
aalennorth =               {name="The Aalen Forest (north)",      x = 383,  y = -656},
aalensouth =               {name="The Aalen Forest (south)",      x = 401,  y = -750},
aalenwest =                {name="The Aalen Forest (west)",       x = 372,  y = -710},
aranriod =                 {name="The Village of Aran'riod",      x = 419,  y = -315},
ashtan =                   {name="Ashtan",                        x = 373,  y = -518},
baltoackeast =             {name="Bataoac, the Northern Giant (right leg)",x = 365,  y = -186},
baltoacwest =              {name="Bataoac, the Northern Giant (left leg)",x = 361,  y = -186},
cormorantrock =            {name="Cormorant Rock",                x = 396,  y = -486},
cyrene =                   {name="Cyrene",                        x = 475,  y = -782},
dardanicplainseast =       {name="Dardanic Plains (east)",        x = 520,  y = -405},
dardanicplainsnorth =      {name="Dardanic Plains (north)",       x = 450,  y = -420},
dardanicplainssouth =      {name="Dardanic Plains (south)",       x = 513,  y = -448},
dardanicplainssoutheast =  {name="Dardanic Plains (southeast)",   x = 560,  y = -451},
dardanicplainssouthwest =  {name="Dardanic Plains (southwest)",   x = 497,  y = -456},
dardanicplainswest =       {name="Dardanic Plains (west)",        x = 423,  y = -421},
deloseast =                {name="Delos (east)",                  x = 617,  y = -629},
deloswest =                {name="Delos (west)",                  x = 612,  y = -629},
digsiteblood =             {name="The Digsite of Blood",          x = 522,  y = -797},
digsiteequilibrium =       {name="The Digsite of Equilibrium",    x = 615,  y = -463},
digsitemind =              {name="The Digsite of the Mind",       x = 438,  y = -503},
digsitepain =              {name="Digsite of Pain",               x = 340,  y = -686},
digsitesoul =              {name="Digsite of the Soul",           x = 568,  y = -147},
digsitewealth =            {name="The Digsite of Wealth",         x = 498,  y = -864},
dreamspear =               {name="Dreamspear",                    x = 268,  y = -290},
eleusis =                  {name="Eleusis",                       x = 620,  y = -605},
falaqtor =                 {name="The Tower of Falaq'tor",        x = 575,  y = -152},
fissure =                  {name="The Fissure of Echoes",         x = 557,  y = -198},
harae =                    {name="The Isle of Harae",             x = 283,  y = -619},
hashan =                   {name="Hashan",                        x = 642,  y = -511},
hriddan =                  {name="Hriddan Settlement",            x = 278,  y = -202},
hthrak =                   {name="Vents of Hthrak",               x = 422,  y = -168},
inbhirness =               {name="Inbhir Ness",                   x = 262,  y = -331},
isaia =                    {name="Isaia",                         x = 263,  y = -189},
istareast =                {name="Istar Jungle (east)",           x = 458,  y = -191},
istarwest =                {name="Istar Jungle (west)",           x = 438,  y = -204},
kamleikan =                {name="The Village of Kamleikan",      x = 387,  y = -278},
mhaldor =                  {name="Mhaldor Harbour",               x = 218,  y = -568},
moghedu =                  {name="Moghedu",                       x = 528,  y = -771},
muurn =                    {name="Muurn River Valley Harbour",    x = 394,  y = -772},
newhope =                  {name="Isle of New Hope",              x = 623,  y = -818},
nithmia =                  {name="The Northern Ithmia",           x = 603,  y = -561},
northerntundra =           {name="Northern Tundra",               x = 356,  y = -147},
northreacheast =           {name="Northreach (east)",             x = 434,  y = -327},
northreachharbour =        {name="Northreach Forest Harbour",     x = 410,  y = -426},
northreachlake =           {name="Northreach Lake",               x = 465,  y = -326},
northreachnorth =          {name="Northreach (north)",            x = 403,  y = -334},
northreachwest =           {name="Northreach (west)",             x = 380,  y = -352},
phereklos =                {name="The ruins of Phereklos",        x = 387,  y = -370},
rheodad =                  {name="Rheodad",                       x = 268,  y = -372},
rheodadharbour =           {name="Rheodad Harbour",               x = 243,  y = -444},
riagath =                  {name="The Caverns of Riagath",        x = 409,  y = -221},
ripariumharbour =          {name="Riparium Harbour",              x = 717,  y = -622},
saoghal =                  {name="Saoghal Valley",                x = 248,  y = -311},
sealioncove =              {name="Sea Lion Cove",                 x = 514,  y = -842},
shallam =                  {name="Shallam",                       x = 642,  y = -758},
shallamharbour =           {name="The Harbour of Shallam",        x = 641,  y = -762},
shastaan =                 {name="Shastaan",                      x = 696,  y = -719},
shastaanharbour =          {name="Shastaan Harbour",              x = 705,  y = -717},
tasurke =                  {name="Tasur'ke",                      x = 684,  y = -504},
tasurkeharbour =           {name="Tasur'ke Harbour",              x = 685,  y = -500},
tasurkehouse =             {name="A private house in Tasur'ke",   x = 680,  y = -484},
tenwat =                   {name="Tenwat Prison",                 x = 556,  y = -277},
thera =                    {name="New Thera",                     x = 387,  y = -560},
thraasi =                  {name="Thraasi Harbour",               x = 326,  y = -652},
tomacula =                 {name="The Village of Tomacula",       x = 490,  y = -601},
valho =                    {name="Valho Coast",                   x = 640,  y = -211},
wegava =                   {name="Wegava Valley",                 x = 485,  y = -299},
} </script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>Wilderness Exit Utilities</name>
						<packageName></packageName>
						<script>local firstSpace, secondSpace = 25,30 

function makeWildExit(name,fullname,num)
  local first,second = firstSpace,secondSpace
  local blank1 = string.rep(" ", first-#name)
  local blank2 = string.rep(" ", second-#fullname)
  local x,y = translateWilderness(num)
  local s1 = string.rep(" ", 5-#(""..x))
--  echo(string.format([[%s =%s{name="%s",%sx = %s,%sy = %s},]].."\n",name:lower(),blank1,fullname,blank2,x,s1,y))
  wildernessExits[name] = {name = fullname, x = x, y = y}
  reDrawWildernessExitTable()
end

function reDrawWildernessExitTable()
  -- Just used for pretifying the table, makes it easier to change spacing and such.
  local first,second = firstSpace,secondSpace
  echo "wildernessExits = wildernessExits or {\n"
  for k,v in pairsByKeys(wildernessExits) do
    local name, fullname = k, v.name 
    local x,y = v.x,v.y
    local blank1 = string.rep(" ", first-#name)
    local blank2 = string.rep(" ", second-#fullname)
    local s1 = string.rep(" ", 5-#(""..x))
    echo(string.format([[%s =%s{name="%s",%sx = %s,%sy = %s},]].."\n",name,blank1,fullname,blank2,x,s1,y))
  end
  echo("} \n \n ")
end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>rise and run</name>
						<packageName></packageName>
						<script>local function gcd(a, b)
    repeat
        if a == 0 or b == 0 then return 0 end
        a, b = b, a % b
    until b == 0
    return a
end

function riserun(numerator, denominator)
    local conumerator = 1
    local codenominator = 1

    if numerator &lt; 0 then
        conumerator = -1
        numerator = -numerator
    end

    if denominator&lt; 0 then
        codenominator = -1
        denominator= -denominator
    end
    local n = gcd(numerator, denominator)
    -- don't do div/0 math
    if numerator ~= 0 then numerator = numerator/n end
    if denominator ~= 0 then denominator = denominator/n end
    -- if 1 is 0 then the rise or run of the other is 1
    if (numerator == 0 or denominator == 0) and not (numerator == 0 and denominator == 0) then
      if numerator == 0 then denominator = 1 end
      if denominator == 0 then numerator = 1 end
      
    end

    return conumerator * numerator, codenominator * denominator
end
</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>Foray Exits</name>
						<packageName></packageName>
						<script>forayExits = {
arankesh = { jaru = {x = 478, y = -287}, 
 },
mirrortower = {
tenwat = {},
morindar = {},
phereklos = {},
shamtota = {},
},
sevet = {
shalakhulia = {}
},


}
</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>pairsByKeys</name>
						<packageName></packageName>
						<script>function pairsByKeys(t, f)
  local a = {}
  for n in pairs(t) do
    table.insert(a, n)
  end
  table.sort(a, f)
  local i = 0
  -- iterator variable
  local iter =
    function()
      -- iterator function
      i = i + 1
      if a[i] == nil then
        return nil
      else
        return a[i], t[a[i]]
      end
    end
  return iter
end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>New script</name>
						<packageName></packageName>
						<script>
wildernessLocations["riagath"] = {["x"] = 409, ["y"] = 221, ["vnum"] = 2159221}
 
wildernessLocations["northreachnorth"] = {["x"] = 434, ["y"] = 327, ["vnum"] = 6153084}
wildernessLocations["northreachwest"] = {["x"] = 403, ["y"] = 334, ["vnum"] = 6184077}
wildernessLocations["northreachwestwest"] = {["x"] = 380, ["y"] = 352, ["vnum"] = 6130102}
 
--wildernessLocations["northreachwest"] = {["x"] = 434, ["y"] = 327}
--wildernessLocations["northreachnorth"] = {["x"] = 403, ["y"] = 334, ["vnum"] = 6184077}
wildernessLocations["aran'riod"]  = {["x"] = 419, ["y"] = 315, ["vnum"] = 6169065}
wildernessLocations["morindar"]   = {["x"] = 470, ["y"] = 260, ["vnum"] = 6220010}
wildernessLocations["fissure"]    = {["x"] = 557, ["y"] = 198, ["vnum"] = 3057198}
wildernessLocations["wegava"]     = {["x"] = 485, ["y"] = 299, ["vnum"] = 6235049}
wildernessLocations["saoghal"]    = {["x"] = 248, ["y"] = 311, ["vnum"] = 5248061}
wildernessLocations["dreamspear"] = {["x"] = 268, ["y"] = 290, ["vnum"] = 6018040}
wildernessLocations["pash"] =       {["x"] = 642, ["y"] = 758, ["vnum"] = 15142008}
wildernessLocations["rheodad"] =    {["x"] = 268, ["y"] = 372, ["vnum"] = 6018122}
wildernessLocations["moghedu"] =    {["x"] = 528, ["y"] = 771, ["vnum"] = 15028021}
wildernessLocations["dunvalley"] =  {["x"] = 437, ["y"] = 678, ["vnum"] = 10187178}
wildernessLocations["aalenforesteast"] = {["x"] = 427, ["y"] = 700, ["vnum"] = 10177200}
wildernessLocations["aalenforestwest"] = {["x"] = 372, ["y"] = 710, ["vnum"] = 10122210}
wildernessLocations["aalenforestnorth"] = {["x"] = 383, ["y"] = 656, ["vnum"] = 10133156}
wildernessLocations["easternithmia"] = {["x"] = 620, ["y"] = 605, ["vnum"] = 11120105}
 
--harbours
wildernessLocations["phereklos"] =  {["x"] = 387, ["y"] = 370, ["vnum"] = 6137120}
 
--digsites
wildernessLocations["digsitesoul"] = {["x"] = 568, ["y"] = 147, ["vnum"] = 3068147}  -- Northern Tip of Glacier north of Fissure
wildernessLocations["digsiterage"] = {["x"] = 527, ["y"] = 740, ["vnum"] = 11027240}  -- Middle of Mhojave
 
--Other
wildernessLocations["tenwat"] = {["x"] = 556, ["y"] = 277, ["vnum"] = 7056027}
 
--Harbours
wildernessLocations["valhoharbour"] = {["x"] = 640, ["y"] = 211, ["vnum"] = 3140211}</script>
						<eventHandlerList />
					</Script>
				</ScriptGroup>
			</ScriptGroup>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>Prompt</name>
				<packageName></packageName>
				<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external scripts --
-------------------------------------------------
</script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>sendPrompt</name>
					<packageName></packageName>
					<script>function zgui.sendPrompt()

end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>buildPrompt</name>
					<packageName></packageName>
					<script>function zgui.buildPrompt()
  zgui.promptSize = zgui.promptSize or 9
  zgui.prompt = {}
  
  --Create the prompt Adjustable
  zgui.prompt.window = Adjustable.Container:new({
    name = "zgui.prompt.window",
    x = 0, y = 0,
    width = "50%",
    height = "50%",        
    adjLabelstyle = zgui.adjLabelstyle,
    buttonstyle=[[
      QLabel{ border-radius: 5px; background-color: rgba(140,140,140,100%);}
      QLabel::hover{ background-color: rgba(160,160,160,50%);}
    ]],
    buttonFontSize = 10,
    buttonsize = 15,
  },main)
  zgui.prompt.window:changeMenuStyle("dark")

  --Create the prompt container
  zgui.prompt.container = Geyser.Container:new({
    name = "zgui.prompt.back",
    x = 0, y = 0,
    width = "100%",
    height = "100%",        
  },zgui.prompt.window)  

  --Create the prompt Console
  zgui.prompt.console = Geyser.MiniConsole:new({
    name = "myPrompt",
    x = 0, y = 0,
    autoWrap = true,
    width = "100%",
    height = "100%",
    color="black",
  },zgui.prompt.container) 
 
  setFontSize("myPrompt", zgui.promptSize)
  zgui.prompt.window:setTitle("Prompt","gray")
  zgui.prompt.window:show()  
  
  if not table.contains(zgui.modules, "Prompt") then
    table.insert(zgui.modules, "Prompt")
  end
end</script>
					<eventHandlerList />
				</Script>
			</ScriptGroup>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>Gold</name>
				<packageName></packageName>
				<script>gold = gold or {}
gold.t = gold.t or {}
gold.year = gold.year or false
gold.month = gold.month or false
gold.timer = gold.timer or false
gold.current = gold.current or false
gold.character = gold.character or false
-- variable to check if we asked for IRE.Time support
gold.coresupport = gold.coresupport or false
-- this is a variable temporarily holding the gold got in inventory (needed for attractors)
gold.attractor = gold.attractor or false</script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>Gold Counter</name>
					<packageName></packageName>
					<script>function zgui.buildGold()
  zgui.goldSize = zgui.goldSize or 9
  zgui.gold = {}

  --Create the gold Adjustable
  zgui.gold.window = Adjustable.Container:new({
    name = "zgui.gold.window",
    x = 0, y = 0,
    width = "50%",
    height = "50%",    
    adjLabelstyle = zgui.adjLabelstyle,    
  },main)
  zgui.gold.window:changeMenuStyle("dark")

  --Create the gold container
  zgui.gold.container = Geyser.Container:new({
    name = "zgui.gold.back",
    x = 0, y = 0,
    width = "100%",
    height = "100%",        
  },zgui.gold.window)  

  --Create the gold Console
  zgui.gold.console = Geyser.MiniConsole:new({
    name = "Gold Collection",
    x = 0, y = 0,
    autoWrap = true,
    width = "100%",
    height = "100%",
    color="black",
  },zgui.gold.container) 
 
  setFontSize("Gold Collection", zgui.goldSize)
  zgui.gold.window:show()
  
  if not table.contains(zgui.modules, "Gold") then
    table.insert(zgui.modules, "Gold")
  end
  gold.show()
end


function gold.print(_text)
  cecho("Gold Collection", _text.."\n")
end

-- call this function from alias to show gold drops
function gold.show()

  if gold.character and gold.t[gold.character] then
  
    local _year, _month, _total, _text = 0, 0, 0, ""
    for _month=1,12,1 do
      if _month == gold.month then _text = _text.."&lt;white&gt;" else _text=_text.."&lt;dim_gray&gt;" end
      _text = _text..string.rep(" ",5-string.len(_month)).._month
    end
    _text = "&lt;dim_gray&gt; Year".._text.."  &lt;dim_gray&gt;Total"
  
    for k, v in pairs(gold.t[gold.character]) do
    
      if _year ~= v.year then
        _total = 0
        _month = 0
        _year = v.year
        -- change color if it's the same year as we have
        if _year == gold.year then _text = _text.."&lt;white&gt;" else _text=_text.."&lt;dim_gray&gt;" end
        _text = _text.."\n"..string.rep(" ",5-string.len(v.year))..v.year.." &lt;gold&gt;"
      end
      
      -- check for months without gold drops since last shown and add spaces
      for _ = _month, v.month-2, 1 do _text = _text..string.rep(" ",5) end
      _month = v.month
      
      -- add gold dropped for this month and add to the total
      _text = _text..string.rep(" ",4-string.len(math.floor(v.amount / 1000)))..math.floor(v.amount / 1000).."k"
      _total = _total + v.amount
      
      -- if this is the last month of the year add the total to the string
      if _month == 12 then
        _text = _text..string.rep(" ",5-string.len(math.floor(_total / 1000)))..math.floor(_total / 1000).."k"
      end
      
    end
    
    -- add spaces from the last month to get to the total
    for _ = _month, 11, 1 do _text = _text..string.rep(" ",5) end
    -- 
    _text = _text..string.rep(" ",5-string.len(math.floor(_total / 1000)))..math.floor(_total / 1000).."k"
    
    gold.print(_text)
    
  elseif gold.character then
    gold.print("&lt;gold&gt;No gold has been counted for this character: &lt;white&gt;"..gold.character:title().."&lt;gold&gt;.")
  else
    gold.print("&lt;gold&gt;No character found yet!")
  end 

end

registerAnonymousEventHandler("gmcp.Char.Status", "gold.increased")
function gold.increased()

  if not gold.coresupport then sendGMCP([[Core.Supports.Add ["IRE.Time 1"] ]]) gold.coresupport = true end

  -- check that we have gold status
	if gmcp.Char.Status and gmcp.Char.Status.gold then
  
    -- set current character name
    if gmcp.Char.Status.name then gold.character = string.lower(gmcp.Char.Status.name) end
    
    -- check that we have set the current gold and that our gold has increased and IF we recently got corpse and therefor set the timer)
    if gold.current and tonumber(gmcp.Char.Status.gold) &gt; gold.current and gold.timer then
          
      gold.add(tonumber(gmcp.Char.Status.gold) - gold.current)
    
    -- gold attractors
    -- this section adds our gold increase to a variable for 0.1 seconds so that the other
    -- gmcp for new corpse in inventory (which comes after gold drop) counts this gold as a denizen drop
    elseif gold.current and tonumber(gmcp.Char.Status.gold) &gt; gold.current then
    
      gold.attractor = tonumber(gmcp.Char.Status.gold) - gold.current
      tempTimer(0.1, [[ gold.attractor = false ]])
      
    end
  
    -- set current gold
    gold.current = tonumber(gmcp.Char.Status.gold)

  end
 
end


function gold.add(_amount)

  -- dont count anything if we dont know the year/month
  if not gold.month or not gold.year then return false end
  
  -- remove timer if any and reset variable
  if gold.timer then killTimer(gold.timer) gold.timer = false end
  
  -- create a table for this character if none exist
  if not gold.t[gold.character] then gold.t[gold.character] = {} end
  
  -- loop table and check if we have anything set already for this year and month, if so add amount, save and stop
  for k, v in pairs(gold.t[gold.character]) do
    if v.year == gold.year and v.month == gold.month then
      v.amount = v.amount + _amount
      gold.save()
      return true
    end
  end

  -- could'nt find any match in table we just looped, create new row for this year &amp; month, save
  table.insert(gold.t[gold.character], { year = gold.year, month = gold.month, amount = _amount })
  gold.save()

end


registerAnonymousEventHandler("gmcp.Char.Items.Add", "gold.slain")
function gold.slain()

  -- checks if a corpse has been added to the inventory
  if gmcp.Char.Items.Add.location == "inv" and string.find(gmcp.Char.Items.Add.item.name, "corpse") then

    -- check if we 0.1 seconds earlier got gold in our inventory, if so we count this gold as denizen drop from attractor
    if gold.attractor then
      gold.add(gold.attractor)
      gold.attractor = false
    -- if no gold.attractor, wait 6 seconds for a gold pickup
    else
      gold.timer = tempTimer(6, [[ gold.timer = false ]])
    end
    
  end

end


registerAnonymousEventHandler("gmcp.IRE.Time.Update", "gold.timeupdate")
function gold.timeupdate()
  if gmcp.IRE.Time.Update.year then gold.year = tonumber(gmcp.IRE.Time.Update.year) end
  if gmcp.IRE.Time.Update.mon then gold.month = tonumber(gmcp.IRE.Time.Update.mon) end
end


registerAnonymousEventHandler("gmcp.IRE.Time.List", "gold.timelist")
function gold.timelist()
  if gmcp.IRE.Time.List.year then gold.year = tonumber(gmcp.IRE.Time.List.year) end
  if gmcp.IRE.Time.List.mon then gold.month = tonumber(gmcp.IRE.Time.List.mon) end
end


function gold.save()
  table.save(getMudletHomeDir().."/gold", gold.t)
end


registerAnonymousEventHandler("sysConnectionEvent", "gold.timeload")
function gold.timeload()
  -- check if previous table exist if so load it
  if io.exists(getMudletHomeDir().."/gold") then table.load(getMudletHomeDir().."/gold", gold.t) end
end</script>
					<eventHandlerList />
				</Script>
			</ScriptGroup>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>Allies</name>
				<packageName></packageName>
				<script></script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>buildAlly</name>
					<packageName></packageName>
					<script>function zgui.buildAlly()
  zgui.allySize = zgui.allySize or 9
  zgui.ally = {}

  --Create the ally Adjustable
  zgui.ally.window = Adjustable.Container:new({
    name = "zgui.ally.window",
    x = 0, y = 0,
    width = "50%",
    height = "50%",  
    adjLabelstyle = zgui.adjLabelstyle,
    buttonstyle=[[
      QLabel{ border-radius: 5px; background-color: rgba(140,140,140,100%);}
      QLabel::hover{ background-color: rgba(160,160,160,50%);}
    ]],
    buttonFontSize = 10,
    buttonsize = 15,          
  },main)
  zgui.ally.window:changeMenuStyle("dark")

  --Create the ally container
  zgui.ally.container = Geyser.Container:new({
    name = "zgui.ally.back",
    x = 0, y = 0,
    width = "100%",
    height = "100%",        
  },zgui.ally.window)  

  --Create the ally Console
  zgui.ally.console = Geyser.MiniConsole:new({
    name = "allyDisplay",
    x = 0, y = 0,
    autoWrap = true,
    width = "100%",
    height = "100%",
    color="black",
  },zgui.ally.container) 

  setFontSize("allyDisplay", zgui.allySize)
  zgui.ally.window:setTitle("Allies","gray")
  zgui.ally.window:show()
  
  if not table.contains(zgui.modules, "Ally") then
    table.insert(zgui.modules, "Ally")
  end  
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>showAllies</name>
					<packageName></packageName>
					<script>function zgui.showAllies()
  clearWindow("allyDisplay")
	for i=1, table.size(zgui.allies), 1 do
		cecho("allyDisplay", "&lt;white&gt;"..i.."- &lt;gray&gt;"..zgui.allies[i].."\n")
	end
end</script>
					<eventHandlerList />
				</Script>
			</ScriptGroup>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>Enemies</name>
				<packageName></packageName>
				<script></script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>buildEnemy</name>
					<packageName></packageName>
					<script>function zgui.buildEnemy()
  zgui.enemySize = zgui.enemySize or 9
  zgui.enemy = {}

  --Create the enemy Adjustable
  zgui.enemy.window = Adjustable.Container:new({
    name = "zgui.enemy.window",
    x = 0, y = 0,
    width = "50%",
    height = "50%",  
    adjLabelstyle = zgui.adjLabelstyle,
    buttonstyle=[[
      QLabel{ border-radius: 5px; background-color: rgba(140,140,140,100%);}
      QLabel::hover{ background-color: rgba(160,160,160,50%);}
    ]],
    buttonFontSize = 10,
    buttonsize = 15,          
  },main)
  zgui.enemy.window:changeMenuStyle("dark")

  --Create the enemy container
  zgui.enemy.container = Geyser.Container:new({
    name = "zgui.enemy.back",
    x = 0, y = 0,
    width = "100%",
    height = "100%",        
  },zgui.enemy.window)  

  --Create the enemy Console
  zgui.enemy.console = Geyser.MiniConsole:new({
    name = "enemyDisplay",
    x = 0, y = 0,
    autoWrap = true,
    width = "100%",
    height = "100%",
    color="black",
  },zgui.enemy.container) 

  setFontSize("enemyDisplay", zgui.enemySize)
  zgui.enemy.window:setTitle("Enemies","gray")
  zgui.enemy.window:show()
  
  if not table.contains(zgui.modules, "Enemy") then
    table.insert(zgui.modules, "Enemy")
  end  
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>showEnemies</name>
					<packageName></packageName>
					<script>function zgui.showEnemies()
  clearWindow("enemyDisplay")
	for i=1, table.size(zgui.enemies), 1 do
		cecho("enemyDisplay", "&lt;white&gt;"..i.."- &lt;gray&gt;"..zgui.enemies[i].."\n")
	end
end</script>
					<eventHandlerList />
				</Script>
			</ScriptGroup>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>Defences</name>
				<packageName></packageName>
				<script></script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>buildDefs</name>
					<packageName></packageName>
					<script>function zgui.buildDefence()
  zgui.defenceSize = zgui.defenceSize or 9
  zgui.defence = {}

  --Create the defence Adjustable
  zgui.defence.window = Adjustable.Container:new({
    name = "zgui.defence.window",
    x = 0, y = 0,
    width = "50%",
    height = "50%",  
    adjLabelstyle = zgui.adjLabelstyle,
    buttonstyle=[[
      QLabel{ border-radius: 5px; background-color: rgba(140,140,140,100%);}
      QLabel::hover{ background-color: rgba(160,160,160,50%);}
    ]],
    buttonFontSize = 10,
    buttonsize = 15,          
  },main)
  zgui.defence.window:changeMenuStyle("dark")

  --Create the defence container
  zgui.defence.container = Geyser.Container:new({
    name = "zgui.defence.back",
    x = 0, y = 0,
    width = "100%",
    height = "100%",        
  },zgui.defence.window)  

  --Create the defence Console
  zgui.defence.console = Geyser.MiniConsole:new({
    name = "defenceDisplay",
    x = 0, y = 0,
    autoWrap = true,
    width = "100%",
    height = "100%",
    color="black",
  },zgui.defence.container) 

  setFontSize("defenceDisplay", zgui.defenceSize)
  zgui.defence.window:setTitle("Defences","gray")
  zgui.defence.window:show()
  
  if not table.contains(zgui.modules, "Defence") then
    table.insert(zgui.modules, "Defence")
  end  
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>showDefs</name>
					<packageName></packageName>
					<script>function zgui.showDefs()
  if zgui.defence then
  ----------------------------------------
  -- Player Defences		
	clearWindow("defenceDisplay")
	if table.size(gmcp_defs) &gt; 0 then
		--for i=1, table.size(gmcp_defs), 1 do
		--	cecho("defenceDisplay", "&lt;green&gt; - &lt;grey&gt;"..gmcp_defs[i].."\n")
		--end  
  
		local missingDefs = false
		for i=1, table.size(zgui.defs.classless.combat), 1 do
			if not table.contains(gmcp_defs, zgui.defs.classless.combat[i]) then
				setBackgroundColor("defenceDisplay",40,10,10,255)	
				missingDefs = true
				cecho("defenceDisplay", "&lt;red&gt;Missing:\n")
				break
			end
		end

		if not missingDefs then
			if zgui.defs.class[gmcp.Char.Status.class] then
			for i=1, table.size(zgui.defs.class[gmcp.Char.Status.class]), 1 do
				if not table.contains(gmcp_defs, zgui.defs.class[gmcp.Char.Status.class][i]) then
					setBackgroundColor("defenceDisplay",40,10,10,255)	
					missingDefs = true
					cecho("defenceDisplay", "&lt;red&gt;Missing:\n")
					break
				end
			end		
			end
		end
		
		if not missingDefs then
			setBackgroundColor("defenceDisplay", 0, 0, 0,255)	
		end	
		
		if zgui.defs.class[gmcp.Char.Status.class] then	
		for i=1, table.size(zgui.defs.class[gmcp.Char.Status.class]), 1 do
			if not table.contains(gmcp_defs, zgui.defs.class[gmcp.Char.Status.class][i]) then
				cecho("defenceDisplay", "&lt;red&gt; - &lt;red&gt;"..zgui.defs.class[gmcp.Char.Status.class][i].."\n")
			end		
		end
		end
			
		for i=1, table.size(zgui.defs.classless.combat), 1 do
			if not table.contains(gmcp_defs, zgui.defs.classless.combat[i]) then
				cecho("defenceDisplay", "&lt;red&gt; - &lt;red&gt;"..zgui.defs.classless.combat[i].."\n")
			end
		end

	end	

	if table.contains(gmcp_defs, "prismatic") then
		setBackgroundColor("defenceDisplay",10,40,20,255)
	end
  end
end</script>
					<eventHandlerList />
				</Script>
				<ScriptGroup isActive="yes" isFolder="yes">
					<name>GMCP Def Functions</name>
					<packageName></packageName>
					<script></script>
					<eventHandlerList />
					<Script isActive="yes" isFolder="no">
						<name>GMCP DEFS</name>
						<packageName></packageName>
						<script>gmcp_defs = gmcp_defs or {}
 
function gmcp_def_event_list(event)
    local def = ""
    if gmcp.Char.Defences.List then
        gmcp_defs = {}
        for k, v in pairs(gmcp.Char.Defences.List) do
            def = gmcp_def_parse(v.name)
            gmcp_defs[#gmcp_defs+1] = def
        end
    end
    zgui.showDefs()
end
 
registerAnonymousEventHandler("gmcp.Char.Defences.List", "gmcp_def_event_list")
 
function gmcp_def_event_add(event)
    local gmcp_limbs = {"parry right leg", "parry left leg", "parry left arm", "parry right arm", "parry head", "parry torso", "parry right", "parry left", "parry centre"}
    local def = ""
    if gmcp.Char.Defences.Add then
        def = gmcp.Char.Defences.Add.name
        def = gmcp_def_parse(def)
        if table.contains(gmcp_limbs, def) then
            for k,v in pairs(gmcp_limbs) do
                if table.contains(gmcp_defs, v) then
                    table.remove(gmcp_defs, table.index_of(gmcp_defs, v))
                end
            end
        end
        if string.match(def, "shield") then
            --cecho("DEF|&lt;green&gt; " ..string.upper(def).."\n")
            raiseEvent("got def", def)
        end
        gmcp_defs[#gmcp_defs+1] = def
    end
    zgui.showDefs()
end
 
registerAnonymousEventHandler("gmcp.Char.Defences.Add", "gmcp_def_event_add")
 
function gmcp_def_event_remove(event)
    local def = ""
    if gmcp.Char.Defences.Remove then
        def = gmcp.Char.Defences.Remove[1]
        def = gmcp_def_parse(def)
        if string.match(def, "shield") then
            --cecho("DEF|&lt;red&gt; " ..string.upper(def).."\n")
            raiseEvent("lost def", def)
        end
        if table.contains(gmcp_defs, def) then
            table.remove(gmcp_defs, table.index_of(gmcp_defs, def))
        end
    end
    zgui.showDefs()
end
 
registerAnonymousEventHandler("gmcp.Char.Defences.Remove", "gmcp_def_event_remove")
 
function gmcp_def_parse(def)
    local base_def = nil
    local limb = nil
    limb = string.match(def, "%a+ %((.-)%)")
    if limb then
        base_def = string.match(def, "(%a+) %(.-%)")
        if base_def == "parrying" or base_def == "guarding" or base_def == "clawparrying" then
            return "parry "..limb
        else
            return def
        end
    else
        return def
    end
end</script>
						<eventHandlerList />
					</Script>
				</ScriptGroup>
			</ScriptGroup>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>Afflictions</name>
				<packageName></packageName>
				<script></script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>buildAffs</name>
					<packageName></packageName>
					<script>function zgui.buildAffliction()
  zgui.afflictionSize = zgui.afflictionSize or 9
  zgui.affliction = {}

  --Create the affliction Adjustable
  zgui.affliction.window = Adjustable.Container:new({
    name = "zgui.affliction.window",
    x = 0, y = 0,
    width = "50%",
    height = "50%",  
    adjLabelstyle = zgui.adjLabelstyle,
    buttonstyle=[[
      QLabel{ border-radius: 5px; background-color: rgba(140,140,140,100%);}
      QLabel::hover{ background-color: rgba(160,160,160,50%);}
    ]],
    buttonFontSize = 10,
    buttonsize = 15,          
  },main)
  zgui.affliction.window:changeMenuStyle("dark")

  --Create the affliction container
  zgui.affliction.container = Geyser.Container:new({
    name = "zgui.affliction.back",
    x = 0, y = 0,
    width = "100%",
    height = "100%",        
  },zgui.affliction.window)  

  --Create the affliction Console
  zgui.affliction.console = Geyser.MiniConsole:new({
    name = "afflictionDisplay",
    x = 0, y = 0,
    autoWrap = true,
    width = "100%",
    height = "100%",
    color="black",
  },zgui.affliction.container) 

  setFontSize("afflictionDisplay", zgui.afflictionSize)
  zgui.affliction.window:setTitle("Afflictions","gray")
  zgui.affliction.window:show()
  
  if not table.contains(zgui.modules, "Affliction") then
    table.insert(zgui.modules, "Affliction")
  end  
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>showAffs</name>
					<packageName></packageName>
					<script>function zgui.showAffs()
  if zgui.afflictionlock then
  	setBackgroundColor("pronAff", 0, 20, 0, 255)
	  setBackgroundColor("paraAff", 0, 20, 0, 255)
	  setBackgroundColor("impaAff", 0, 20, 0, 255)
	  setBackgroundColor("asthAff", 0, 20, 0, 255)
	  setBackgroundColor("anorAff", 0, 20, 0, 255)
	  setBackgroundColor("slicAff", 0, 20, 0, 255)
		for i=1, table.size(zgui.myAfflictions), 1 do
			if zgui.myAfflictions[i] == "prone" then
				setBackgroundColor("pronAff", 255, 0, 0, 255)
			end
			if zgui.myAfflictions[i] == "paralysis" then
				setBackgroundColor("paraAff", 255, 0, 0, 255)
			end		
			if zgui.myAfflictions[i] == "impatience" then
				setBackgroundColor("impaAff", 255, 0, 0, 255)
			end
			if zgui.myAfflictions[i] == "asthma" then
				setBackgroundColor("asthAff", 255, 0, 0, 255)
			end
			if zgui.myAfflictions[i] == "anorexia" then
				setBackgroundColor("anorAff", 255, 0, 0, 255)
			end
			if zgui.myAfflictions[i] == "slickness" then
				setBackgroundColor("slicAff", 255, 0, 0, 255)
			end	
		end  
  end
  if zgui.affliction then
----------------------------------------
-- All Afflictions		
  clearWindow("afflictionDisplay")
  if not zgui.lokiCount then zgui.lokiCount = 0 end
  if zgui.lokiCount &gt; 0 then
		setBackgroundColor("afflictionDisplay",128,0,0,255)  
		cecho("afflictionDisplay", "&lt;white:ansi_red&gt; - LOKI: &lt;gold&gt;"..zgui.lokiCount.."\n")    
  end
  
	if table.size(zgui.myAfflictions) &gt; 0 then
		setBackgroundColor("afflictionDisplay",128,0,0,255)
		for i=1, table.size(zgui.myAfflictions), 1 do
			cecho("afflictionDisplay", "&lt;white:ansi_red&gt; "..zgui.myAfflictions[i].."\n")
		end
	elseif not zgui.lokiCount or zgui.lokiCount == 0 then
		setBackgroundColor("afflictionDisplay", 0, 0, 0,255)	
	end
  end
end</script>
					<eventHandlerList />
				</Script>
				<ScriptGroup isActive="yes" isFolder="yes">
					<name>GMCP Aff Functions</name>
					<packageName></packageName>
					<script></script>
					<eventHandlerList />
					<Script isActive="yes" isFolder="no">
						<name>zgui.AffPlus</name>
						<packageName></packageName>
						<script>function zgui.AffPlus()
	if gmcp.Char.Afflictions.Add.name ~= "insomnia" and gmcp.Char.Afflictions.Add.name ~= "deafness" and gmcp.Char.Afflictions.Add.name ~= "blindness" then
		raiseEvent("got aff", gmcp.Char.Afflictions.Add.name)
		zgui.Aff[gmcp.Char.Afflictions.Add.name] = true
		affliction = gmcp.Char.Afflictions.Add.name
		cecho("&lt;gray&gt;[&lt;coral&gt; AFF  &lt;gray&gt;] &lt;red&gt; "..affliction.."\n")

		if table.contains(zgui.myAfflictions, gmcp.Char.Afflictions.Add.name) then
			removeDupAff = table.index_of(zgui.myAfflictions, gmcp.Char.Afflictions.Add.name)
			table.remove(zgui.myAfflictions, removeDupAff) 
			table.insert(zgui.myAfflictions, 1, gmcp.Char.Afflictions.Add.name)
		else
			table.insert(zgui.myAfflictions, 1, gmcp.Char.Afflictions.Add.name)
		end
		zgui.trueTime = string.cut(getTime(true, "hh:mm:ss:zzz"), 11)
		cecho("logDisplay", "&lt;gold&gt;"..zgui.trueTime)
		cecho("logDisplay", "   &lt;gray&gt;[&lt;coral&gt;AFF&lt;gray&gt;]&lt;red&gt; "..affliction.."\n")		
		zgui.showAffs()
	end
end</script>
						<eventHandlerList>
							<string>gmcp.Char.Afflictions.Add</string>
						</eventHandlerList>
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>zgui.AffMinus</name>
						<packageName></packageName>
						<script>function zgui.AffMinus()
	local lostAff = ""
			lostAff = gmcp.Char.Afflictions.Remove[1]
			affliction = lostAff
			raiseEvent("lost aff", lostAff)
			canSwap = true
	if zgui.Aff[lostAff] then
		zgui.Aff[lostAff] = nil
	end
	cecho("&lt;gray&gt;[&lt;lime_green&gt; AFF  &lt;gray&gt;] &lt;lawn_green&gt; "..lostAff:title().."\n")

	removeAffliction = table.index_of(zgui.myAfflictions, gmcp.Char.Afflictions.Remove[1])
	table.remove(zgui.myAfflictions, removeAffliction) 
  zgui.trueTime = string.cut(getTime(true, "hh:mm:ss:zzz"), 11)
	cecho("logDisplay", "&lt;gold&gt;"..zgui.trueTime)
	cecho("logDisplay", "   &lt;gray&gt;[&lt;lime_green&gt;AFF&lt;gray&gt;]&lt;lawn_green&gt; "..lostAff:title().."\n")	
	zgui.showAffs()
end
</script>
						<eventHandlerList>
							<string>gmcp.Char.Afflictions.Remove</string>
						</eventHandlerList>
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>zgui.AffDiag</name>
						<packageName></packageName>
						<script>function zgui.AffDiag()
	zgui.Aff = {}
	zgui.myAfflictions = {}
  zgui.lokiCount = 0
	for k, v in ipairs(gmcp.Char.Afflictions.List) do
		if gmcp.Char.Afflictions.List[k]["name"] ~= "blindness" and gmcp.Char.Afflictions.List[k]["name"] ~= "deafness" and gmcp.Char.Afflictions.List[k]["name"] ~= "insomnia" then
			zgui.Aff[gmcp.Char.Afflictions.List[k]["name"]] = true
			table.insert(zgui.myAfflictions, 1, gmcp.Char.Afflictions.List[k]["name"])
		end
	end
	zgui.showAffs()
end
	</script>
						<eventHandlerList>
							<string>gmcp.Char.Afflictions.List</string>
						</eventHandlerList>
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>Aff Table</name>
						<packageName></packageName>
						<script>zgui.Aff = {}
zgui.myAfflictions = {}</script>
						<eventHandlerList />
					</Script>
				</ScriptGroup>
				<ScriptGroup isActive="yes" isFolder="yes">
					<name>Aff Lock Window</name>
					<packageName></packageName>
					<script></script>
					<eventHandlerList />
					<Script isActive="yes" isFolder="no">
						<name>buildAffLock</name>
						<packageName></packageName>
						<script>function zgui.buildAfflictionlock()
  zgui.afflictionlock = {}

  --Create the afflictionlock Adjustable
  zgui.afflictionlock.window = Adjustable.Container:new({
    name = "zgui.afflictionlock.window",
    x = 0, y = 0,
    width = "50%",
    height = "50%",  
    adjLabelstyle = zgui.adjLabelstyle,
    buttonstyle=[[
      QLabel{ border-radius: 5px; background-color: rgba(140,140,140,100%);}
      QLabel::hover{ background-color: rgba(160,160,160,50%);}
    ]],
    buttonFontSize = 10,
    buttonsize = 15,          
  },main)
  zgui.afflictionlock.window:changeMenuStyle("dark")

  --Create the afflictionlock container
  zgui.afflictionlock.container = Geyser.Container:new({
    name = "zgui.afflictionlock.back",
    x = 0, y = 0,
    width = "100%",
    height = "100%",        
  },zgui.afflictionlock.window)  

  zgui.afflictionlock.window:setTitle("Lock Out","gray")
  zgui.afflictionlock.window:show()

	zgui.afflictionlock.bg = Geyser.Label:new({
		name = "afflictionlockBG",
		color = "black",
		x = 0,	y = 0,
		width = 0,	height = 0
	}, zgui.afflictionlock.container)
  setBackgroundColor("afflictionlockBG", 0, 0, 0, 255)

---------------------------------------------------------------------------

	zgui.afflictionlock.pronLabel = Geyser.Label:new({
		name = "pronAff",
		x = "1%", y = "2%",
		width = "98%", height = "18%",
	}, zgui.afflictionlock.container)
	setBackgroundColor("pronAff", 80, 0, 0, 255)
	zgui.afflictionlock.pronLabel:echo("&lt;center&gt;Prone")	

	zgui.afflictionlock.paraLabel = Geyser.Label:new({
		name = "paraAff",
		x = "1%", y = "22%",
		width = "18%", height = "70%",
	}, zgui.afflictionlock.container)
	setBackgroundColor("paraAff", 80, 0, 0, 255)
	zgui.afflictionlock.paraLabel:echo("&lt;center&gt;Para")

	zgui.afflictionlock.impaLabel = Geyser.Label:new({
		name = "impaAff",
		x = "21%", y = "22%",
		width = "18%", height = "70%",
	}, zgui.afflictionlock.container)
	setBackgroundColor("impaAff", 80, 0, 0, 255)
	zgui.afflictionlock.impaLabel:echo("&lt;center&gt;Imp")
	
	zgui.afflictionlock.asthLabel = Geyser.Label:new({
		name = "asthAff",
		x = "41%", y = "22%",
		width = "18%", height = "70%",
	}, zgui.afflictionlock.container)
	setBackgroundColor("asthAff", 80, 0, 0, 255)
	zgui.afflictionlock.asthLabel:echo("&lt;center&gt;Ast")
	
	zgui.afflictionlock.anorLabel = Geyser.Label:new({
		name = "anorAff",
		x = "61%", y = "22%",
		width = "18%", height = "70%",
	}, zgui.afflictionlock.container)
	setBackgroundColor("anorAff", 80, 0, 0, 255)
	zgui.afflictionlock.anorLabel:echo("&lt;center&gt;Ano")
	
	zgui.afflictionlock.slicLabel = Geyser.Label:new({
		name = "slicAff",
		x = "81%", y = "22%",
		width = "18%", height = "70%",
	}, zgui.afflictionlock.container)
	setBackgroundColor("slicAff", 80, 0, 0, 255)
	zgui.afflictionlock.slicLabel:echo("&lt;center&gt;Sli")
  
  if not table.contains(zgui.modules, "Afflictionlock") then
    table.insert(zgui.modules, "Afflictionlock")
  end  
end</script>
						<eventHandlerList />
					</Script>
				</ScriptGroup>
			</ScriptGroup>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>Room Windows</name>
				<packageName></packageName>
				<script></script>
				<eventHandlerList />
				<ScriptGroup isActive="yes" isFolder="yes">
					<name>Room Players</name>
					<packageName></packageName>
					<script></script>
					<eventHandlerList />
					<Script isActive="yes" isFolder="no">
						<name>buildRoomPlayers</name>
						<packageName></packageName>
						<script>function zgui.buildRoomplayers()
  zgui.roomplayersSize = zgui.roomplayersSize or 9
  zgui.roomplayers = {}

  --Create the roomplayers Adjustable
  zgui.roomplayers.window = Adjustable.Container:new({
    name = "zgui.roomplayers.window",
    x = 0, y = 0,
    width = "50%",
    height = "50%",  
    adjLabelstyle = zgui.adjLabelstyle,
    buttonstyle=[[
      QLabel{ border-radius: 5px; background-color: rgba(140,140,140,100%);}
      QLabel::hover{ background-color: rgba(160,160,160,50%);}
    ]],
    buttonFontSize = 10,
    buttonsize = 15,          
  },main)
  zgui.roomplayers.window:changeMenuStyle("dark")

  --Create the roomplayers container
  zgui.roomplayers.container = Geyser.Container:new({
    name = "zgui.roomplayers.back",
    x = 0, y = 0,
    width = "100%",
    height = "100%",        
  },zgui.roomplayers.window)  

  --Create the roomplayers Console
  zgui.roomplayers.console = Geyser.MiniConsole:new({
    name = "roomPlayersDisplay",
    x = 0, y = 0,
    autoWrap = true,
    width = "100%",
    height = "100%",
    color="black",
  },zgui.roomplayers.container) 

  setFontSize("roomPlayersDisplay", zgui.roomplayersSize)
  zgui.roomplayers.window:setTitle("Players","gray")
  zgui.roomplayers.window:show()
  
  if not table.contains(zgui.modules, "Roomplayers") then
    table.insert(zgui.modules, "Roomplayers")
  end  
end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>showRoomPlayers</name>
						<packageName></packageName>
						<script>function zgui.showRoomPlayers()
	clearWindow("roomPlayersDisplay")
  zgui.whoRoomList = {}
	if #gmcp.Room.Players &gt; 0 then
		for i=1, #gmcp.Room.Players, 1 do
			table.insert(zgui.whoRoomList, 1, gmcp.Room.Players[i].name)	
		end
	end
  zgui.updateRoomPlayers()
end

function zgui.roomPlayersAdd()
  zgui.whoRoomList = zgui.whoRoomList or {}
  local name = gmcp.Room.AddPlayer.name
  if not table.contains(zgui.whoRoomList, name) then
    table.insert(zgui.whoRoomList, name)
    table.sort(zgui.whoRoomList)
  end
  zgui.updateRoomPlayers()
end

function zgui.roomPlayersRemove()
  zgui.whoRoomList = zgui.whoRoomList or {}
  if table.contains(zgui.whoRoomList, gmcp.Room.RemovePlayer) then
    for n, player in pairs(zgui.whoRoomList) do
      if player == gmcp.Room.RemovePlayer then
        table.remove(zgui.whoRoomList, n)
        break
      end
    end
  end
  zgui.updateRoomPlayers()
end

function zgui.updateRoomPlayers()
	clearWindow("roomPlayersDisplay")
  if zgui.whoRoomList then
    if #zgui.whoRoomList &gt; 0 then
      cecho("roomPlayersDisplay", "&lt;orange&gt;(&lt;NavajoWhite&gt;"..#zgui.whoRoomList.."&lt;orange&gt;) Players:\n")
    end
    for i=1, #zgui.whoRoomList, 1 do
      --this line here will require an ndb check, if you wanna colour name.
      if sndNDB_getColour then
        cecho("roomPlayersDisplay", " &lt;"..sndNDB_getColour(zgui.whoRoomList[i]).."&gt;"..zgui.whoRoomList[i]..", ")
      else
        cecho("roomPlayersDisplay", " &lt;cyan&gt;"..zgui.whoRoomList[i]..", ")
      end
    end
  end
end

registerAnonymousEventHandler("gmcp.Room.Players", "zgui.showRoomPlayers")
registerAnonymousEventHandler("gmcp.Room.AddPlayer", "zgui.roomPlayersAdd")
registerAnonymousEventHandler("gmcp.Room.RemovePlayer", "zgui.roomPlayersRemove")</script>
						<eventHandlerList />
					</Script>
				</ScriptGroup>
				<ScriptGroup isActive="yes" isFolder="yes">
					<name>Room Denizens</name>
					<packageName></packageName>
					<script></script>
					<eventHandlerList />
					<Script isActive="yes" isFolder="no">
						<name>buildRoomDenizens</name>
						<packageName></packageName>
						<script>function zgui.buildRoomdenizens()
  zgui.roomDenizensSize = zgui.roomDenizensSize or 6
  zgui.roomdenizens = {}

  --Create the roomdenizens Adjustable
  zgui.roomdenizens.window = Adjustable.Container:new({
    name = "zgui.roomdenizens.window",
    x = 0, y = 0,
    width = "50%",
    height = "50%",  
    adjLabelstyle = zgui.adjLabelstyle,
    buttonstyle=[[
      QLabel{ border-radius: 5px; background-color: rgba(140,140,140,100%);}
      QLabel::hover{ background-color: rgba(160,160,160,50%);}
    ]],
    buttonFontSize = 10,
    buttonsize = 15,          
  },main)
  zgui.roomdenizens.window:changeMenuStyle("dark")

  --Create the roomdenizens container
  zgui.roomdenizens.container = Geyser.Container:new({
    name = "zgui.roomdenizens.back",
    x = 0, y = 0,
    width = "100%",
    height = "100%",        
  },zgui.roomdenizens.window)  

  --Create the roomdenizens Console
  zgui.roomdenizens.console = Geyser.MiniConsole:new({
    name = "roomDenizensDisplay",
    x = 0, y = 0,
    autoWrap = true,
    width = "100%",
    height = "100%",
    color="black",
  },zgui.roomdenizens.container) 

  setFontSize("roomDenizensDisplay", zgui.roomDenizensSize)
  zgui.roomdenizens.window:setTitle("Denizens","gray")
  zgui.roomdenizens.window:show()
  
  if not table.contains(zgui.modules, "Roomdenizens") then
    table.insert(zgui.modules, "Roomdenizens")
  end  
end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>showRoomDenizens</name>
						<packageName></packageName>
						<script>function zgui.showRoomDenizens()
  clearWindow("roomDenizensDisplay")
  if zgui.roomDenizenList then
    for k,v in pairs(zgui.roomDenizenList) do
      cecho("roomDenizensDisplay", " &lt;white&gt;"..zgui.roomDenizenList[k].."\n")
    end
  end  
end</script>
						<eventHandlerList />
					</Script>
				</ScriptGroup>
				<ScriptGroup isActive="yes" isFolder="yes">
					<name>Room Items</name>
					<packageName></packageName>
					<script></script>
					<eventHandlerList />
					<Script isActive="yes" isFolder="no">
						<name>buildRoomItems</name>
						<packageName></packageName>
						<script>function zgui.buildRoomitems()
  zgui.roomItemsSize = zgui.roomItemsSize or 9
  zgui.roomitems = {}

  --Create the roomitems Adjustable
  zgui.roomitems.window = Adjustable.Container:new({
    name = "zgui.roomitems.window",
    x = 0, y = 0,
    width = "50%",
    height = "50%",  
    adjLabelstyle = zgui.adjLabelstyle,
    buttonstyle=[[
      QLabel{ border-radius: 5px; background-color: rgba(140,140,140,100%);}
      QLabel::hover{ background-color: rgba(160,160,160,50%);}
    ]],
    buttonFontSize = 10,
    buttonsize = 15,          
  },main)
  zgui.roomitems.window:changeMenuStyle("dark")

  --Create the roomitems container
  zgui.roomitems.container = Geyser.Container:new({
    name = "zgui.roomitems.back",
    x = 0, y = 0,
    width = "100%",
    height = "100%",        
  },zgui.roomitems.window)  

  --Create the roomitems Console
  zgui.roomitems.console = Geyser.MiniConsole:new({
    name = "roomItemsDisplay",
    x = 0, y = 0,
    autoWrap = true,
    width = "100%",
    height = "100%",
    color="black",
  },zgui.roomitems.container) 

  setFontSize("roomItemsDisplay", zgui.roomItemsSize)
  zgui.roomitems.window:setTitle("Items","gray")
  zgui.roomitems.window:show()
  
  if not table.contains(zgui.modules, "Roomitems") then
    table.insert(zgui.modules, "Roomitems")
  end  
end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>showRoomItems</name>
						<packageName></packageName>
						<script>function zgui.showRoomItems()
  clearWindow("roomItemsDisplay")
  if zgui.roomGetItemList then
    for k,v in pairs(zgui.roomGetItemList) do
      cecho("roomItemsDisplay", " &lt;gold&gt;"..zgui.roomGetItemList[k].."\n")
    end
  end  
  if zgui.roomItemList then
    for k,v in pairs(zgui.roomItemList) do
      cecho("roomItemsDisplay", " &lt;grey&gt;"..zgui.roomItemList[k].."\n")
    end
  end    
end

--new Items list on moving rooms
function zgui.updateroomitems()
  zgui.roomGetItemList = {}
  zgui.roomItemList = {}
  zgui.roomDenizenList = {}
  for k,v in pairs(gmcp.Char.Items.List.items) do
    if v.attrib == "m" then
      if not table.contains(zgui.roomDenizenList, v.id) then
        zgui.roomDenizenList[v.id] = v.name
      end
    elseif v.attrib == "t" then
      if not table.contains(zgui.roomGetItemList, v.id) then
        zgui.roomGetItemList[v.id] = v.name
      end   
    else
      if not table.contains(zgui.roomItemList, v.id) then
        zgui.roomItemList[v.id] = v.name
      end           
    end
  end -- for
  zgui.showRoomItems()
  zgui.showRoomDenizens()
end

registerAnonymousEventHandler("gmcp.Char.Items.List", "zgui.updateroomitems")

--item added to room
function zgui.addroomitem()
  --check if item was added to room
  if gmcp.Char.Items.Add.location == "room" then
    --check if item is already in roomitems table
    if gmcp.Char.Items.Add.item.attrib == "m" then
      if not table.contains(zgui.roomDenizenList, gmcp.Char.Items.Add.item.id) then
        zgui.roomDenizenList[gmcp.Char.Items.Add.item.id] = gmcp.Char.Items.Add.item.name
      end
    elseif gmcp.Char.Items.Add.item.attrib == "t" then
      if not table.contains(zgui.roomGetItemList, gmcp.Char.Items.Add.item.id) then
        zgui.roomGetItemList[gmcp.Char.Items.Add.item.id] = gmcp.Char.Items.Add.item.name
      end   
    else
      if not table.contains(zgui.roomItemList, gmcp.Char.Items.Add.item.id) then
        zgui.roomItemList[gmcp.Char.Items.Add.item.id] = gmcp.Char.Items.Add.item.name
      end  
    end
  end
  zgui.showRoomItems()
  zgui.showRoomDenizens()
end

--manually add item to room
function zgui.manualAddItem(id, name)
  if not table.contains(zgui.roomItemList, id) then
    zgui.roomItemList[id] = name
  end      
  zgui.showRoomItems()     
end

registerAnonymousEventHandler("gmcp.Char.Items.Add", "zgui.addroomitem")

--item removed from room
function zgui.removeroomitem()
  if gmcp.Char.Items.Remove.location == "room" then
    if table.contains(zgui.roomGetItemList, gmcp.Char.Items.Remove.item.id) then   
      zgui.roomGetItemList[gmcp.Char.Items.Remove.item.id] = nil
    elseif table.contains(zgui.roomDenizenList, gmcp.Char.Items.Remove.item.id) then   
      zgui.roomDenizenList[gmcp.Char.Items.Remove.item.id] = nil
    elseif table.contains(zgui.roomItemList, gmcp.Char.Items.Remove.item.id) then   
      zgui.roomItemList[gmcp.Char.Items.Remove.item.id] = nil
    end
  end
  zgui.showRoomItems()
  zgui.showRoomDenizens()
end

--manually remove person leaving room from people_here
function zgui.manualRemoveItem(id)
  if table.contains(zgui.roomItemList, id) then
    zgui.roomItemList[id] = nil
  elseif table.contains(zgui.roomDenizenList, id) then   
    zgui.roomDenizenList[id] = nil
  elseif table.contains(zgui.roomItemList, id) then   
    zgui.roomItemList[id] = nil 
  end
  zgui.showRoomItems()
  zgui.showRoomDenizens()
end

registerAnonymousEventHandler("gmcp.Char.Items.Remove", "zgui.removeroomitem")</script>
						<eventHandlerList />
					</Script>
				</ScriptGroup>
			</ScriptGroup>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>Target Windows</name>
				<packageName></packageName>
				<script></script>
				<eventHandlerList />
				<ScriptGroup isActive="yes" isFolder="yes">
					<name>Target Afflictions</name>
					<packageName></packageName>
					<script></script>
					<eventHandlerList />
					<Script isActive="yes" isFolder="no">
						<name>buildTarAffs</name>
						<packageName></packageName>
						<script>function zgui.buildTargetaffliction()
  zgui.targetAffsSize = zgui.targetAffsSize or 9
  zgui.targetaffliction = {}

  --Create the affliction Adjustable
  zgui.targetaffliction.window = Adjustable.Container:new({
    name = "zgui.targetaffliction.window",
    x = 0, y = 0,
    width = "50%",
    height = "50%",  
    adjLabelstyle = zgui.adjLabelstyle,
    buttonstyle=[[
      QLabel{ border-radius: 5px; background-color: rgba(140,140,140,100%);}
      QLabel::hover{ background-color: rgba(160,160,160,50%);}
    ]],
    buttonFontSize = 10,
    buttonsize = 15,          
  },main)
  zgui.targetaffliction.window:changeMenuStyle("dark")

  --Create the targetaffliction container
  zgui.targetaffliction.container = Geyser.Container:new({
    name = "zgui.targetaffliction.back",
    x = 0, y = 0,
    width = "100%",
    height = "100%",        
  },zgui.targetaffliction.window)  

  --Create the targetaffliction Console
  zgui.targetaffliction.console = Geyser.MiniConsole:new({
    name = "targetafflictionDisplay",
    x = 0, y = 0,
    autoWrap = true,
    width = "100%",
    height = "100%",
    color="black",
  },zgui.targetaffliction.container) 

  setFontSize("targetafflictionDisplay", zgui.targetAffsSize)
  zgui.targetaffliction.window:setTitle("Target Affs","gray")
  zgui.targetaffliction.window:show()
  
  if not table.contains(zgui.modules, "Targetaffliction") then
    table.insert(zgui.modules, "Targetaffliction")
  end  
end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>showTarAffs</name>
						<packageName></packageName>
						<script>function zgui.showTarAffs()
  clearWindow("targetafflictionDisplay")
----------------------------------------
-- Target Afflictions		
local vFloor = 0
	for k,v in pairs(affstrack.score) do
		if k then
      vFloor = math.floor(v)
      if v == 100 then
        cecho("targetafflictionDisplay", "&lt;green&gt;"..k.."\n")
			elseif v &gt; 30 then
				cecho("targetafflictionDisplay", "&lt;CornflowerBlue&gt;"..k.." "..vFloor.."\n")
			elseif v &lt; 31 and v &gt; 0 then
				cecho("targetafflictionDisplay", "&lt;grey&gt;"..k.." "..vFloor.."\n")
			end
		end
	end
end</script>
						<eventHandlerList />
					</Script>
				</ScriptGroup>
				<ScriptGroup isActive="yes" isFolder="yes">
					<name>Target Limbs</name>
					<packageName></packageName>
					<script></script>
					<eventHandlerList />
					<Script isActive="yes" isFolder="no">
						<name>buildTarLimbs</name>
						<packageName></packageName>
						<script>function zgui.buildTarLimbs()
  zgui.targetlimbs = {}

  --Create the targetlimbs Adjustable
  zgui.targetlimbs.window = Adjustable.Container:new({
    name = "zgui.targetlimbs.window",
    x = 0, y = 0,
    width = "50%",
    height = "50%",  
    adjLabelstyle = zgui.adjLabelstyle,
    buttonstyle=[[
      QLabel{ border-radius: 5px; background-color: rgba(140,140,140,100%);}
      QLabel::hover{ background-color: rgba(160,160,160,50%);}
    ]],
    buttonFontSize = 10,
    buttonsize = 15,          
  },main)

  --Create the targetlimbs container
  zgui.targetlimbs.container = Geyser.Container:new({
    name = "zgui.targetlimbs.back",
    x = 0, y = 0,
    width = "100%",
    height = "100%",        
  },zgui.targetlimbs.window)  

  --Create the targetlimbs Console
  zgui.targetlimbs.console = Geyser.MiniConsole:new({
    name = "targetlimbsDisplay",
    x = 0, y = 0,
    autoWrap = true,
    width = "100%",
    height = "100%",
    color="black",
  },zgui.targetlimbs.container) 

  setFontSize("targetlimbsDisplay", 9)
  zgui.targetlimbs.window:setTitle("Target Limbs","gray")
  zgui.targetlimbs.window:show()
  
  if not table.contains(zgui.modules, "TarLimbs") then
    table.insert(zgui.modules, "TarLimbs")
  end  
end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>showTarLimbs</name>
						<packageName></packageName>
						<script>function zgui.showTarLimbs()

end</script>
						<eventHandlerList />
					</Script>
				</ScriptGroup>
				<ScriptGroup isActive="yes" isFolder="yes">
					<name>Target List</name>
					<packageName></packageName>
					<script></script>
					<eventHandlerList />
					<Script isActive="yes" isFolder="no">
						<name>buildTargetList</name>
						<packageName></packageName>
						<script>function zgui.buildTargetList()
  zgui.targetListSize = zgui.targetListSize or 9
  zgui.targetList = {}

  --Create the targetList Adjustable
  zgui.targetList.window = Adjustable.Container:new({
    name = "zgui.targetList.window",
    x = 0, y = 0,
    width = "50%",
    height = "50%",  
    adjLabelstyle = zgui.adjLabelstyle,
    buttonstyle=[[
      QLabel{ border-radius: 5px; background-color: rgba(140,140,140,100%);}
      QLabel::hover{ background-color: rgba(160,160,160,50%);}
    ]],
    buttonFontSize = 10,
    buttonsize = 15,          
  },main)
  zgui.targetList.window:changeMenuStyle("dark")

  --Create the targetList container
  zgui.targetList.container = Geyser.Container:new({
    name = "zgui.targetList.back",
    x = 0, y = 0,
    width = "100%",
    height = "100%",        
  },zgui.targetList.window)  

  --Create the targetList Console
  zgui.targetList.console = Geyser.MiniConsole:new({
    name = "targetListDisplay",
    x = 0, y = 0,
    autoWrap = true,
    width = "100%",
    height = "100%",
    color="black",
  },zgui.targetList.container) 

  setFontSize("targetListDisplay", zgui.targetListSize)
  zgui.targetList.window:setTitle("Targets","gray")
  zgui.targetList.window:show()
  
  if not table.contains(zgui.modules, "TargetList") then
    table.insert(zgui.modules, "TargetList")
  end  
end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>showTargetList</name>
						<packageName></packageName>
						<script>function zgui.showTargetList()
  clearWindow("targetListDisplay")
	for i=1, table.size(zgui.myTargetList), 1 do
    if i == 1 then
      cecho("targetListDisplay", "&lt;grey&gt;\[ &lt;gold&gt;\-\&gt; &lt;grey&gt;\]&lt;red&gt; 01- &lt;red&gt;"..zgui.myTargetList[i].."\n")
    elseif i &gt; 1 and i &lt; 10 then
		  cecho("targetListDisplay", "&lt;grey&gt;\[    &lt;gray&gt;\]&lt;gray&gt; 0"..i.."- &lt;white&gt;"..zgui.myTargetList[i].."\n")
    elseif i &lt; 21 then
		  cecho("targetListDisplay", "&lt;grey&gt;\[    &lt;gray&gt;\]&lt;gray&gt; "..i.."- &lt;white&gt;"..zgui.myTargetList[i].."\n")
    else
      break
    end
	end
end</script>
						<eventHandlerList />
					</Script>
				</ScriptGroup>
			</ScriptGroup>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>Deathcape</name>
				<packageName></packageName>
				<script></script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>buildCape</name>
					<packageName></packageName>
					<script>function zgui.buildCape()
  zgui.cape = {}
  zgui.cape.count = 0
  --Create the cape Adjustable
  zgui.cape.window = Adjustable.Container:new({
    name = "zgui.cape.window",
    x = 0, y = 0,
    width = "50%",
    height = "50%",  
    adjLabelstyle = "background-color:rgba(50,50,50,0%);",
    buttonstyle=[[
      QLabel{ border-radius: 5px; background-color: rgba(140,140,140,100%);}
      QLabel::hover{ background-color: rgba(160,160,160,50%);}
    ]],
    buttonFontSize = 5,
    buttonsize = 10,          
  },main)
  zgui.cape.window:changeMenuStyle("dark")

  --Create the cape container
  zgui.cape.container = Geyser.Container:new({
    name = "zgui.cape.back",
    x = 0, y = 0,
    width = "100%",
    height = "100%",        
  },zgui.cape.window)  

  --Create the cape Gauge
  zgui.cape.capebar = Geyser.Gauge:new({
    name="capeDisplay",
    x="0%", y="0%",
    width="100%", height="100%",
  },zgui.cape.container) 
  zgui.cape.capebar:setValue(math.random(1,100),100)

	zgui.cape.capebar.front:setStyleSheet([[
		background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #621616, stop: 0.1 #640a0a, stop: 0.49 #8a0000, stop: 0.5 #560000, stop: 1 #260000);
		border-top: 1px black solid;
		border-left: 1px black solid;
		border-bottom: 1px black solid;
		border-radius: 7;
		padding: 3px;
	]])
	
	zgui.cape.capebar.back:setStyleSheet([[
		background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #555555, stop: 0.1 #555555, stop: 0.49 #333333, stop: 0.5 #333333, stop: 1 #555555);
		border-width: 1px;
		border-color: black;
		border-style: solid;
		border-radius: 7;
		padding: 3px;
	]])
  
  setFontSize("capeDisplay", 9)
  zgui.cape.window:setTitle("Deathcape","gray")
  zgui.cape.window:show()
  zgui.clearCape()
  
  if not table.contains(zgui.modules, "Cape") then
    table.insert(zgui.modules, "Cape")
  end 
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>showCape</name>
					<packageName></packageName>
					<script>function zgui.showCape()
  -- update the bar
  if zgui.cape.watch &lt; 240 then
    zgui.cape.capebar:setValue((240-zgui.cape.watch), 240)
    if zgui.cape.count &gt; 49 then
      zgui.cape.capebar.back:setStyleSheet([[
		    border-width: 2px;
		    border-color: darkred;
		    border-style: solid;
		    border-radius: 7;
		    padding: 3px;
	    ]])
      zgui.cape.capebar:echo("&lt;center&gt;FULL - "..(240-zgui.cape.watch).." seconds")
    else
      zgui.cape.capebar.back:setStyleSheet([[
	  	  background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #555555, stop: 0.1 #555555, stop: 0.49 #333333, stop: 0.5 #333333, stop: 1 #555555);
		    border-width: 1px;
		    border-color: black;
		    border-style: solid;
		    border-radius: 7;
		    padding: 3px;
	    ]])
      zgui.cape.capebar:echo("&lt;center&gt;"..zgui.cape.count.."/50 - "..(240-zgui.cape.watch).." seconds")
    end
  elseif zgui.cape.watch == 220 then
    cecho(" == WARNING: 20 SECONDS LEFT ON CAPE ==")  
    zgui.cape.capebar:setValue((240-zgui.cape.watch), 240)
    zgui.cape.capebar:echo("&lt;center&gt;"..zgui.cape.count.."/50 - "..(240-zgui.cape.watch).." seconds")
  else
    zgui.clearCape()   
  end
end

function zgui.renewCape()
  zgui.cape.watch = 0
  if not zgui.cape.count then zgui.cape.count = 0 end
  zgui.cape.count = zgui.cape.count + 1
  if zgui.cape.count &gt; 50 then zgui.cape.count = 50 end
  zgui.showCape()
  enableTimer("Deathcape Timer")
end

function zgui.clearCape()
  zgui.cape.watch = 0
  zgui.cape.count = 0
  zgui.cape.capebar:setValue(0, 240)
  disableTimer("Deathcape Timer")
    zgui.cape.capebar:echo("")
    zgui.cape.capebar.back:setStyleSheet([[
		  background-color:rgba(20,20,20,50%);
		  border-width: 1px;
		  border-color: black;
		  border-style: solid;
		  border-radius: 7;
		  padding: 3px;
	  ]])    
end

registerAnonymousEventHandler("You Died", "zgui.clearCape")
registerAnonymousEventHandler("You Starbursted", "zgui.clearCape")</script>
					<eventHandlerList />
				</Script>
			</ScriptGroup>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>Experience</name>
				<packageName></packageName>
				<script></script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>buildExp</name>
					<packageName></packageName>
					<script>function zgui.buildExp()
  zgui.exp = {}

  --Create the exp Adjustable
  zgui.exp.window = Adjustable.Container:new({
    name = "zgui.exp.window",
    x = 0, y = 0,
    width = "50%",
    height = "50%",  
    adjLabelstyle = "background-color:rgba(50,50,50,0%);",
    buttonstyle=[[
      QLabel{ border-radius: 5px; background-color: rgba(140,140,140,100%);}
      QLabel::hover{ background-color: rgba(160,160,160,50%);}
    ]],
    buttonFontSize = 5,
    buttonsize = 10,          
  },main)
  zgui.exp.window:changeMenuStyle("dark")

  --Create the exp container
  zgui.exp.container = Geyser.Container:new({
    name = "zgui.exp.back",
    x = 0, y = 0,
    width = "100%",
    height = "100%",        
  },zgui.exp.window)  

  --Create the cape Console
  zgui.exp.expbar = Geyser.Gauge:new({
    name="expDisplay",
    x=0, y=0,
    width="100%", height="100%",
  },zgui.exp.container) 
  zgui.exp.expbar:setValue(math.random(1,100),100)

	zgui.exp.expbar.front:setStyleSheet([[
		background-color:rgba(20,150,150,100%);
		border-top: 1px black solid;
		border-left: 1px black solid;
		border-bottom: 1px black solid;
		border-radius: 7;
		padding: 3px;
	]])
	
	zgui.exp.expbar.back:setStyleSheet([[
		background-color:rgba(20,20,20,50%);
		border-width: 1px;
		border-color: black;
		border-style: solid;
		border-radius: 7;
		padding: 3px;
	]])
  
  setFontSize("expDisplay", 9)
  zgui.exp.window:setTitle("Experience","gray")
  zgui.exp.window:show()
  
  if not table.contains(zgui.modules, "Exp") then
    table.insert(zgui.modules, "Exp")
  end
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>showExp</name>
					<packageName></packageName>
					<script>function zgui.showExp()
  if gmcp.Char.Status.xp then
    zgui.exp.expbar:echo("&lt;center&gt;"..gmcp.Char.Status.xp)
    zgui.exp.expbar:setValue(tonumber(string.match(gmcp.Char.Status.xp,"%d+")), 100)
  end
end
-------------------------------------------------------------------
registerAnonymousEventHandler("gmcp.Char.Status", "zgui.showExp")</script>
					<eventHandlerList />
				</Script>
			</ScriptGroup>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>Character Stats</name>
				<packageName></packageName>
				<script></script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>buildCharstat</name>
					<packageName></packageName>
					<script>function zgui.buildCharstat()
  zgui.charstatSize = zgui.charstatSize or 9
  zgui.charstat = {}
  
  --Create the charstat Adjustable
  zgui.charstat.window = Adjustable.Container:new({
    name = "zgui.charstat.window",
    x = 0, y = 0,
    width = "50%",
    height = "50%",        
    adjLabelstyle = zgui.adjLabelstyle,
    buttonstyle=[[
      QLabel{ border-radius: 5px; background-color: rgba(140,140,140,100%);}
      QLabel::hover{ background-color: rgba(160,160,160,50%);}
    ]],
    buttonFontSize = 10,
    buttonsize = 15,
  },main)
  zgui.charstat.window:changeMenuStyle("dark")

  --Create the charstat container
  zgui.charstat.container = Geyser.Container:new({
    name = "zgui.charstat.back",
    x = 0, y = 0,
    width = "100%",
    height = "100%",        
  },zgui.charstat.window)  

  --Create the charstat Console
  zgui.charstat.console = Geyser.MiniConsole:new({
    name = "myCharstat",
    x = 0, y = 0,
    autoWrap = true,
    width = "100%",
    height = "100%",
    color="black",
  },zgui.charstat.container) 
 
  setFontSize("myCharstat", zgui.charstatSize)
  zgui.charstat.window:setTitle("Charstats","gray")
  zgui.charstat.window:show()  
  
  if not table.contains(zgui.modules, "Charstat") then
    table.insert(zgui.modules, "Charstat")
  end
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>showCharstat</name>
					<packageName></packageName>
					<script>function zgui.showCharstat()
  clearWindow("myCharstat")
  cecho("myCharstat", "&lt;white&gt;"..gmcp.Char.Status.class.."\n")
  for k,v in pairs(gmcp.Char.Vitals.charstats) do
    cecho("myCharstat", "&lt;white&gt;(&lt;DimGrey&gt;"..k.."&lt;white&gt;) &lt;white&gt;"..v.."\n")
  end
end

registerAnonymousEventHandler("gmcp.Char.Vitals", "zgui.showCharstat")</script>
					<eventHandlerList />
				</Script>
			</ScriptGroup>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>Battle Rage</name>
				<packageName></packageName>
				<script></script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>showBrage</name>
					<packageName></packageName>
					<script>function zgui.showBrage()

  zgui.battleRageTable()
  zgui.setRageVars()
  
  for i=2, 7 do
    local rageI = "rage"..(i-1)
    if tonumber(string.match(gmcp.Char.Vitals.charstats[2],"%d+")) &gt;= zgui.RageTable[zgui.useRageClass][i][3] then 
      zgui.brage[rageI].back:setStyleSheet([[
		    background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #2a3c1e, stop: 0.1 #456332, stop: 0.49 #577d3f, stop: 0.5 #577d3f, stop: 1 #2a3c1e);
		    border-width: 3px;
		    border-color: green;
		    border-style: solid;
	  	  border-radius: 7;
  		  padding: 3px;
	    ]]) 
    else
	    zgui.brage[rageI].back:setStyleSheet([[
  		  background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #555555, stop: 0.1 #555555, stop: 0.49 #333333, stop: 0.5 #333333, stop: 1 #555555);
	  	  border-width: 1px;
		    border-color: black;
		    border-style: solid;
	  	  border-radius: 7;
  		  padding: 3px;
	    ]]) 
    end
  end
end

registerAnonymousEventHandler("gmcp.Char.Vitals", "zgui.showBrage")

function zgui.showBRage1()
  if isActive("RageSkill1", "timer") then
    zgui.brage.rage1:setValue(getStopWatchTime("rage1watch"), tonumber(zgui.RageTable[zgui.useRageClass][2][2]))
  else
    resetStopWatch("rage1watch") 
    zgui.brage.rage1:setValue(0, tonumber(zgui.RageTable[zgui.useRageClass][2][2]))
  end
end

function zgui.showBRage2()
  if isActive("RageSkill1", "timer") then
    zgui.brage.rage2:setValue(getStopWatchTime("rage2watch"), tonumber(zgui.RageTable[zgui.useRageClass][3][2]))
  else
    resetStopWatch("rage2watch") 
    zgui.brage.rage2:setValue(0, tonumber(zgui.RageTable[zgui.useRageClass][3][2]))
  end
end

function zgui.showBRage3()
  if isActive("RageSkill3", "timer") then
    zgui.brage.rage3:setValue(getStopWatchTime("rage3watch"), tonumber(zgui.RageTable[zgui.useRageClass][4][2]))
  else
    resetStopWatch("rage3watch") 
    zgui.brage.rage3:setValue(0, tonumber(zgui.RageTable[zgui.useRageClass][4][2]))
  end
end

function zgui.showBRage4()
  if isActive("RageSkill4", "timer") then
    zgui.brage.rage4:setValue(getStopWatchTime("rage4watch"), tonumber(zgui.RageTable[zgui.useRageClass][5][2]))
  else
    resetStopWatch("rage4watch") 
    zgui.brage.rage4:setValue(0, tonumber(zgui.RageTable[zgui.useRageClass][5][2]))
  end
end

function zgui.showBRage5()
  if isActive("RageSkill5", "timer") then
    zgui.brage.rage5:setValue(getStopWatchTime("rage5watch"), tonumber(zgui.RageTable[zgui.useRageClass][6][2]))
  else
    resetStopWatch("rage5watch") 
    zgui.brage.rage5:setValue(0, tonumber(zgui.RageTable[zgui.useRageClass][6][2]))
  end
end

function zgui.showBRage6()
  if isActive("RageSkill6", "timer") then
    zgui.brage.rage6:setValue(getStopWatchTime("rage6watch"), tonumber(zgui.RageTable[zgui.useRageClass][7][2]))
  else
    resetStopWatch("rage6watch") 
    zgui.brage.rage6:setValue(0, tonumber(zgui.RageTable[zgui.useRageClass][7][2]))
  end
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>buildBrage</name>
					<packageName></packageName>
					<script>function zgui.buildBrage()
  zgui.brageSize = zgui.brageSize or 9
  zgui.brage = {}
  
  --Create the brage Adjustable
  zgui.brage.window = Adjustable.Container:new({
    name = "zgui.brage.window",
    x = 0, y = 0,
    width = "50%",
    height = "50%",        
    adjLabelstyle = zgui.adjLabelstyle,
    buttonstyle=[[
      QLabel{ border-radius: 5px; background-color: rgba(140,140,140,100%);}
      QLabel::hover{ background-color: rgba(160,160,160,50%);}
    ]],
    buttonFontSize = 10,
    buttonsize = 15,
  },main)
  zgui.brage.window:changeMenuStyle("dark")

  --Create the brage container
  zgui.brage.container = Geyser.Container:new({
    name = "zgui.brage.back",
    x = 0, y = 0,
    width = "100%",
    height = "100%",        
  },zgui.brage.window)  
 
  setFontSize("mybrage", zgui.brageSize)
  zgui.brage.window:setTitle("BattleRage","gray")
  zgui.brage.window:show()  

---------------------------------------------------------------------

  --Create Rage 1 Gauge
  zgui.brage.rage1 = Geyser.Gauge:new({
    name="brage1Display",
    x="2%", y="3%",
    width="98%", height="15%",
  },zgui.brage.container) 
  zgui.brage.rage1:setValue(0,100)
	zgui.brage.rage1.front:setStyleSheet([[
		background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #621616, stop: 0.1 #640a0a, stop: 0.49 #8a0000, stop: 0.5 #560000, stop: 1 #260000);
		border-top: 1px black solid;
		border-left: 1px black solid;
		border-bottom: 1px black solid;
		border-radius: 7;
		padding: 3px;
	]])
	zgui.brage.rage1.back:setStyleSheet([[
		background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #555555, stop: 0.1 #555555, stop: 0.49 #333333, stop: 0.5 #333333, stop: 1 #555555);
		border-width: 1px;
		border-color: black;
		border-style: solid;
		border-radius: 7;
		padding: 3px;
	]])
  zgui.brage.rage1:echo("&lt;center&gt;Rage Skill 1") 
  zgui.brage.rage1use = Geyser.Label:new({
    name="zgui.rage1use",
    x=0, y=0,
    width="100%", height="100%",
  },zgui.brage.rage1)   
  zgui.brage.rage1use:setClickCallback("zgui.brage1Click")
  setBackgroundColor("zgui.rage1use", 0,0,0, 0)

  --Create Rage 2 Gauge
  zgui.brage.rage2 = Geyser.Gauge:new({
    name="brage2Display",
    x="2%", y="19%",
    width="98%", height="15%",
  },zgui.brage.container) 
  zgui.brage.rage2:setValue(0,100)
	zgui.brage.rage2.front:setStyleSheet([[
		background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #621616, stop: 0.1 #640a0a, stop: 0.49 #8a0000, stop: 0.5 #560000, stop: 1 #260000);
		border-top: 1px black solid;
		border-left: 1px black solid;
		border-bottom: 1px black solid;
		border-radius: 7;
		padding: 3px;
	]])
	zgui.brage.rage2.back:setStyleSheet([[
		background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #555555, stop: 0.1 #555555, stop: 0.49 #333333, stop: 0.5 #333333, stop: 1 #555555);
		border-width: 1px;
		border-color: black;
		border-style: solid;
		border-radius: 7;
		padding: 3px;
	]])
  zgui.brage.rage2:echo("&lt;center&gt;Rage Skill 2") 
  zgui.brage.rage2use = Geyser.Label:new({
    name="zgui.rage2use",
    x=0, y=0,
    width="100%", height="100%",
  },zgui.brage.rage2)   
  zgui.brage.rage2use:setClickCallback("zgui.brage2Click")
  setBackgroundColor("zgui.rage2use", 0,0,0, 0)
  
  
  --Create Rage 3 Gauge
  zgui.brage.rage3 = Geyser.Gauge:new({
    name="brage3Display",
    x="2%", y="35%",
    width="98%", height="15%",
  },zgui.brage.container) 
  zgui.brage.rage3:setValue(0,100)
	zgui.brage.rage3.front:setStyleSheet([[
		background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #621616, stop: 0.1 #640a0a, stop: 0.49 #8a0000, stop: 0.5 #560000, stop: 1 #260000);
		border-top: 1px black solid;
		border-left: 1px black solid;
		border-bottom: 1px black solid;
		border-radius: 7;
		padding: 3px;
	]])
	zgui.brage.rage3.back:setStyleSheet([[
		background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #555555, stop: 0.1 #555555, stop: 0.49 #333333, stop: 0.5 #333333, stop: 1 #555555);
		border-width: 1px;
		border-color: black;
		border-style: solid;
		border-radius: 7;
		padding: 3px;
	]])
  zgui.brage.rage3:echo("&lt;center&gt;Rage Skill 3")  
  zgui.brage.rage3use = Geyser.Label:new({
    name="zgui.rage3use",
    x=0, y=0,
    width="100%", height="100%",
  },zgui.brage.rage3)   
  zgui.brage.rage3use:setClickCallback("zgui.brage3Click")
  setBackgroundColor("zgui.rage3use", 0,0,0, 0)
   
  
  --Create Rage 4 Gauge
  zgui.brage.rage4 = Geyser.Gauge:new({
    name="brage4Display",
    x="2%", y="51%",
    width="98%", height="15%",
  },zgui.brage.container) 
  zgui.brage.rage4:setValue(0,100)
	zgui.brage.rage4.front:setStyleSheet([[
		background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #621616, stop: 0.1 #640a0a, stop: 0.49 #8a0000, stop: 0.5 #560000, stop: 1 #260000);
		border-top: 1px black solid;
		border-left: 1px black solid;
		border-bottom: 1px black solid;
		border-radius: 7;
		padding: 3px;
	]])
	zgui.brage.rage4.back:setStyleSheet([[
		background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #555555, stop: 0.1 #555555, stop: 0.49 #333333, stop: 0.5 #333333, stop: 1 #555555);
		border-width: 1px;
		border-color: black;
		border-style: solid;
		border-radius: 7;
		padding: 3px;
	]])
  zgui.brage.rage4:echo("&lt;center&gt;Rage Skill 4")  
  zgui.brage.rage4use = Geyser.Label:new({
    name="zgui.rage4use",
    x=0, y=0,
    width="100%", height="100%",
  },zgui.brage.rage4)   
  zgui.brage.rage4use:setClickCallback("zgui.brage4Click")
  setBackgroundColor("zgui.rage4use", 0,0,0, 0)
   
  
  --Create Rage 5 Gauge
  zgui.brage.rage5 = Geyser.Gauge:new({
    name="brage5Display",
    x="2%", y="67%",
    width="98%", height="15%",
  },zgui.brage.container) 
  zgui.brage.rage5:setValue(0,100)
	zgui.brage.rage5.front:setStyleSheet([[
		background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #621616, stop: 0.1 #640a0a, stop: 0.49 #8a0000, stop: 0.5 #560000, stop: 1 #260000);
		border-top: 1px black solid;
		border-left: 1px black solid;
		border-bottom: 1px black solid;
		border-radius: 7;
		padding: 3px;
	]])
	zgui.brage.rage5.back:setStyleSheet([[
		background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #555555, stop: 0.1 #555555, stop: 0.49 #333333, stop: 0.5 #333333, stop: 1 #555555);
		border-width: 1px;
		border-color: black;
		border-style: solid;
		border-radius: 7;
		padding: 3px;
	]])
  zgui.brage.rage5:echo("&lt;center&gt;Rage Skill 5") 
  zgui.brage.rage5use = Geyser.Label:new({
    name="zgui.rage5use",
    x=0, y=0,
    width="100%", height="100%",
  },zgui.brage.rage5)   
  zgui.brage.rage5use:setClickCallback("zgui.brage5Click")
  setBackgroundColor("zgui.rage5use", 0,0,0, 0)
  

  --Create Rage 6 Gauge
  zgui.brage.rage6 = Geyser.Gauge:new({
    name="brage6Display",
    x="2%", y="83%",
    width="98%", height="15%",
  },zgui.brage.container) 
  zgui.brage.rage6:setValue(0,100)
	zgui.brage.rage6.front:setStyleSheet([[
		background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #621616, stop: 0.1 #640a0a, stop: 0.49 #8a0000, stop: 0.5 #560000, stop: 1 #260000);
		border-top: 1px black solid;
		border-left: 1px black solid;
		border-bottom: 1px black solid;
		border-radius: 7;
		padding: 3px;
	]])
	zgui.brage.rage6.back:setStyleSheet([[
		background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #555555, stop: 0.1 #555555, stop: 0.49 #333333, stop: 0.5 #333333, stop: 1 #555555);
		border-width: 1px;
		border-color: black;
		border-style: solid;
		border-radius: 7;
		padding: 3px;
	]])  
  zgui.brage.rage6:echo("&lt;center&gt;Rage Skill 6")  
  zgui.brage.rage6use = Geyser.Label:new({
    name="zgui.rage6use",
    x=0, y=0,
    width="100%", height="100%",
  },zgui.brage.rage6)   
  zgui.brage.rage6use:setClickCallback("zgui.brage6Click")
  setBackgroundColor("zgui.rage6use", 0,0,0, 0)

---------------------------------------------------------------------

  createStopWatch("rage1watch")
  stopStopWatch("rage1watch")
  resetStopWatch("rage1watch")
  
  createStopWatch("rage2watch")
  stopStopWatch("rage2watch")
  resetStopWatch("rage2watch")  
  
  createStopWatch("rage3watch")
  stopStopWatch("rage3watch")
  resetStopWatch("rage3watch")  
  
  createStopWatch("rage4watch")
  stopStopWatch("rage4watch")
  resetStopWatch("rage4watch")  
  
  createStopWatch("rage5watch")
  stopStopWatch("rage5watch")
  resetStopWatch("rage5watch")  
  
  createStopWatch("rage6watch")
  stopStopWatch("rage6watch")
  resetStopWatch("rage6watch")  
      
---------------------------------------------------------------------
      
  if not table.contains(zgui.modules, "Brage") then
    table.insert(zgui.modules, "Brage")
  end
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>BRage Callbacks</name>
					<packageName></packageName>
					<script>function zgui.brage1Click()
  local attackString = string.gsub(zgui.RageTable[zgui.useRageClass][2][6], "myTarget", gmcp.Char.Status.target)
  send(attackString)
end

function zgui.brage2Click()
  local attackString = string.gsub(zgui.RageTable[zgui.useRageClass][3][6], "myTarget", gmcp.Char.Status.target)
  send(attackString)
end

function zgui.brage3Click()
  local attackString = string.gsub(zgui.RageTable[zgui.useRageClass][4][6], "myTarget", gmcp.Char.Status.target)
  send(attackString)
end

function zgui.brage4Click()
  local attackString = string.gsub(zgui.RageTable[zgui.useRageClass][5][6], "myTarget", gmcp.Char.Status.target)
  send(attackString)
end

function zgui.brage5Click()
  local attackString = string.gsub(zgui.RageTable[zgui.useRageClass][6][6], "myTarget", gmcp.Char.Status.target)
  send(attackString)
end

function zgui.brage6Click()
  local attackString = string.gsub(zgui.RageTable[zgui.useRageClass][7][6], "myTarget", gmcp.Char.Status.target)
  send(attackString)
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>Battlerage Variables</name>
					<packageName></packageName>
					<script>function zgui.setRageVars()
	--[i] = Class
	--[1]class name -- [2-7] = Skill Names
	--[1]name, [2]cooldown, [3]cost, [4]duration, [5]usable, [6]command, [7]tooltip

	for i=1, #zgui.RageTable, 1 do
		if gmcp.Char.Status.class == zgui.RageTable[i][1].Class then		
			zgui.useRageClass = i
		end
	end
  
  zgui.brage.rage1:echo("&lt;center&gt;"..string.title(zgui.RageTable[zgui.useRageClass][2][1])) 
  zgui.brage.rage2:echo("&lt;center&gt;"..string.title(zgui.RageTable[zgui.useRageClass][3][1])) 
  zgui.brage.rage3:echo("&lt;center&gt;"..string.title(zgui.RageTable[zgui.useRageClass][4][1])) 
  zgui.brage.rage4:echo("&lt;center&gt;"..string.title(zgui.RageTable[zgui.useRageClass][5][1])) 
  zgui.brage.rage5:echo("&lt;center&gt;"..string.title(zgui.RageTable[zgui.useRageClass][6][1])) 
  zgui.brage.rage6:echo("&lt;center&gt;"..string.title(zgui.RageTable[zgui.useRageClass][7][1])) 
end

function zgui.battleRageTable()
	zgui.RageTable = {	-- name, cooldown, cost, duration, usable, command, tooltip
	[1] = {
		{["Class"] = "Black Dragon",},
		{"dragonspit",      16, 14,  0, 1, "dragonspit myTarget",								"Damage over time"},
		{"dragonsting",     27, 25,  8, 1, "dragonsting myTarget",							"Aff:Sensitivity"},
		{"dissolve",         1, 17, 10, 1, "dissolve myTarget",								  "Aff:Shieldbreak"},
		{"override",        23, 36,  0, 1, "override myTarget",								  "Big Damage"},
		{"corrode",         23, 25,  0, 1, "corrode myTarget",									"Cond Damage: clumsiness/aeon"},
		{"dragonfear",      34, 29,  8, 1, "dragonfear myTarget",								"Aff:Fear"},
	},
	[2] = {
		{["Class"] = "Blue Dragon",},
		{"dragonchill",			16, 14,  0, 1, "dragonchill myTarget",							"Small Damage"},
		{"glaciate",				33, 26,  4, 1, "glaciate myTarget",								  "Aff:Stun"},
		{"frostrive",	 		   1, 17, 10, 1, "frostrive myTarget",								"Aff:Shieldbreak"},
		{"override",				23, 36,  0, 1, "override myTarget",								  "Big Damage"},
		{"frostwave",			  23, 25,  0, 1, "frostwave myTarget",								"Cond Damage: amnesia/recklessness"},
		{"ague",					  23, 14,  7, 1, "ague myTarget",										  "Aff:Clumsiness"},
	},
	[3] = {
		{["Class"] = "Golden Dragon",},
		{"overwhelm",		   16, 14,  0, 1, "overwhelm myTarget",								  "Small Damage"},
		{"deaden",			   35, 24,  6, 1, "deaden myTarget",									  "Aff:Aeon"},
		{"psishatter",		  1, 17, 10, 1, "psishatter myTarget",							  "Aff:Shieldbreak"},
		{"psiblast",			 23, 36,  0, 1, "psiblast myTarget",								  "Big Damage"},
		{"psistorm",			 23, 25,  0, 1, "psistorm myTarget",								  "Cond Damage: weakness/stun"},
		{"psidaze",			   41, 28,  6, 1, "psidaze myTarget",									  "Aff:Amnesia"},
	},
	[4] = {
		{["Class"] = "Green Dragon",},
		{"dragonspit",			16, 14,  0, 1, "dragonspit myTarget",							  "Small Damage over time"},
		{"scour",					  25, 18,  9, 1, "scour myTarget",									  "Aff:Inhibit"},
		{"deteriorate",			 1, 17, 10, 1, "deteriorate myTarget",						  "Aff:Shieldbreak"},
		{"override",				23, 36,  0, 1, "override myTarget",								  "Big Damage"},
		{"slaver",				  23, 25,  0, 1, "slaver on myTarget",						    "Cond Damage: sensitivity/clumsiness"},
		{"dragonsap", 			31, 22,  7, 1, "dragonsap myTarget",							  "Aff:Weakness"},
	},
	[5] = {
		{["Class"] = "Red Dragon",},
		{"overwhelm",			16, 14,  0, 1, "overwhelm myTarget",								  "Small Damage"},
		{"dragontaunt",		19, 18,  8, 1, "dragontaunt myTarget",							  "Aff:Recklessness"},
		{"melt",					 1, 17, 10, 1, "melt myTarget",										    "Aff:Shieldbreak"},
		{"dragonblaze",		23, 36,  0, 1, "dragonblaze myTarget",							  "Damage over time"},
		{"flamebath",			23, 25,  0, 1, "flamebath myTarget",								  "Cond Damage: sensitivity/clumsiness"},
		{"scorch",				25, 18,  9, 1, "scorch myTarget",									    "Aff:Inhibit"},
	},
	[6] = {
		{["Class"] = "Silver Dragon",},
		{"overwhelm",			16, 14,  0, 1, "overwhelm myTarget",								  "Small Damage"},
		{"sizzle",				27, 25,  8, 1, "sizzle myTarget",								    	"Aff:Sensitivity"},
		{"splinter",				 1, 17, 10, 1, "splinter myTarget",								  "Aff:Shieldbreak"},
		{"dragonspark",			23, 36,  0, 1, "dragonspark myTarget",							"Big Damage"},
		{"stormflare",			23, 25,  0, 1, "stormflare myTarget",								"Cond Damage: fear/amnesia"},
		{"galvanize",			19, 18, 15, 1, "galvanize myTarget",								  "Aff:Recklessness"},
	},
	[7] = {
		{["Class"] = "Alchemist",},
		{"miasma",				16, 14,  0, 1, "throw miasma at myTarget",						"Small Damage"},
		{"cadmium",				31, 22,  7, 1, "educe cadmium myTarget",							"Aff:Weakness"},
		{"caustic",				 1, 17, 10, 1, "throw caustic at myTarget",						"Aff:Shieldbreak"},
		{"magnesium",			23, 36,  0, 1, "educe magnesium myTarget",						"Big Damage"},
		{"pathogen",				23, 25,  0, 1, "throw pathogen at myTarget",				"Cond damage: recklessness/fear"},
		{"hypnotic",				41, 28,  4, 1, "throw hypnotic at myTarget",				"Aff:Amnesia"},
	},
	[8] = {
		{["Class"] = "Apostate",},
		{"convulsions",			16, 14,  0, 1, "stare myTarget convulsions",				"Small Damage"},
		{"horrify",				34, 29,  8, 1, "stare myTarget horrify",							"Aff:Fear"},
		{"shieldbreak",			 1, 17, 10, 1, "shieldbreak myTarget",							"Aff:Shieldbreak"},
		{"burrow",				23, 36,  0, 1, "daegger burrow myTarget",						  "Big Damage"},
		{"bloodlet",				23, 25,  8, 1, "bloodlet myTarget",								  "Cond damage: sensitivity/stun"},
		{"possess",				43, 32,  4, 1, "possess myTarget",									  "Aff:Charm"},
	},
	[9] = {
		{["Class"] = "Bard",},
		{"moulinet",			16, 14,  0, 1, "moulinet myTarget",								    "Small Damage"},
		{"trill",					41, 28,  4, 1, "play trill at myTarget",							"Aff:Amnesia"},
		{"resonance",			 1, 17, 10, 1, "play resonance at myTarget",					"Aff:Shieldbreak"},
		{"howlslash",			23, 36,  0, 1, "howlslash myTarget",								  "Big Damage"},
		{"cyclone",				23, 25,  4, 1, "cyclone myTarget",									  "Cond damage: clumsiness/stun"},
		{"charm",					43, 32,  4, 1, "play charm at myTarget",							"Aff:Charm"},
	},
	[10] = {
		{["Class"] = "Blademaster",},
		{"leapstrike",			16, 14,  0, 1, "leapstrike myTarget",								"Small Damage"},
		{"daze",					33, 26,  4, 1, "shin daze myTarget",								  "Aff:Stun"},
		{"shatter",			 	 1, 17, 10, 1, "shin shatter myTarget",							  "Aff:Shieldbreak"},
		{"spinslash",			23, 36,  0, 1, "spinslash myTarget",								  "Big Damage"},
		{"headstrike",			23, 25,  0, 1, "strike myTarget head",							"Cond damage: recklessness/fear"},
		{"nerveslash",			31, 22,  7, 1, "nerveslash myTarget",								"Aff:Weakness"},
	},
	[11] = {
		{["Class"] = "Druid",},
		{"strangle",				16, 14,  0, 1, "strangle myTarget",								  "Small Damage"},
		{"redeem",				31, 22,  7, 1, "reclamation redeem myTarget",					"Aff:Weakness"},
		{"vinecrack",			 1, 17, 10, 1, "vinecrack myTarget",								  "Aff:Shieldbreak"},
		{"ravage",				23, 36,  0, 1, "ravage myTarget",									    "Big Damage"},
		{"sear",					23, 25,  0, 1, "sear myTarget",										    "Cond Damage: recklessness/stun"},
		{"glare",					23, 14,  4, 1, "quarterstaff glare myTarget",					"Aff:Clumsiness"},
	},
	[12] = {
		{["Class"] = "Infernal",},
		{"ravage",				16, 14,  0, 1, "ravage myTarget",									    "Small Damage"},
		{"soulshield",			37, 20,  8, 1, "soulshield",											  "Temporary damage shield"},
		{"shiver",				 1, 17, 10, 1, "shive myTarget",									    "Aff:Shieldbreak"},
		{"spike",					23, 36,  0, 1, "spike myTarget",									    "Big Damage"},
		{"hellstrike",			23, 25,  0, 1, "hellstrike myTarget",								"Cond Damage: recklessness/fear"},
		{"deathlink",			43, 30,  5, 1, "deathlink myAlly",									  "Take 50% of ally's damage"},
	},
	[13] = {
		{["Class"] = "Jester",},
		{"noogie",				16, 14,  0, 1, "noogie myTarget",									    "Small Damage"},
		{"dustthrow",			25, 18,  9, 1, "dustthrow myTarget",								  "Aff:Inhibit"},
		{"jacks",					 1, 17, 10, 1, "throw jacks at myTarget",						  "Aff:Shieldbreak"},
		{"ensconce",				23, 36,  0, 1, "ensconce firecracker on myTarget",  "Big Damage"},
		{"befuddle",				23, 25,  6, 1, "befuddle myTarget",								  "Cond Damage: aeon/amnesia"},
		{"rap",					33, 26,  4, 1, "rap myTarget",										      "Aff:Stun"},
	},
	[14] = {
		{["Class"] = "Magi",},
		{"windlash",				16, 14,  0, 1, "cast windlash at myTarget",				  "Small Damage"},
		{"dilation",				35, 24,  6, 1, "cast dilation at myTarget",				  "Aff:Aeon"},
		{"disintegrate",		 1, 17, 10, 1, "cast disintegrate at myTarget",		  "Aff:Shieldbreak"},
		{"squeeze",				23, 36,  0, 1, "golem squeeze myTarget",							"Big Damage"},
		{"firefall",				23, 25,  7, 1, "cast firefall at myTarget",				  "Cond Damage: clumsiness/recklessness"},
		{"stormbolt",			27, 25,  8, 1, "cast stormbolt at myTarget",					"Aff:Sensitivity"},
	},
	[15] = {
		{["Class"] = "Monk",},
		{"spinningbackfist",	16, 14,  0, 1, "sbp myTarget",										"Small Damage"},
		{"scramble",			31, 22,  7, 1, "mind scramble myTarget",				      "Aff:Clumsiness"},
		{"splinterkick",	 1, 17, 10, 1, "spk myTarget",										    "Aff:Shieldbreak"},
		{"tornadokick",		23, 36,  0, 1, "tnk myTarget",										    "Big Damage"},
		{"mindblast",			23, 25,  0, 1, "mind blast myTarget",								  "Cond Damage: weakness/sensitivity"},
		{"ripplestrike",	27, 25,  9, 1, "rpst myTarget",										    "Aff:Inhibit"},
	},
	[16] = {
		{["Class"] = "Occultist",},
		{"harry",					16, 14,  0, 1, "harry myTarget",									    "Damage over time"},
		{"temper",				43, 32,  5, 1, "temper myTarget",									    "Aff:Charm"},
		{"ruin",					 1, 17, 10, 1, "ruin myTarget",										    "Break shield"},
		{"chaosgate",			23, 36,  0, 1, "chaosgate myTarget",								  "Big Damage"},
		{"fluctuate",			23, 25,  8, 1, "fluctuate myTarget",								  "Cond Damage: fear/amnesia"},
		{"stagnate",			35, 24,  6, 1, "stagnate myTarget",								    "Aff:Aeon"},
	},
	[17] = {
		{["Class"] = "Paladin",},
		{"harrow",				16, 14,  0, 1, "harrow myTarget",									         "Small Damage"},
		{"regeneration",	53, 33,  8, 1, "perform rite of regeneration",		         "Regenerate health"},
		{"faithrend",			 1, 17, 10, 1, "faithrend myTarget",								       "Aff:Shieldbreak"},
		{"shock",					23, 36,  0, 1, "perform rite of shock at myTarget",	       "Damage over time"},
		{"punishment",		23, 25,  0, 1, "perform rite of punishment at myTarget",	 "Cond Damage: weakness/clumsiness"},
		{"recovery",			44, 31,  6, 1, "perform rite of recovery at myAlly",       "Heal ally for next 6 seconds"},
	},
	[18] = {
		{["Class"] = "Priest",},
		{"torment",				16, 14,  0, 1, "angel torment myTarget",							     "Small Damage"},
		{"incense",				18, 19, 15, 1, "angel incense myTarget",							     "Aff:Recklessness"},
		{"crack",					 1, 17, 10, 1, "crack myTarget",									         "Aff:Shieldbreak"},
		{"desolation",		23, 36,  4, 1, "perform rite of desolation on myTarget",	 "Damage over time"},
		{"hammer",				23, 25,  0, 1, "hammer myTarget",									         "Cond Damage: clumsiness/amnesia"},
		{"horrify",				34, 29,  8, 1, "perform rite of horrify on myTarget",      "Aff:Fear"},
	},
	[19] = {
		{["Class"] = "Runewarden",},
		{"collide",				16, 14,  0, 1, "collide myTarget",									  "Small Damage"},
		{"bulwark",				45, 28, 15, 1, "bulwark",											        "Damage reduction for self"}, -- 25%
		{"fragment",			 1, 17, 10, 1, "fragment myTarget",								    "Aff:Shieldbreak"},
		{"onslaught",			23, 36,  0, 1, "onslaught myTarget",								  "Big Damage"},
		{"etch",					23, 25,  0, 1, "etch rune at myTarget",							  "Cond Damage: aeon/stun"},
		{"safeguard",			57, 35, 10, 1, "safeguard myAlly",									  "Damage reduction for ally"}, --40%
	},
	[20] = {
		{["Class"] = "Sentinel",},
		{"pester",				16, 14,  0, 1, "pester myTarget",									    "Small Damage"},
		{"tame",					43, 32,  5, 1, "tame myTarget",										    "Aff:Charm"},
		{"bore"		,			 1, 17, 10, 1, "bore myTarget",										      "Aff:Shieldbreak"},
		{"skewer",				23, 36,  0, 1, "skewer myTarget",									    "Big Damage"},
		{"swarm",					23, 25,  0, 1, "swarm myTarget",									    "Cond Damage: aeon/clumsiness"},
		{"goad",					19, 18, 15, 1, "goad myTarget",										    "Aff:Recklessness"},
	},
	[21] = {
		{["Class"] = "Serpent",},
		{"thrash",				16, 14,  0, 1, "thrash myTarget",									    "Small Damage"},
		{"flagellate",		27, 25,  6, 1, "flagellate myTarget",								  "Aff:Aeon"},
		{"excoriate",			 1, 17, 10, 1, "excoriate myTarget",								  "Aff:Shieldbreak"},
		{"throatrip",			23, 36,  0, 1, "throatrip myTarget",								  "Big Damage"},
		{"snare",					23, 25,  5, 1, "snare myTarget",									    "Cond Damage: inhibited/weakness"},
		{"obliviate",			41, 28,  4, 1, "obliviate myTarget",								  "Aff:Amnesia"},
	},
	[22] = {
		{["Class"] = "Shaman",},
		{"corruption",			16, 14,  0, 1, "curse myTarget corruption",			    "Small Damage"},
		{"korkma",				34, 29,  4, 1, "invoke korkma myTarget",					    "Aff:Fear"},
		{"vulnerability",		 1, 17, 10, 1, "curse myTarget vulnerability",	    "Aff:Shieldbreak"},
		{"haemorrhage",			23, 36,  0, 1, "curse myTarget haemorrhage",		    "Big Damage over time"},
		{"vurus",					23, 25,  0, 1, "invoke vurus myTarget",							  "Cond Damage: sensitivity/amnesia"},
		{"cesaret",				19, 18, 15, 1, "invoke cesaret myTarget",						  "Aff:Recklessness"},
	},
	[23] = {
		{["Class"] = "Sylvan",},
		{"torrent",				16, 14,  0, 1, "cast torrent at myTarget",						"Small Damage"},
		{"sandstorm",			34, 29,  8, 1, "cast sandstorm at myTarget",					"Aff:Fear"},
		{"shieldbreak",			 1, 17, 10, 1, "shieldbreak myTarget",							"Aff:Shieldbreak"},
		{"stonevine",			23, 36,  0, 1, "stonevine myTarget",								  "Big Damage"},
		{"leechroot",			23, 25,  0, 1, "leechroot myTarget",								  "Cond Damage: inhibited/weakness"},
		{"rockshot",				41, 28,  4, 1, "cast rockshot at myTarget",				  "Aff:Amnesia"},
	},
	[24] = {
		{["Class"] = "Depthswalker",},
		{"drain",				16, 14,  0, 1, "shadow drain myTarget",						      "Damage over Time"},
		{"lash",				23, 36,  8, 1, "shadow lash myTarget",						      "Big Damage"},
		{"curse",				35, 24, 10, 1, "chrono curse myTarget",						      "Aff:Aeon"},
		{"nakail",			 1, 17,  0, 1, "intone nakail myTarget",						    "Shieldbreak"},
		{"erasure",			23, 25,  0, 1, "chrono erasure myTarget",					      "Mid Damage"},
		{"boinad",			38, 32,  4, 1, "intone boinad myTarget",						    "Aff:Charm"},
	},
	[25] = {
		{["Class"] = "air Elemental Lord",},
		{"bolt",				 16, 14,  0, 1, "manifest bolt myTarget",					      "Small Damage"},
		{"suffocate",		 23, 36,  8, 1, "aero suffocate myTarget",					    "Aff:Weakness"},
		{"drill",				 35, 24, 10, 1, "manifest drill myTarget",					    "Aff:Shieldbreak"},
		{"pressurewave", 23, 36,  0, 1, "manifest pressurewave myTarget",	      "Big Damage"},
		{"compress",		 23, 25,  0, 1, "aero compress myTarget",					      "Cond Damage: sensitive/stun"},
		{"vacuum",			 38, 32,  4, 1, "manifest vacuum myTarget",				      "Aff:Inhibit"},
	},
  [26] = {
    {["Class"] = "earth Elemental Lord",},
    {"smash",        16, 14,  0, 1, "terran smash myTarget",               "Small Damage"},
    {"rockfall",     33, 26,  0, 1, "manifest rockfall myTarget",          "Aff:Stun"},
    {"charge",        0, 17,  0, 1, "terran charge myTarget",              "Aff:Shieldbreak"},
    {"flurry",       23, 36,  0, 1, "terran flurry myTarget",              "Big Damage"},
    {"magmaburst",   23, 25,  0, 1, "manifest magmaburst myTarget",        "Cond Damage: clumsy/reckless"},
    {"rampart",      40, 30,  0, 1, "terran rampart myAlly",               "Ally:Defended"},  
  },
	[27] = {
		{["Class"] = "Psion",},
		{"barbedblade",	 16, 14,  0, 1, "weave barbedblade myTarget",          "Small Damage"},
		{"devistate",		 23, 36,  8, 1, "psi devastate myTarget",              "Big Damage"},
		{"regrowth",		 35, 24, 10, 1, "enact regrowth myTarget",             "Aff:Inhibit"},
		{"pulverise",     1, 17,  0, 1, "weave pulverise myTarget",	           "Aff:Shieldbreak"},
		{"whirlwind",		 23, 25,  0, 1, "weave whirlwind myTarget",            "Mid Damage"},
		{"terror",			 38, 32,  4, 1, "psi terror myTarget",                 "Aff:Fear"},
	},  
	[28] = {
		{["Class"] = "Pariah",},
		{"boil",	       16, 14,  0, 1, "blood boil myTarget",                 "Small Damage"},
		{"feast",		     23, 36,  8, 1, "swarm feast myTarget",                "Big Damage"},
		{"symphony",		 35, 24, 10, 1, "swarm symphony myTarget",             "Aff:Fear"},
		{"scour",         1, 17,  0, 1, "accursed scour myTarget",	           "Aff:Shieldbreak"},
		{"spider",		   23, 25,  0, 1, "trace spider myTarget",               "Cond Damage: inhibited/sensitive"},
		{"wail",			   38, 32,  4, 1, "accursed wail myTarget",              "Aff:Clumsiness"},
	},    
}
end
</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>Rage Skill Used</name>
					<packageName></packageName>
					<script>function zgui.rage1SkillUsed()
  zgui.RageTable[zgui.useRageClass][2][5] = 0
  zgui.brage.rage1:setValue(0, tonumber(zgui.RageTable[zgui.useRageClass][2][2]))
  resetStopWatch("rage1watch")  
  startStopWatch("rage1watch")
  enableTimer("RageSkill1")
  zgui.timers = zgui.timers or {}
  if zgui.timers.rage1timer then killTimer(zgui.timers.rage1timer) end
  zgui.timers.rage1timer = tempTimer(tonumber(zgui.RageTable[zgui.useRageClass][2][2]),
      [[
        zgui.RageTable[zgui.useRageClass][2][5]=1;
        stopStopWatch("rage1watch");
        resetStopWatch("rage1watch");
        disableTimer("RageSkill1")
        zgui.brage.rage1:setValue(0, tonumber(zgui.RageTable[zgui.useRageClass][2][2]))
      ]])
  deleteLine()
  zgui.echo("\n&lt;white&gt;BRAGE: "..zgui.RageTable[zgui.useRageClass][2][1].." "..zgui.RageTable[zgui.useRageClass][2][7])
end

function zgui.rage2SkillUsed()
  zgui.RageTable[zgui.useRageClass][3][5] = 0
  zgui.brage.rage2:setValue(0, tonumber(zgui.RageTable[zgui.useRageClass][3][2]))
  resetStopWatch("rage2watch")  
  startStopWatch("rage2watch")
  enableTimer("RageSkill2")  
  if zgui.rage2timer then killTimer(zgui.rage2timer) end
  zgui.rage2timer = tempTimer(tonumber(zgui.RageTable[zgui.useRageClass][3][2]),
      [[
        zgui.RageTable[zgui.useRageClass][3][5]=1;
        stopStopWatch("rage2watch");
        resetStopWatch("rage2watch");
        disableTimer("RageSkill2")
        zgui.brage.rage2:setValue(0, tonumber(zgui.RageTable[zgui.useRageClass][3][2]))
      ]])
  deleteLine()
  zgui.echo("\n&lt;white&gt;BRAGE: "..zgui.RageTable[zgui.useRageClass][3][1].." "..zgui.RageTable[zgui.useRageClass][3][7])
end

function zgui.rage3SkillUsed()
  zgui.RageTable[zgui.useRageClass][4][5] = 0
  zgui.brage.rage3:setValue(0, tonumber(zgui.RageTable[zgui.useRageClass][4][2]))
  resetStopWatch("rage3watch")  
  startStopWatch("rage3watch")
  enableTimer("RageSkill3")  
  if zgui.rage3timer then killTimer(zgui.rage3timer) end
  zgui.rage3timer = tempTimer(tonumber(zgui.RageTable[zgui.useRageClass][4][2]),
      [[
        zgui.RageTable[zgui.useRageClass][4][5]=1;
        stopStopWatch("rage3watch");
        resetStopWatch("rage3watch");
        disableTimer("RageSkill3")
        zgui.brage.rage3:setValue(0, tonumber(zgui.RageTable[zgui.useRageClass][4][2]))
      ]])
  deleteLine()
  zgui.echo("\n&lt;white&gt;BRAGE: "..zgui.RageTable[zgui.useRageClass][4][1].." "..zgui.RageTable[zgui.useRageClass][4][7])
end

function zgui.rage4SkillUsed()
  zgui.RageTable[zgui.useRageClass][5][5] = 0
  zgui.brage.rage4:setValue(0, tonumber(zgui.RageTable[zgui.useRageClass][5][2]))
  resetStopWatch("rage4watch")  
  startStopWatch("rage4watch")
  enableTimer("RageSkill4")  
  if zgui.rage4timer then killTimer(zgui.rage4timer) end
  zgui.rage4timer = tempTimer(tonumber(zgui.RageTable[zgui.useRageClass][5][2]),
      [[
        zgui.RageTable[zgui.useRageClass][5][5]=1;
        stopStopWatch("rage4watch");
        resetStopWatch("rage4watch");
        disableTimer("RageSkill4")
        zgui.brage.rage4:setValue(0, tonumber(zgui.RageTable[zgui.useRageClass][5][2]))
      ]])
  deleteLine()
  zgui.echo("\n&lt;white&gt;BRAGE: "..zgui.RageTable[zgui.useRageClass][5][1].." "..zgui.RageTable[zgui.useRageClass][5][7])
end

function zgui.rage5SkillUsed()
  zgui.RageTable[zgui.useRageClass][6][5] = 0
  zgui.brage.rage5:setValue(0, tonumber(zgui.RageTable[zgui.useRageClass][6][2]))
  resetStopWatch("rage5watch")  
  startStopWatch("rage5watch")
  enableTimer("RageSkill5")  
  if zgui.rage5timer then killTimer(zgui.rage5timer) end
  zgui.rage5timer = tempTimer(tonumber(zgui.RageTable[zgui.useRageClass][6][2]),
      [[
        zgui.RageTable[zgui.useRageClass][6][5]=1;
        stopStopWatch("rage5watch");
        resetStopWatch("rage5watch");
        disableTimer("RageSkill5")
        zgui.brage.rage5:setValue(0, tonumber(zgui.RageTable[zgui.useRageClass][6][2]))
      ]])
  deleteLine()
  zgui.echo("\nBRAGE: "..zgui.RageTable[zgui.useRageClass][6][1].." "..zgui.RageTable[zgui.useRageClass][6][7])
end

function zgui.rage6SkillUsed()
  zgui.RageTable[zgui.useRageClass][7][5] = 0
  zgui.brage.rage6:setValue(0, tonumber(zgui.RageTable[zgui.useRageClass][7][2]))
  resetStopWatch("rage6watch")  
  startStopWatch("rage6watch")
  enableTimer("RageSkill6")  
  if zgui.rage6timer then killTimer(zgui.rage6timer) end
  zgui.rage6timer = tempTimer(tonumber(zgui.RageTable[zgui.useRageClass][7][2]),
      [[
        zgui.RageTable[zgui.useRageClass][7][5]=1;
        stopStopWatch("rage6watch");
        resetStopWatch("rage6watch");
        disableTimer("RageSkill6")
        zgui.brage.rage6:setValue(0, tonumber(zgui.RageTable[zgui.useRageClass][7][2]))
      ]])
  deleteLine()
  zgui.echo("\n&lt;white&gt;BRAGE: "..zgui.RageTable[zgui.useRageClass][7][1].." "..zgui.RageTable[zgui.useRageClass][7][7])
end</script>
					<eventHandlerList />
				</Script>
			</ScriptGroup>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>zTrade</name>
				<packageName></packageName>
				<script>zTrade = zTrade or {}
zTrade.harvestRooms = {}

function zTrade.echo(text)
	cecho("\n&lt;cyan&gt;[&lt;magenta&gt;zTrade&lt;cyan&gt;]: &lt;NavajoWhite&gt;"..text)
end</script>
				<eventHandlerList />
				<ScriptGroup isActive="yes" isFolder="yes">
					<name>Conjuration</name>
					<packageName></packageName>
					<script>zTrade.conjuration = zTrade.conjuration or {}</script>
					<eventHandlerList />
					<Script isActive="yes" isFolder="no">
						<name>zTrade.conjuration(amount, item)</name>
						<packageName></packageName>
						<script>function zTrade.conjuration.create(amount, item) 
---------------------------------------------------------------------
  zTrade.conjuration.totalAmount = amount or 1                     -- Default 1 item
  if amount &gt;=5 then zTrade.conjuration.totalAmount = 5 end        -- 5 Items max with Artifact
---------------------------------------------------------------------  
  zTrade.conjuration.ouroboros1 = "ouroboros23502"                 -- Ouroboros for Commodities
  zTrade.conjuration.ouroboros2 = "ouroboros57255"                 -- Ouroboros for Getting Items
---------------------------------------------------------------------  
  zTrade.conjuration.created = zTrade.conjuration.created or {}    -- Empty Table For Items
---------------------------------------------------------------------
--           Create Arrays for Each Conjuration Item               --
--            Commodity Amounts - Actions and Counts               --
---------------------------------------------------------------------
  zTrade.conjuration.created.worrystone = {                        -- Worrystone
    {commodity="ice",count=(1*zTrade.conjuration.totalAmount)},
    {commodity="gold",count=(1*zTrade.conjuration.totalAmount)},
    {commodity="silver",count=(1*zTrade.conjuration.totalAmount)},
    {commodity="horn",count=(1*zTrade.conjuration.totalAmount)},
    {commodity="dust",count=(1*zTrade.conjuration.totalAmount)},
    {action="roll dice",count=5},
    {action="flipcoin",count=5},
    {action="spin around thrice",count=1},
    {action="wave feather",count=1},
    {action="square the circle",count=1},
  }
---------------------------------------------------------------------  
  zTrade.conjuration.created.fist = {                              -- Fist Sigil
    {commodity="silver",count=(1*zTrade.conjuration.totalAmount)},
    {commodity="horn",count=(2*zTrade.conjuration.totalAmount)},
    {action="chant fartak ishla spooz tran",count=3},
    {action="ring bell",count=1},
  }
---------------------------------------------------------------------  
  zTrade.conjuration.created.flame = {                             -- Flame Sigil
    {commodity="silver",count=(1*zTrade.conjuration.totalAmount)},
    {action="chant flet lhar abe minlo eec",count=3},
    {action="ring bell",count=1},
  }
---------------------------------------------------------------------  
  zTrade.conjuration.created.brooch = {                            -- Brooch of Thoth
    {commodity="ice",count=(1*zTrade.conjuration.totalAmount)},
    {commodity="dust",count=(2*zTrade.conjuration.totalAmount)},
    {commodity="horn",count=(1*zTrade.conjuration.totalAmount)},
    {commodity="silver",count=(2*zTrade.conjuration.totalAmount)},
    {action="chant mortis troy tenkla",count=1},
    {action="chant mortis troy tenklu",count=1},
    {action="chant mortis troy tenkli",count=1},
    {action="clap hands",count=3},
  }
---------------------------------------------------------------------  
  zTrade.conjuration.created.key = {                               -- Key Sigil
    {commodity="gold",count=(1*zTrade.conjuration.totalAmount)},
    {action="chant krolop escit yall",count=3},
    {action="ring bell",count=1},
  }  
---------------------------------------------------------------------  
  zTrade.conjuration.created.eye = {                               -- Eye Sigil
    {commodity="obsidian",count=(1*zTrade.conjuration.totalAmount)},
    {action="square the circle",count=1},
    {action="ring bell",count=1},
  }
---------------------------------------------------------------------  
  zTrade.conjuration.created.knife = {                             -- Knife Sigil
    {commodity="silver",count=(1*zTrade.conjuration.totalAmount)},
    {action="chant Keef nitash idca feef enla",count=3},
    {action="ring bell",count=1},
  }
---------------------------------------------------------------------  
  zTrade.conjuration.created.comprehension = {                     -- Necklace of Comprehension
    {commodity="ice",count=(2*zTrade.conjuration.totalAmount)},
    {commodity="gold",count=(3*zTrade.conjuration.totalAmount)},
    {commodity="silver",count=(4*zTrade.conjuration.totalAmount)},
    {commodity="horn",count=(3*zTrade.conjuration.totalAmount)},            
    {action="play horn",count=3},
    {action="burn incense",count=1},
    {action="wave feather",count=1},
    {action="ring bell",count=1},
    {action="roll dice",count=2},
    {action="spin around thrice",count=1},
    {action="burn incense",count=1},
    {action="crush kola",count=1},
  }    
---------------------------------------------------------------------  
  zTrade.conjuration.created.mushroom = {                          -- Mushroom Sigil
    {commodity="ice",count=(1*zTrade.conjuration.totalAmount)},
    {action="chant mil usra shal hract reed oom oon mez",count=3},
    {action="ring bell",count=1},
  }
---------------------------------------------------------------------  
  zTrade.conjuration.created.whirlwind = {                         -- Whirlwind of Vastar
    {commodity="silver",count=(1*zTrade.conjuration.totalAmount)},
    {commodity="dust",count=(1*zTrade.conjuration.totalAmount)},
    {commodity="horn",count=(1*zTrade.conjuration.totalAmount)},
    {action="chant mil usra shal hract reed oom oon mez",count=3},
    {action="spin around thrice",count=4},
    {action="wave feather",count=1},
    {action="burn incense",count=1},
    {action="spin around thrice",count=4},
  }
---------------------------------------------------------------------  
  zTrade.conjuration.created.concealment = {                       -- Orb of Concealment
    {commodity="silver",count=(5*zTrade.conjuration.totalAmount)},
    {commodity="gold",count=(1*zTrade.conjuration.totalAmount)},
    {action="wave feather",count=1},
    {action="wave arms",count=1},
    {action="flipcoin",count=1},
    {action="play horn",count=1},
    {action="point sword",count=1},
    {action="clap hands",count=1},
    {action="spin around thrice",count=1},
    {action="chant aisyalam",count=1},
    {action="spin around thrice",count=1},
    {action="clap hands",count=1},
    {action="point sword",count=1},
    {action="play horn",count=1},
    {action="flipcoin",count=1},
    {action="wave arms",count=1},
    {action="wave feather",count=1},
  }
---------------------------------------------------------------------  
  zTrade.conjuration.created.bauble = {                            -- Bauble
    {commodity="dust",count=(1*zTrade.conjuration.totalAmount)},
    {action="chant mil usra shal hract reed oom oon mez",count=3},
    {action="crush kola",count=1},
    {action="burn the polygon",count=1},
    {action="clap hands",count=1},
    {action="square the circle",count=1},
    {action="chant disei stalla rapwah cosoth tu",count=1},
  }        
---------------------------------------------------------------------  
  zTrade.conjuration.created.monolith = {                          -- Monolith Sigil
    {commodity="gold",count=(1*zTrade.conjuration.totalAmount)},
    {commodity="silver",count=(1*zTrade.conjuration.totalAmount)},
    {action="chant me ol nok oloth lilo ib te het",count=3},
    {action="ring bell",count=1},
  }      
---------------------------------------------------------------------


---------------------------------------------------------------------
  zTrade.conjuration.created.allCommands = {
    ["1"] = "ring bell",
    ["2"] = "chant "..chantPhrase,
    ["3"] = "bang drum",
    ["4"] = "spin around thrice",
    ["5"] = "light candle",
    ["6"] = "clap hands",
    ["7"] = "burn the polygon",
    ["8"] = "point sword",
    ["9"] = "burn incense",
    ["10"] = "play horn",
    ["11"] = "strum lute",
    ["12"] = "flipcoin",
    ["13"] = "roll dice",
    ["14"] = "wave arms",
    ["15"] = "crush kola",
    ["16"] = "wave feather",
    ["17"] = "square the circle"
  }  
---------------------------------------------------------------------  
  zTrade.conjuration.createCopy(zTrade.conjuration.totalAmount, item) 
end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>zTrade.conjuration.createCopy(amount, item)</name>
						<packageName></packageName>
						<script>--
-- Example: zTrade.conjuration.createCopy(5, "worrystone")
--
function zTrade.conjuration.createCopy(amount, item)
  zTrade.conjuration.ready = false
  zTrade.conjuration.tempTable = {}
  zTrade.conjuration.tempTable = table.deepcopy(zTrade.conjuration.created[item])
  local itemNameConvert = {
	  ["eye"] = "eye sigil",
  }
  zTrade.conjuration.craftedItem = "" 
  if table.contains(itemNameConvert, item) then
	  zTrade.conjuration.craftedItem = itemNameConvert[item]
	else
	 	zTrade.conjuration.craftedItem = item
	end
  function zTrade.conjuration.runConjurationCommodities()
    if conjurationtempTriggerCommodities then killTrigger(conjurationtempTriggerCommodities) end
    if not table.contains(zTrade.conjuration.tempTable, "commodity") then
      if conjurationtempTriggerActions then killTrigger(conjurationtempTriggerActions) end
      send("begin creation of "..amount.." "..zTrade.conjuration.craftedItem)
      zTrade.conjuration.runConjurationActions()
    end
    if table.contains(zTrade.conjuration.tempTable, "commodity") then    
      for i,v in ipairs(zTrade.conjuration.tempTable) do
        if v["commodity"] and v["count"] &gt; 0 then
          send("outr "..v["count"].." "..v["commodity"])
          send("put "..v["count"].." "..v["commodity"].." in "..zTrade.conjuration.ouroboros1)
          if v["count"] &gt; 1 then
            table.remove(zTrade.conjuration.tempTable, 1)
            conjurationtempTriggerCommodities = tempTrigger("balance", [[zTrade.conjuration.runConjurationCommodities()]], 1)
          else
            table.remove(zTrade.conjuration.tempTable, 1)
            zTrade.conjuration.runConjurationCommodities()
          end
        end
      end
    end
  end
  zTrade.conjuration.runConjurationCommodities()
  function zTrade.conjuration.runConjurationActions()
    if #zTrade.conjuration.tempTable &lt; 1 then
      send("end ritual")
    end
    for i,v in ipairs(zTrade.conjuration.tempTable) do
      if v["count"] and v["count"] &gt; 0 then
        send(v["action"])
        v["count"] = v["count"] -1
        if v["count"] == 0 then
          table.remove(zTrade.conjuration.tempTable, 1)
        end
        conjurationtempTriggerActions = tempTrigger("balance", [[zTrade.conjuration.runConjurationActions()]], 1)
        break
      end
    end
  end
end</script>
						<eventHandlerList />
					</Script>
				</ScriptGroup>
				<ScriptGroup isActive="yes" isFolder="yes">
					<name>Harvesting</name>
					<packageName></packageName>
					<script>zTrade.autoHarvest = zTrade.autoHarvest or {}
zTrade.autoHarvesting = zTrade.autoHarvesting or false

zTrade.harvestHerbs = {
  "ash",
  "bayberry",
  "blueberry",
  "bellwort",
  "cohosh",
  "bloodroot",
  "burdock",
  "echinacea",
  "elm",
  "ginseng",
  "ginger",
  "goldenseal",  
  "hawthorn",
  "kelp",  
  "kola",  
  "kuzu",  
  "lobelia",
  "myrrh",
  "moss",
  "pear",
  "sileris",
  "skullcap",
  "slipper", 
  "valerian",
  "weed",   
}</script>
					<eventHandlerList />
					<Script isActive="yes" isFolder="no">
						<name>zTrade.harvesting()</name>
						<packageName></packageName>
						<script>function zTrade.harvesting()
  if #zTrade.harvest &gt; 0 then
    send("setalias harvestAlias harvest "..zTrade.harvest[1].."/inr all "..zTrade.harvest[1].." ")
    send("queue addclear eqbal harvestAlias")
  elseif #zTrade.harvest == 0 then
    send("clearqueue eqbal")
  end
end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>zTrade.showHarvest()</name>
						<packageName></packageName>
						<script>function zTrade.showHarvest()
  local firstSpace, secondSpace = 25,30 
  local first,second = firstSpace,secondSpace
  local blank1 = ""
  local blank2 = ""

  zTrade.echo("Auto Harvest: ")
  cechoLink("&lt;ansi_red&gt;\[Reset "..#zTrade.harvestRooms.." Rooms\]", [[zTrade.harvestRooms = {};zTrade.echo("&lt;NavajoWhite&gt;All Harvested\/Gathered Rooms Reset")]], "Reset Rooms Already Done", true)
  if zTrade.autoHarvesting then
    cecho("\n&lt;ansi_cyan&gt;\[&lt;red&gt;X&lt;ansi_cyan&gt;\] ")
    cechoLink("&lt;NavajoWhite&gt;Auto Harvest Mode", [[zTrade.autoHarvesting = false;zTrade.showHarvest()]], "Deactivate Auto Harvest", true)
  else
    cecho("\n&lt;ansi_cyan&gt;\[ \] ")
    cechoLink("&lt;NavajoWhite&gt;Auto Harvest Mode", [[zTrade.autoHarvesting = true;zTrade.showHarvest()]], "Activate Auto Harvest", true)
  end   
  
  for i=1, #zTrade.harvestHerbs, 3 do
    if zTrade.harvestHerbs[i+3] then
      blank1 = string.rep(" ", first-#zTrade.harvestHerbs[i])
      blank2 = string.rep(" ", second-#zTrade.harvestHerbs[i+1])
      if table.contains(zTrade.autoHarvest, zTrade.harvestHerbs[i]) then
        cecho("\n&lt;ansi_cyan&gt;\[&lt;red&gt;X&lt;ansi_cyan&gt;\] ")
        cechoLink("&lt;white&gt;"..zTrade.harvestHerbs[i], [[table.remove(zTrade.autoHarvest, table.index_of(zTrade.autoHarvest, zTrade.harvestHerbs[]]..i..[[]));zTrade.showHarvest()]], "Remove Auto Harvest "..zTrade.harvestHerbs[i], true)      
      else
        cecho("\n&lt;ansi_cyan&gt;\[ \] ")
        cechoLink("&lt;white&gt;"..zTrade.harvestHerbs[i], [[table.insert(zTrade.autoHarvest, zTrade.harvestHerbs[]]..i..[[]);zTrade.showHarvest()]], "Auto Harvest "..zTrade.harvestHerbs[i], true)
      end       
      if table.contains(zTrade.autoHarvest, zTrade.harvestHerbs[i+1]) then
        cecho(blank1.."&lt;ansi_cyan&gt;\[&lt;red&gt;X&lt;ansi_cyan&gt;\] ")
        cechoLink("&lt;white&gt;"..zTrade.harvestHerbs[i+1], [[table.remove(zTrade.autoHarvest, table.index_of(zTrade.autoHarvest, zTrade.harvestHerbs[]]..(i+1)..[[]));zTrade.showHarvest()]], "Remove Auto Harvest "..zTrade.harvestHerbs[i+1], true)      
      else
        cecho(blank1.."&lt;ansi_cyan&gt;\[ \] ")
        cechoLink("&lt;white&gt;"..zTrade.harvestHerbs[i+1], [[table.insert(zTrade.autoHarvest, zTrade.harvestHerbs[]]..(i+1)..[[]);zTrade.showHarvest()]], "Auto Harvest "..zTrade.harvestHerbs[i+1], true)
      end
      if table.contains(zTrade.autoHarvest, zTrade.harvestHerbs[i+2]) then
        cecho(blank2.."&lt;ansi_cyan&gt;\[&lt;red&gt;X&lt;ansi_cyan&gt;\] ")
        cechoLink("&lt;white&gt;"..zTrade.harvestHerbs[i+2], [[table.remove(zTrade.autoHarvest, table.index_of(zTrade.autoHarvest, zTrade.harvestHerbs[]]..(i+2)..[[]));zTrade.showHarvest()]], "Remove Auto Harvest "..zTrade.harvestHerbs[i+2], true)      
      else
        cecho(blank2.."&lt;ansi_cyan&gt;\[ \] ")
        cechoLink("&lt;white&gt;"..zTrade.harvestHerbs[i+2], [[table.insert(zTrade.autoHarvest, zTrade.harvestHerbs[]]..(i+2)..[[]);zTrade.showHarvest()]], "Auto Harvest "..zTrade.harvestHerbs[i+2], true)
      end  
    elseif zTrade.harvestHerbs[i+2] then
      blank1 = string.rep(" ", first-#zTrade.harvestHerbs[i])
      blank2 = string.rep(" ", second-#zTrade.harvestHerbs[i+1])
      if table.contains(zTrade.autoHarvest, zTrade.harvestHerbs[i]) then
        cecho("\n&lt;ansi_cyan&gt;\[&lt;red&gt;X&lt;ansi_cyan&gt;\] ")
        cechoLink("&lt;white&gt;"..zTrade.harvestHerbs[i], [[table.remove(zTrade.autoHarvest, table.index_of(zTrade.autoHarvest, zTrade.harvestHerbs[]]..i..[[]));zTrade.showHarvest()]], "Remove Auto Harvest "..zTrade.harvestHerbs[i], true)      
      else
        cecho("\n&lt;ansi_cyan&gt;\[ \] ")
        cechoLink("&lt;white&gt;"..zTrade.harvestHerbs[i], [[table.insert(zTrade.autoHarvest, zTrade.harvestHerbs[]]..i..[[]);zTrade.showHarvest()]], "Auto Harvest "..zTrade.harvestHerbs[i], true)
      end       
      if table.contains(zTrade.autoHarvest, zTrade.harvestHerbs[i+1]) then
        cecho(blank1.."&lt;ansi_cyan&gt;\[&lt;red&gt;X&lt;ansi_cyan&gt;\] ")
        cechoLink("&lt;white&gt;"..zTrade.harvestHerbs[i+1], [[table.remove(zTrade.autoHarvest, table.index_of(zTrade.autoHarvest, zTrade.harvestHerbserbs[]]..(i+1)..[[]));zTrade.showHarvest()]], "Remove Auto Harvest "..zTrade.harvestHerbs[i+1], true)      
      else
        cecho(blank1.."&lt;ansi_cyan&gt;\[ \] ")
        cechoLink("&lt;white&gt;"..zTrade.harvestHerbs[i+1], [[table.insert(zTrade.autoHarvest, zTrade.harvestHerbs[]]..(i+1)..[[]);zTrade.showHarvest()]], "Auto Harvest "..zTrade.harvestHerbs[i+1], true)
      end      
    elseif zTrade.harvestHerbs[i] then
      if table.contains(zTrade.autoHarvest, zTrade.harvestHerbs[i]) then
        cecho("\n&lt;ansi_cyan&gt;\[&lt;red&gt;X&lt;ansi_cyan&gt;\] ")
        cechoLink("&lt;white&gt;"..zTrade.harvestHerbs[i], [[table.remove(zTrade.autoHarvest, table.index_of(zTrade.autoHarvest, zTrade.harvestHerbs[]]..i..[[]));zTrade.showHarvest()]], "Remove Auto Harvest "..zTrade.harvestHerbs[i], true)      
      else
        cecho("\n&lt;ansi_cyan&gt;\[ \] ")
        cechoLink("&lt;white&gt;"..zTrade.harvestHerbs[i], [[table.insert(zTrade.autoHarvest, zTrade.harvestHerbs[]]..i..[[]);zTrade.showHarvest()]], "Auto Harvest "..zTrade.harvestHerbs[i], true)
      end       
    end
  end
  echo("\n")
end</script>
						<eventHandlerList />
					</Script>
				</ScriptGroup>
				<ScriptGroup isActive="yes" isFolder="yes">
					<name>Gathering</name>
					<packageName></packageName>
					<script>zTrade.autoGather = zTrade.autoGather or {}
zTrade.autoGathering = zTrade.autoGathering or false

zTrade.gatherHerbs = {
  "grain",
  "fruit",
  "cacao",
  "sugarcane",
  "lumic",
  "olive",
  "nut",
}</script>
					<eventHandlerList />
					<Script isActive="yes" isFolder="no">
						<name>zTrade.gathering()</name>
						<packageName></packageName>
						<script>function zTrade.gathering()
  if #zTrade.gather &gt; 0 then
    send("setalias harvestAlias gather "..zTrade.gather[1].."/inr all "..zTrade.gather[1].." ")
    send("queue addclear eqbal harvestAlias")
  elseif #zTrade.gather == 0 then
    send("clearqueue eqbal")
  end
end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>zTrade.showGather()</name>
						<packageName></packageName>
						<script>function zTrade.showGather()
  local firstSpace, secondSpace = 25,30 
  local first,second = firstSpace,secondSpace
  local blank1 = ""
  local blank2 = ""
  
  zTrade.echo("Auto Gather: ")
  cechoLink("&lt;ansi_red&gt;\[Reset "..#zTrade.harvestRooms.." Rooms\]", [[zTrade.harvestRooms = {};zTrade.echo("&lt;NavajoWhite&gt;All Harvested\/Gathered Rooms Reset")]], "Reset Rooms Already Done", true)
  if zTrade.autoGathering then
    cecho("\n&lt;ansi_cyan&gt;\[&lt;red&gt;X&lt;ansi_cyan&gt;\] ")
    cechoLink("&lt;NavajoWhite&gt;Auto Gather Mode", [[zTrade.autoGathering = false;zTrade.showGather()]], "Deactivate Auto Gather", true)
  else
    cecho("\n&lt;ansi_cyan&gt;\[ \] ")
    cechoLink("&lt;NavajoWhite&gt;Auto Gather Mode", [[zTrade.autoGathering = true;zTrade.showGather()]], "Activate Auto Gather", true)
  end    
  
  for i=1, #zTrade.gatherHerbs, 3 do
    if zTrade.gatherHerbs[i+3] then
      blank1 = string.rep(" ", first-#zTrade.gatherHerbs[i])
      blank2 = string.rep(" ", second-#zTrade.gatherHerbs[i+1])
      if table.contains(zTrade.autoGather, zTrade.gatherHerbs[i]) then
        cecho("\n&lt;ansi_cyan&gt;\[&lt;red&gt;X&lt;ansi_cyan&gt;\] ")
        cechoLink("&lt;white&gt;"..zTrade.gatherHerbs[i], [[table.remove(zTrade.autoGather, table.index_of(zTrade.autoGather, zTrade.gatherHerbs[]]..i..[[]));zTrade.showGather()]], "Remove Auto Gather "..zTrade.gatherHerbs[i], true)      
      else
        cecho("\n&lt;ansi_cyan&gt;\[ \] ")
        cechoLink("&lt;white&gt;"..zTrade.gatherHerbs[i], [[table.insert(zTrade.autoGather, zTrade.gatherHerbs[]]..i..[[]);zTrade.showGather()]], "Auto Gather "..zTrade.gatherHerbs[i], true)
      end  
      if table.contains(zTrade.autoGather, zTrade.gatherHerbs[i+1]) then
        cecho(blank1.."&lt;ansi_cyan&gt;\[&lt;red&gt;X&lt;ansi_cyan&gt;\] ")
        cechoLink("&lt;white&gt;"..zTrade.gatherHerbs[i+1], [[table.remove(zTrade.autoGather, table.index_of(zTrade.autoGather, zTrade.gatherHerbs[]]..(i+1)..[[]));zTrade.showGather()]], "Remove Auto Gather "..zTrade.gatherHerbs[i+1], true)      
      else
        cecho(blank1.."&lt;ansi_cyan&gt;\[ \] ")
        cechoLink("&lt;white&gt;"..zTrade.gatherHerbs[i+1], [[table.insert(zTrade.autoGather, zTrade.gatherHerbs[]]..(i+1)..[[]);zTrade.showGather()]], "Auto Gather "..zTrade.gatherHerbs[i+1], true)
      end
      if table.contains(zTrade.autoGather, zTrade.gatherHerbs[i+2]) then
        cecho(blank2.."&lt;ansi_cyan&gt;\[&lt;red&gt;X&lt;ansi_cyan&gt;\] ")
        cechoLink("&lt;white&gt;"..zTrade.gatherHerbs[i+2], [[table.remove(zTrade.autoGather, table.index_of(zTrade.autoGather, zTrade.gatherHerbs[]]..(i+2)..[[]));zTrade.showGather()]], "Remove Auto Gather "..zTrade.gatherHerbs[i+2], true)      
      else
        cecho(blank2.."&lt;ansi_cyan&gt;\[ \] ")
        cechoLink("&lt;white&gt;"..zTrade.gatherHerbs[i+2], [[table.insert(zTrade.autoGather, zTrade.gatherHerbs[]]..(i+2)..[[]);zTrade.showGather()]], "Auto Gather "..zTrade.gatherHerbs[i+2], true)
      end       
    elseif zTrade.gatherHerbs[i+2] then
      blank1 = string.rep(" ", first-#zTrade.gatherHerbs[i])
      blank2 = string.rep(" ", second-#zTrade.gatherHerbs[i+1])
      if table.contains(zTrade.autoGather, zTrade.gatherHerbs[i]) then
        cecho("\n&lt;ansi_cyan&gt;\[&lt;red&gt;X&lt;ansi_cyan&gt;\] ")
        cechoLink("&lt;white&gt;"..zTrade.gatherHerbs[i], [[table.remove(zTrade.autoGather, table.index_of(zTrade.autoGather, zTrade.gatherHerbs[]]..i..[[]));zTrade.showGather()]], "Remove Auto Gather "..zTrade.gatherHerbs[i], true)      
      else
        cecho(blank1.."&lt;ansi_cyan&gt;\[ \] ")
        cechoLink("&lt;white&gt;"..zTrade.gatherHerbs[i], [[table.insert(zTrade.autoGather, zTrade.gatherHerbs[]]..i..[[]);zTrade.showGather()]], "Auto Gather "..zTrade.gatherHerbs[i], true)
      end
      if table.contains(zTrade.autoGather, zTrade.gatherHerbs[i+1]) then
        cecho(blank1.."&lt;ansi_cyan&gt;\[&lt;red&gt;X&lt;ansi_cyan&gt;\] ")
        cechoLink("&lt;white&gt;"..zTrade.gatherHerbs[i+1], [[table.remove(zTrade.autoGather, table.index_of(zTrade.autoGather, zTrade.gatherHerbs[]]..(i+1)..[[]));zTrade.showGather()]], "Remove Auto Gather "..zTrade.gatherHerbs[i+1], true)      
      else
        cecho("\n&lt;ansi_cyan&gt;\[ \] ")
        cechoLink("&lt;white&gt;"..zTrade.gatherHerbs[i+1], [[table.insert(zTrade.autoGather, zTrade.gatherHerbs[]]..(i+1)..[[]);zTrade.showGather()]], "Auto Gather "..zTrade.gatherHerbs[i+1], true)
      end      
    elseif zTrade.gatherHerbs[i] then  
      if table.contains(zTrade.autoGather, zTrade.gatherHerbs[i]) then
        cecho("\n&lt;ansi_cyan&gt;\[&lt;red&gt;X&lt;ansi_cyan&gt;\] ")
        cechoLink("&lt;white&gt;"..zTrade.gatherHerbs[i], [[table.remove(zTrade.autoGather, table.index_of(zTrade.autoGather, zTrade.gatherHerbs[]]..i..[[]));zTrade.showGather()]], "Remove Auto Gather "..zTrade.gatherHerbs[i], true)      
      else
        cecho("\n&lt;ansi_cyan&gt;\[ \] ")
        cechoLink("&lt;white&gt;"..zTrade.gatherHerbs[i], [[table.insert(zTrade.autoGather, zTrade.gatherHerbs[]]..i..[[]);zTrade.showGather()]], "Auto Gather "..zTrade.gatherHerbs[i], true)
      end
    end
  end
  echo("\n")
end</script>
						<eventHandlerList />
					</Script>
				</ScriptGroup>
				<Script isActive="yes" isFolder="no">
					<name>zTrade.roomPlants()</name>
					<packageName></packageName>
					<script>function zTrade.roomPlants()
-- Auto Harvest/Gather
  if not table.contains(zTrade.harvestRooms, gmcp.Room.Info.num) then
    if zTrade.autoHarvesting or zTrade.autoGathering then
      table.insert(zTrade.harvestRooms, gmcp.Room.Info.num)
      send("plants")
    end
  end
end
registerAnonymousEventHandler("gmcp.Room.Info", "zTrade.roomPlants")</script>
					<eventHandlerList />
				</Script>
			</ScriptGroup>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>Ship</name>
				<packageName></packageName>
				<script></script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>buildShip()</name>
					<packageName></packageName>
					<script>function zgui.buildShip()
	zgui.shipmode = false
	zgui.ship = {}
  zgui.shipSize = zgui.shipSize or 9  
  zgui.ship.windDirection = ""
  zgui.ship.windSpeed = 0
  zgui.ship.direction = ""
  zgui.ship.speed = 0
	zgui.ship.hullHealth = 10
	zgui.ship.sailHealth = 10
  zgui.buildShipguages()
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>buildShipguages()</name>
					<packageName></packageName>
					<script>function zgui.buildShipguages()

  --Create the ship Adjustable
  zgui.ship.window = Adjustable.Container:new({
    name = "zgui.ship.window",
    x = 0, y = 0,
    width = "50%",
    height = "50%",  
    adjLabelstyle = zgui.adjLabelstyle,
    buttonstyle=[[
      QLabel{ border-radius: 5px; background-color: rgba(140,140,140,100%);}
      QLabel::hover{ background-color: rgba(160,160,160,50%);}
    ]],
    buttonFontSize = 10,
    buttonsize = 15,          
  },main)
  zgui.ship.window:changeMenuStyle("dark")

  --Create the ship container
  zgui.ship.container = Geyser.Container:new({
    name = "zgui.ship.back",
    x = 0, y = 0,
    width = "100%",
    height = "100%",        
  },zgui.ship.window)  

	zgui.ship.shiphpbar = Geyser.Gauge:new({
	  name="shiphpbar",
	  x=0, y=0,
	  width="100%", height="20%",
	  fgColor = "black",
	},zgui.ship.container)

	zgui.ship.shipshpbar = Geyser.Gauge:new({
	  name="shipshpbar",
	  x=0, y="25%",
	  width="100%", height="20%",
	  fgColor = "black",
	},zgui.ship.container)
  
	zgui.ship.shipDisplay = Geyser.MiniConsole:new({
	  name="shipDisplay",
	  x=0, y="55%",
	  width="100%", height="45%",
	  fgColor = "white",
	},zgui.ship.container)
  setBackgroundColor("shipDisplay", 0,0,0,255)  
  setFontSize("shipDisplay", (zgui.mapSize-1))	
  
	zgui.ship.shipshpbar:setValue(math.random(1,100),100)
	zgui.ship.shipshpbar:setValue(zgui.ship.sailHealth, 100, "&lt;b&gt;Sails: ".. zgui.ship.sailHealth .." / " .. "100" .. "&lt;/b&gt;")
	
	zgui.ship.shiphpbar:setValue(math.random(1,100),100)
	zgui.ship.shiphpbar:setValue(zgui.ship.hullHealth, 100, "&lt;b&gt;Hull: ".. zgui.ship.hullHealth .." / " .. "100" .. "&lt;/b&gt;")
	
	zgui.ship.shiphpbar.front:setStyleSheet([[
		background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #98f041, stop: 0.1 #8cf029, stop: 0.49 #66cc00, stop: 0.5 #52a300, stop: 1 #66cc00);
		border-top: 1px black solid;
		border-left: 1px black solid;
		border-bottom: 1px black solid;
		border-radius: 7;
		padding: 3px;
	]])
	
	zgui.ship.shiphpbar.back:setStyleSheet([[
		background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #555555, stop: 0.1 #555555, stop: 0.49 #333333, stop: 0.5 #333333, stop: 1 #555555);
		border-width: 1px;
		border-color: black;
		border-style: solid;
		border-radius: 7;
		padding: 3px;
	]])
 

	zgui.ship.shipshpbar.front:setStyleSheet([[
		background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #98f041, stop: 0.1 #8cf029, stop: 0.49 #66cc00, stop: 0.5 #52a300, stop: 1 #66cc00);
		border-top: 1px black solid;
		border-left: 1px black solid;
		border-bottom: 1px black solid;
		border-radius: 7;
		padding: 3px;
	]])
	
	zgui.ship.shipshpbar.back:setStyleSheet([[
		background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #555555, stop: 0.1 #555555, stop: 0.49 #333333, stop: 0.5 #333333, stop: 1 #555555);
		border-width: 1px;
		border-color: black;
		border-style: solid;
		border-radius: 7;
		padding: 3px;
	]])
  
  setFontSize("shipDisplay", zgui.shipSize)
  zgui.ship.window:setTitle("Ship Status","gray")
  zgui.ship.window:show()  
  
  if not table.contains(zgui.modules, "Ship") then table.insert(zgui.modules, "Ship") end  
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>showShip()</name>
					<packageName></packageName>
					<script>function zgui.showShip()
clearWindow("shipDisplay")
cecho("shipDisplay", "Heading: "..zgui.ship.windDirection.." | Speed: "..zgui.ship.speed.." | Wind: "..zgui.ship.windDirection.." | Wind Speed: "..zgui.ship.windSpeed)

if zgui.ship.hullHealth &lt; 50 then
	zgui.ship.shiphpbar.front:setStyleSheet([[
	background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #f04141, stop: 0.1 #ef2929, stop: 0.49 #cc0000, stop: 0.5 #a40000, stop: 1 #cc0000);
	    border-top: 1px black solid;
	    border-left: 1px black solid;
	    border-bottom: 1px black solid;
	    border-radius: 7;
	    padding: 3px;
	]])
	zgui.ship.shiphpbar.back:setStyleSheet([[
		 background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #555555, stop: 0.1 #555555, stop: 0.49 #333333, stop: 0.5 #333333, stop: 1 #555555);
	    border-width: 1px;
	    border-color: black;
	    border-style: solid;
	    border-radius: 7;
   		 padding: 3px;
	]])
	else
	zgui.ship.shiphpbar.front:setStyleSheet([[
	    background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #98f041, stop: 0.1 #8cf029, stop: 0.49 #66cc00, stop: 0.5 #52a300, stop: 1 #66cc00);
		  border-top: 1px black solid;
	    border-left: 1px black solid;
	    border-bottom: 1px black solid;
	    border-radius: 7;
	    padding: 3px;
	]])
	zgui.ship.shiphpbar.back:setStyleSheet([[
		 background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #555555, stop: 0.1 #555555, stop: 0.49 #333333, stop: 0.5 #333333, stop: 1 #555555);
	    border-width: 1px;
	    border-color: black;
	    border-style: solid;
	    border-radius: 7;
   		 padding: 3px;
	]])
end
 
if zgui.ship.sailHealth &lt; 50 then
	zgui.ship.shipshpbar.front:setStyleSheet([[
		background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #f04141, stop: 0.1 #ef2929, stop: 0.49 #cc0000, stop: 0.5 #a40000, stop: 1 #cc0000);
		border-top: 1px black solid;
	  border-left: 1px black solid;
	  border-bottom: 1px black solid;
	  border-radius: 7;
	  padding: 3px;
	]])
	zgui.ship.shipshpbar.back:setStyleSheet([[
		 background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #555555, stop: 0.1 #555555, stop: 0.49 #333333, stop: 0.5 #333333, stop: 1 #555555);
	    border-width: 1px;
	    border-color: black;
	    border-style: solid;
	    border-radius: 7;
   		 padding: 3px;
	]])
	else
	zgui.ship.shipshpbar.front:setStyleSheet([[
	    background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #98f041, stop: 0.1 #8cf029, stop: 0.49 #66cc00, stop: 0.5 #52a300, stop: 1 #66cc00);
		 border-top: 1px black solid;
	    border-left: 1px black solid;
	    border-bottom: 1px black solid;
	    border-radius: 7;
	    padding: 3px;
	]])
	zgui.ship.shipshpbar.back:setStyleSheet([[
		 background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #555555, stop: 0.1 #555555, stop: 0.49 #333333, stop: 0.5 #333333, stop: 1 #555555);
	    border-width: 1px;
	    border-color: black;
	    border-style: solid;
	    border-radius: 7;
   		 padding: 3px;
	]])
end
end</script>
					<eventHandlerList />
				</Script>
			</ScriptGroup>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>zHelp</name>
				<packageName></packageName>
				<script></script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>buildHelp</name>
					<packageName></packageName>
					<script>function zgui.buildHelp()
  zgui.helpSize = zgui.helpSize or 9
  zgui.help = {}

  --Create the main Adjustable
  zgui.help.window = Adjustable.Container:new({
    name = "zgui.help.window",
    x = 0, y = 0,
    width = "50%",
    height = "50%",  
    adjLabelstyle = zgui.adjLabelstyle,
    buttonstyle=[[
      QLabel{ border-radius: 5px; background-color: rgba(140,140,140,100%);}
      QLabel::hover{ background-color: rgba(160,160,160,50%);}
    ]],
    buttonFontSize = 10,
    buttonsize = 15,          
  },main)
  zgui.help.window:changeMenuStyle("dark")

  --Create the help container
  zgui.help.container = Geyser.Container:new({
    name = "zgui.help.back",
    x = 0, y = 0,
    width = "100%",
    height = "100%",        
  },zgui.help.window)  

  --Create the help Console
  zgui.help.console = Geyser.MiniConsole:new({
    name = "helpDisplay",
    x = 0, y = "25%",
    autoWrap = true,
    scrollBar = true,
    width = "100%",
    height = "75%",
    color="black",
  },zgui.help.container)

---------------------------------------------------------
-- Window Style
  zgui.help.windowStyle = Geyser.Label:new({
    name="windowStyle",
    x="1%",y="7%",
    height="5%",width="98%",
    nestable=true,
    message="&lt;center&gt;Window Style: "..zgui.useStyle.."&lt;/center&gt;"
  },zgui.help.container)

  for k,v in pairs(zgui.styles) do
    zgui.help.windowStyle[k] = zgui.help.windowStyle:addChild({
      name=k.."WindowStyle",
      x="1%",y="1%",
      height=40,width=200,
      layoutDir="BV",
      flyOut=true,
      message="&lt;center&gt;"..k.."&lt;/center&gt;"
    })  
    zgui.help.windowStyle[k]:setStyleSheet(zgui.adjLabelstyle)
    zgui.help.windowStyle[k]:setClickCallback("zgui.styleSwap", k)    
  end
---------------------------------------------------------
-- Toggle Darkmode
  zgui.help.darkmode = Geyser.Label:new({
    name="darkmode",
    x="1%",y="13%",
    height="5%",width="98%",
    message="&lt;center&gt;Toggle Darkmode&lt;/center&gt;"
  },zgui.help.container)
  zgui.help.darkmode:setClickCallback("zgui.darkmodeToggle")
  
---------------------------------------------------------
-- Map Explorer
  zgui.help.mapExplorer = Geyser.Label:new({
    name="mapExplorer",
    x="1%",y="19%",
    height="5%",width="98%",
    message="&lt;center&gt;Map Explorer&lt;/center&gt;"
  },zgui.help.container)
  zgui.help.mapExplorer:setClickCallback("zgui.mapExplorer")
    
---------------------------------------------------------
-- Close All Windows
  zgui.help.closeAll = Geyser.Label:new({
    name="closeAll",
    x="35%",y="1%",
    height="5%",width="31%",
    message="&lt;center&gt;Close ALL&lt;/center&gt;"
  },zgui.help.container)
  zgui.help.closeAll:setClickCallback("zgui.closeAllWindows")

---------------------------------------------------------
-- Load Save Layout Buttons
  zgui.help.load = Geyser.Label:new({
    name="loadLayout",
    x="1%",y="1%",
    height="5%",width="33%",
    nestable=true,
    message="&lt;center&gt;Load&lt;/center&gt;"
  },zgui.help.container)
  
  zgui.help.load.default = zgui.help.load:addChild({
    name="loadDefaultLayout",
    x="1%",y="1%",
    height=40,width=200,
    layoutDir="BV",
    flyOut=true,
    message="Load DEFAULT Layout"
  })  
  zgui.help.load.default:setStyleSheet(zgui.adjLabelstyle)
  zgui.help.load.default:setClickCallback("zgui.loadDefault")

  zgui.help.load.combat = zgui.help.load:addChild({
    name="loadCombatLayout",
    x="1%",y="1%",
    height=40,width=200,
    layoutDir="BV",
    flyOut=true,
    message="Load COMBAT Layout"
  }) 
  zgui.help.load.combat:setStyleSheet(zgui.adjLabelstyle)
  zgui.help.load.combat:setClickCallback("zgui.loadCombat")

  zgui.help.load.hunting = zgui.help.load:addChild({
    name="loadHuntingLayout",
    x="1%",y="1%",
    height=40,width=200,
    layoutDir="BV",
    flyOut=true,
    message="Load HUNTING Layout"
  }) 
  zgui.help.load.hunting:setStyleSheet(zgui.adjLabelstyle)
  zgui.help.load.hunting:setClickCallback("zgui.loadHunting")
  
  zgui.help.load.sailing = zgui.help.load:addChild({
    name="loadSailingLayout",
    x="1%",y="1%",
    height=40,width=200,
    layoutDir="BV",
    flyOut=true,
    message="Load SAILING Layout"
  })  
  zgui.help.load.sailing:setStyleSheet(zgui.adjLabelstyle) 
  zgui.help.load.sailing:setClickCallback("zgui.loadSailing")
  
  zgui.help.save = Geyser.Label:new({
    name="saveLayout",
    x="67%",y="1%",
    height="5%",width="32%",
    nestable=true,
    message="&lt;center&gt;Save&lt;/center&gt;"
  },zgui.help.container)

  zgui.help.save.default = zgui.help.save:addChild({
    name="saveDefaultLayout",
    x="1%",y="1%",
    height=40,width=200,
    layoutDir="BV",
    flyOut=true,
    message="Save DEFAULT Layout",
  })  
  zgui.help.save.default:setStyleSheet(zgui.adjLabelstyle)
  zgui.help.save.default:setClickCallback("zgui.saveDefault")

  zgui.help.save.combat = zgui.help.save:addChild({
    name="saveCombatLayout",
    x="1%",y="1%",
    height=40,width=200,
    layoutDir="BV",
    flyOut=true,
    message="Save COMBAT Layout"
  }) 
  zgui.help.save.combat:setStyleSheet(zgui.adjLabelstyle)
  zgui.help.save.combat:setClickCallback("zgui.saveCombat")

  zgui.help.save.hunting = zgui.help.save:addChild({
    name="saveHuntingLayout",
    x="1%",y="1%",
    height=40,width=200,
    layoutDir="BV",
    flyOut=true,
    message="Save HUNTING Layout"
  }) 
  zgui.help.save.hunting:setStyleSheet(zgui.adjLabelstyle)
  zgui.help.save.hunting:setClickCallback("zgui.saveHunting")
  
  zgui.help.save.sailing = zgui.help.save:addChild({
    name="saveSailingLayout",
    x="1%",y="1%",
    height=40,width=200,
    layoutDir="BV",
    flyOut=true,
    message="Save SAILING Layout"
  }) 
  zgui.help.save.sailing:setStyleSheet(zgui.adjLabelstyle)
  zgui.help.save.sailing:setClickCallback("zgui.saveSailing")
    
  setFontSize("helpDisplay", zgui.helpSize)
  zgui.help.window:setTitle("Help","gray")
  zgui.help.window:show()  
  
  if not table.contains(zgui.modules, "Help") then
    table.insert(zgui.modules, "Help")
  end
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>showHelp</name>
					<packageName></packageName>
					<script>function zgui.showHelp()
  --zgui.buildHelp()
  clearWindow("helpDisplay")
  cecho("helpDisplay", "\n&lt;white&gt; -- Installed Modules --")
  for i=1, #zgui.modules, 1 do
    if zgui.modules[i] ~= "Help" then
      if zgui[string.lower(zgui.modules[i])].window.hidden then
        cechoLink("helpDisplay", "\n&lt;red&gt;OFF&lt;SteelBlue&gt; - "..zgui.modules[i], [[zgui.build]]..zgui.modules[i]..[[();zgui.showHelp()]], "Turn Off", true)
      else
        cechoLink("helpDisplay", "\n&lt;green&gt;ON &lt;SteelBlue&gt; - "..zgui.modules[i], [[zgui.]]..string.lower(zgui.modules[i])..[[.window.hidden="true";zgui.]]..string.lower(zgui.modules[i])..[[.window:hide();zgui.showHelp()]], "Turn On", true)
      end
    end
  end    
end
registerAnonymousEventHandler("gmcp.Char.Vitals", "zgui.showHelp")
</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>Help Click Callbacks</name>
					<packageName></packageName>
					<script>function zgui.styleSwap(style)
  zgui.useStyle = style
  zgui.restyle()
end

function zgui.mapExplorer()
  expandAlias("/explore-map")
end

function zgui.darkmodeToggle()
  if zgui.darkmode then
    DarkThemeUninstall()
    expandAlias("zhelp")
  else
    DarkTheme()
    expandAlias("zhelp")
  end
end

function zgui.closeAllWindows()
  Adjustable.Container.hideAll()
end

function zgui.loadDefault()
  Adjustable.Container:loadAll("default")
end

function zgui.loadCombat()
  Adjustable.Container:loadAll("combat")
end

function zgui.loadHunting()
  Adjustable.Container:loadAll("hunting")
end

function zgui.loadSailing()
  Adjustable.Container:loadAll("sailing")
end

function zgui.saveDefault()
  Adjustable.Container:saveAll("default")
end

function zgui.saveCombat()
  Adjustable.Container:saveAll("combat")
end

function zgui.saveHunting()
  Adjustable.Container:saveAll("hunting")
end

function zgui.saveSailing()
  Adjustable.Container:saveAll("sailing")
end</script>
					<eventHandlerList />
				</Script>
			</ScriptGroup>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>HealthBars</name>
				<packageName></packageName>
				<script></script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>buildHealthbar</name>
					<packageName></packageName>
					<script>function zgui.buildHealthbar()
  zgui.healthbarSize = zgui.healthbarSize or 9
  zgui.healthbar = {}

  --Create the main Adjustable
  zgui.healthbar.window = Adjustable.Container:new({
    name = "zgui.healthbar.window",
    x = 0, y = 0,
    width = "50%",
    height = "50%",  
    adjLabelstyle = "border-radius: 0px;background-color:rgba(50,50,50,0%);",
    buttonstyle=[[
      QLabel{ border-radius: 5px; background-color: rgba(140,140,140,100%);}
      QLabel::hover{ background-color: rgba(160,160,160,50%);}
    ]],
    buttonFontSize = 5,
    buttonsize = 10,        
  },main)
  zgui.healthbar.window:changeMenuStyle("dark")

  --Create the healthbar container
  zgui.healthbar.container = Geyser.Container:new({
    name = "zgui.healthbar.back",
    x = 0, y = 0,
    width = "100%",
    height = "100%",        
  },zgui.healthbar.window)  

  --Create the healthbar guage
  zgui.healthbar.healthbar = Geyser.Gauge:new({
    name = "healthbarDisplay",
    x="0%", y="0%",
    width="100%", height="100%",
  },zgui.healthbar.container)
  
  zgui.healthbar.healthbar:setValue(math.random(1,100),100)

	zgui.healthbar.healthbar.front:setStyleSheet([[
		background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #00ff2e, stop: 0.2 #00d423, stop: 0.5 #008a00, stop: 0.7 #005100, stop: 0.9 #001800);
		border-top: 1px black solid;
		border-left: 1px black solid;
		border-bottom: 1px black solid;
		border-radius: 7;
		padding: 3px;
	]])
	
	zgui.healthbar.healthbar.back:setStyleSheet([[
		background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #333333, stop: 0.1 #333333, stop: 0.49 #111111, stop: 0.5 #111111, stop: 1 #333333);
		border-width: 1px;
		border-color: black;
		border-style: solid;
		border-radius: 7;
		padding: 3px;
	]])

  setFontSize("healthbarDisplay", zgui.healthbarSize)
  zgui.healthbar.window:setTitle("Health Bar","gray")
  zgui.healthbar.window:show()  
  
  if not table.contains(zgui.modules, "Healthbar") then
    table.insert(zgui.modules, "Healthbar")
  end
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>buildManabar</name>
					<packageName></packageName>
					<script>function zgui.buildManabar()
  zgui.manabarSize = zgui.manabarSize or 9
  zgui.manabar = {}

  --Create the main Adjustable
  zgui.manabar.window = Adjustable.Container:new({
    name = "zgui.manabar.window",
    x = 0, y = 0,
    width = "50%",
    height = "50%",  
    adjLabelstyle = "border-radius: 0px;background-color:rgba(50,50,50,0%);",
    buttonstyle=[[
      QLabel{ border-radius: 5px; background-color: rgba(140,140,140,100%);}
      QLabel::hover{ background-color: rgba(160,160,160,50%);}
    ]],
    buttonFontSize = 5,
    buttonsize = 10,          
  },main)
  zgui.manabar.window:changeMenuStyle("dark")

  --Create the manabar container
  zgui.manabar.container = Geyser.Container:new({
    name = "zgui.manabar.back",
    x = 0, y = 0,
    width = "100%",
    height = "100%",        
  },zgui.manabar.window)  

  --Create the manabar guage
  zgui.manabar.manabar = Geyser.Gauge:new({
    name = "manabarDisplay",
    x="0%", y="0%",
    width="100%", height="100%",
  },zgui.manabar.container)
  
  zgui.manabar.manabar:setValue(math.random(1,100),100)

	zgui.manabar.manabar.front:setStyleSheet([[
		background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #007eff, stop: 0.2 #0059d2, stop: 0.5 #003fb1, stop: 0.7 #002892, stop: 0.9 #001273);
		border-top: 1px black solid;
		border-left: 1px black solid;
		border-bottom: 1px black solid;
		border-radius: 7;
		padding: 3px;
	]])
	
	zgui.manabar.manabar.back:setStyleSheet([[
		background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #333333, stop: 0.1 #333333, stop: 0.49 #111111, stop: 0.5 #111111, stop: 1 #333333);
		border-width: 1px;
		border-color: black;
		border-style: solid;
		border-radius: 7;
		padding: 3px;
	]])

  setFontSize("manabarDisplay", zgui.manabarSize)
  zgui.manabar.window:setTitle("Mana Bar","gray")
  zgui.manabar.window:show()  
  
  if not table.contains(zgui.modules, "Manabar") then
    table.insert(zgui.modules, "Manabar")
  end
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>showHealthbar</name>
					<packageName></packageName>
					<script>function zgui.showHealthbar()
  if tonumber(gmcp.Char.Vitals.hp) &gt; tonumber(gmcp.Char.Vitals.maxhp) then
  	zgui.healthbar.healthbar.front:setStyleSheet([[
		background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #00ff2e, stop: 0.2 #00d423, stop: 0.5 #008a00, stop: 0.7 #005100, stop: 0.9 #001800);
		border-top: 1px black solid;
		border-left: 1px black solid;
		border-bottom: 1px black solid;
		border-radius: 7;
		padding: 3px;
	  ]])  
    zgui.healthbar.healthbar:setValue(100, 100, "&lt;b&gt;&lt;center&gt;  "..tonumber(gmcp.Char.Vitals.hp).. "&lt;/center&gt;&lt;/b&gt;")
  elseif tonumber(gmcp.Char.Vitals.hp) &lt;= (tonumber(gmcp.Char.Vitals.maxhp)/2) then
    zgui.healthbar.healthbar:setValue(tonumber(gmcp.Char.Vitals.hp), tonumber(gmcp.Char.Vitals.maxhp), "&lt;b&gt;  "..tonumber(gmcp.Char.Vitals.hp).. "&lt;/b&gt;")
    zgui.healthbar.healthbar.front:setStyleSheet([[
		  background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #621616, stop: 0.1 #640a0a, stop: 0.49 #8a0000, stop: 0.5 #560000, stop: 1 #260000);
  		border-top: 1px black solid;
	  	border-left: 1px black solid;
		  border-bottom: 1px black solid;
		  border-radius: 7;
		  padding: 3px;
	  ]])
  else
  	zgui.healthbar.healthbar.front:setStyleSheet([[
		background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #00ff2e, stop: 0.2 #00d423, stop: 0.5 #008a00, stop: 0.7 #005100, stop: 0.9 #001800);
		border-top: 1px black solid;
		border-left: 1px black solid;
		border-bottom: 1px black solid;
		border-radius: 7;
		padding: 3px;
	  ]])
    zgui.healthbar.healthbar:setValue(tonumber(gmcp.Char.Vitals.hp), tonumber(gmcp.Char.Vitals.maxhp), "&lt;b&gt;&lt;center&gt;  "..tonumber(gmcp.Char.Vitals.hp).. "&lt;/center&gt;&lt;/b&gt;")
  end
end
registerAnonymousEventHandler("gmcp.Char.Vitals", "zgui.showHealthbar")</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>showManabar</name>
					<packageName></packageName>
					<script>function zgui.showManabar()
  if tonumber(gmcp.Char.Vitals.mp) &gt; tonumber(gmcp.Char.Vitals.maxmp) then
  	zgui.manabar.manabar.front:setStyleSheet([[
		  background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #007eff, stop: 0.2 #0059d2, stop: 0.5 #003fb1, stop: 0.7 #002892, stop: 0.9 #001273);
		  border-top: 1px black solid;
		  border-left: 1px black solid;
		  border-bottom: 1px black solid;
		  border-radius: 7;
		  padding: 3px;
	  ]])  
    zgui.manabar.manabar:setValue(100, 100, "&lt;b&gt;&lt;center&gt;  "..tonumber(gmcp.Char.Vitals.mp).. "&lt;/center&gt;&lt;/b&gt;")
  elseif tonumber(gmcp.Char.Vitals.mp) &lt;= (tonumber(gmcp.Char.Vitals.maxmp)/2) then
    zgui.manabar.manabar:setValue(tonumber(gmcp.Char.Vitals.mp), tonumber(gmcp.Char.Vitals.maxmp), "&lt;b&gt;  "..tonumber(gmcp.Char.Vitals.mp).. "&lt;/b&gt;")
    zgui.manabar.manabar.front:setStyleSheet([[
		  background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #621616, stop: 0.1 #640a0a, stop: 0.49 #8a0000, stop: 0.5 #560000, stop: 1 #260000);
  		border-top: 1px black solid;
	  	border-left: 1px black solid;
		  border-bottom: 1px black solid;
		  border-radius: 7;
		  padding: 3px;
	  ]])
  else
  	zgui.manabar.manabar.front:setStyleSheet([[
		  background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #007eff, stop: 0.2 #0059d2, stop: 0.5 #003fb1, stop: 0.7 #002892, stop: 0.9 #001273);
		  border-top: 1px black solid;
		  border-left: 1px black solid;
		  border-bottom: 1px black solid;
		  border-radius: 7;
		  padding: 3px;
	  ]])
    zgui.manabar.manabar:setValue(tonumber(gmcp.Char.Vitals.mp), tonumber(gmcp.Char.Vitals.maxmp), "&lt;b&gt;&lt;center&gt;  "..tonumber(gmcp.Char.Vitals.mp).. "&lt;/center&gt;&lt;/b&gt;")
  end
end
registerAnonymousEventHandler("gmcp.Char.Vitals", "zgui.showManabar")

</script>
					<eventHandlerList />
				</Script>
			</ScriptGroup>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>Map Explorer</name>
				<packageName></packageName>
				<script></script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>map-exporter</name>
					<packageName></packageName>
					<script>MapExporter = MapExporter or {
  areas = {},
  dir = getMudletHomeDir() .. "/zGUI/MudletMapExplorer-1/"
}

local fileLocation = MapExporter.dir .. "index.html"
local fileURL = "file:///" .. fileLocation
MapExporter.fileLocation = fileLocation
MapExporter.fileURL = fileURL

function MapExporter:echoUrl()
  cecho("&lt;blue&gt;(&lt;white&gt;Map Explorer&lt;blue&gt;) ")
  echoLink(fileLocation, string.format([[openUrl("%s")]], fileURL), "Open in browser", false)
  echo(" \n")
end

function MapExporter:openUrl()
  openUrl(fileURL)
end

function MapExporter:getRoomInfo(roomId)
  local x,y,z = getRoomCoordinates(roomId)
  local userDataKeys = getRoomUserDataKeys(roomId)
  local userData = {}
  for _,key in ipairs(userDataKeys) do
    userData[key] = getRoomUserData(roomId,key)
  end
  local roomInfo = {
    id = roomId,
    x = x,
    y = y,
    z = z,
    name = getRoomName(roomId),
    exits = getRoomExits(roomId),
    env = getRoomEnv(roomId),
    roomChar = getRoomChar(roomId),
    doors = getDoors(roomId),
    customLines = self:fixCustomLines(getCustomLines(roomId)),
    specialExits = getSpecialExitsSwap(roomId),
    stubs = getExitStubs1(roomId),
    userData = table.size(userData) &gt; 0 and userData or nil
  }
  return roomInfo
end

function MapExporter:getAreaRooms(areaId)
  areaId = tonumber(areaId)
  local rooms = getAreaRooms(areaId)
  local labelIds = getMapLabels(areaId)

  local labels = {}
  if type(labelIds) == "table" then
    for k,v in pairs(labelIds) do
      local label = getMapLabel(areaId, k)
      label.id = k
      table.insert(labels, label)
    end
  end

  local areaRooms = {
    areaId = areaId,
    areaName =  getRoomAreaName(areaId),
    rooms = {},
    labels = labels
  }
  for _, roomId in pairs(rooms) do
    local roomInfo = self:getRoomInfo(roomId)
    table.insert(areaRooms.rooms, roomInfo)
  end
  return areaRooms
end

function MapExporter:exportColors()
  local colors = {}
  local adjustedColors = {}
  for i=0,255 do
    if i ~= 16 then -- ansi 016 is ignored.
      local key = string.format("ansi_%03d",i)
      local envID
      if i == 0 or i == 8 then -- ansi 000 is set to envID 8, and ansi 008 is set to envID 16, due to envID starting at 1 and ansi colors at 0
        envID = i + 8
      else
        envID = i
      end
      colors[envID] = color_table[key]
    end
  end
  for k,v in pairs(getCustomEnvColorTable()) do
    colors[k] = v
  end
  for envID,color in pairs(colors) do
    table.insert(adjustedColors, {
      envId = envID,
      colors = color
    })
  end
  colors = adjustedColors

  local colorsFileName = self.dir .. "data/colors.js"
  local colorsFile = io.open (colorsFileName, "w+")
  colorsFile:write("colors = ")
  colorsFile:write(yajl.to_string(colors))
  colorsFile:close()
end

function MapExporter:exportCurrentLocation()
  local position = {
    area = getRoomArea(getPlayerRoom()),
    room = getPlayerRoom()
  }
  local currentPosition = self.dir .. "/data/current.js"
  currentPosition = io.open (currentPosition, "w+")
  currentPosition:write("position = ")
  currentPosition:write(yajl.to_string(position))
  currentPosition:close()
end

function MapExporter:export()
  local areas = {}
  for areaName, areaId in pairs(getAreaTable()) do
    if areaId &gt; 0 then
      local areaRooms = self:getAreaRooms(areaId)
      table.insert(areas, areaRooms)
    end
  end

  local fileName = self.dir .. "data/mapExport.js"
  local file = io.open (fileName, "w+")
  file:write("mapData = ")
  file:write(yajl.to_string(areas))
  file:close()

  self:exportColors()

  if getPlayerRoom() then
    self:exportCurrentLocation()
  end
end

function MapExporter:fixCustomLines(lineObj)
  for k,v in pairs(lineObj) do
    local tempPoints = {}
    local index = 1
    for i,j in pairs(v.points) do
      table.insert(tempPoints, math.max(1, tonumber(i)), j)
    end

    v.points = tempPoints
  end
  return lineObj
end

MapExporter.colorFixers = MapExporter.colorFixers or {}

function MapExporter.colorFixers.Imperian()
  setCustomEnvColor(1, Geyser.Color.parse("#00B300"))
  setCustomEnvColor(2, Geyser.Color.parse("#808080"))
  setCustomEnvColor(3, Geyser.Color.parse("#808080"))
  setCustomEnvColor(4, Geyser.Color.parse("#00B300"))
  setCustomEnvColor(5, Geyser.Color.parse("#FFFF00"))
  setCustomEnvColor(6, Geyser.Color.parse("#FFFF00"))
  setCustomEnvColor(7, Geyser.Color.parse("#00B300"))
  setCustomEnvColor(8, Geyser.Color.parse("#C0C0C0"))
  setCustomEnvColor(9, Geyser.Color.parse("#00A0A0"))
  setCustomEnvColor(10, Geyser.Color.parse("#0000FF"))
  setCustomEnvColor(11, Geyser.Color.parse("#C0C0C0"))
  setCustomEnvColor(12, Geyser.Color.parse("#C0C0C0"))
  setCustomEnvColor(13, Geyser.Color.parse("#00B300"))
  setCustomEnvColor(14, Geyser.Color.parse("#A0A000"))
  setCustomEnvColor(15, Geyser.Color.parse("#A000A0"))
  setCustomEnvColor(16, Geyser.Color.parse("#FFFFFF"))
  setCustomEnvColor(17, Geyser.Color.parse("#00FF00"))
  setCustomEnvColor(18, Geyser.Color.parse("#C0C0C0"))
  setCustomEnvColor(19, Geyser.Color.parse("#C0C0C0"))
  setCustomEnvColor(20, Geyser.Color.parse("#0000A0"))
  setCustomEnvColor(21, Geyser.Color.parse("#00FF00"))
  setCustomEnvColor(22, Geyser.Color.parse("#0000A0"))
  setCustomEnvColor(23, Geyser.Color.parse("#A00000"))
  setCustomEnvColor(24, Geyser.Color.parse("#0000A0"))
  setCustomEnvColor(25, Geyser.Color.parse("#0000A0"))
  setCustomEnvColor(26, Geyser.Color.parse("#0000A0"))
  setCustomEnvColor(27, Geyser.Color.parse("#FFFFFF"))
  setCustomEnvColor(28, Geyser.Color.parse("#808080"))
  setCustomEnvColor(30, Geyser.Color.parse("#C0C0C0"))
  setCustomEnvColor(31, Geyser.Color.parse("#A00000"))
  setCustomEnvColor(32, Geyser.Color.parse("#A0A000"))
  setCustomEnvColor(33, Geyser.Color.parse("#FF0000"))
  setCustomEnvColor(35, Geyser.Color.parse("#A00000"))
  setCustomEnvColor(36, Geyser.Color.parse("#808080"))
  setCustomEnvColor(37, Geyser.Color.parse("#A00000"))
  setCustomEnvColor(38, Geyser.Color.parse("#FFFF00"))
  setCustomEnvColor(39, Geyser.Color.parse("#A00000"))
  setCustomEnvColor(41, Geyser.Color.parse("#C0C0C0"))
  setCustomEnvColor(42, Geyser.Color.parse("#C0C0C0"))
  setCustomEnvColor(44, Geyser.Color.parse("#00FF00"))
  setCustomEnvColor(45, Geyser.Color.parse("#C0C0C0"))
  setCustomEnvColor(46, Geyser.Color.parse("#808080"))
  setCustomEnvColor(47, Geyser.Color.parse("#C0C0C0"))
  setCustomEnvColor(48, Geyser.Color.parse("#C0C0C0"))
  setCustomEnvColor(49, Geyser.Color.parse("#0000A0"))
  setCustomEnvColor(50, Geyser.Color.parse("#A0A000"))
  setCustomEnvColor(51, Geyser.Color.parse("#C0C0C0"))
  setCustomEnvColor(52, Geyser.Color.parse("#C0C0C0"))
  setCustomEnvColor(53, Geyser.Color.parse("#00B300"))
  setCustomEnvColor(54, Geyser.Color.parse("#C0C0C0"))
  setCustomEnvColor(56, Geyser.Color.parse("#FF0000"))
  setCustomEnvColor(57, Geyser.Color.parse("#C0C0C0"))
  setCustomEnvColor(58, Geyser.Color.parse("#808080"))
  setCustomEnvColor(59, Geyser.Color.parse("#FF0000"))
  setCustomEnvColor(60, Geyser.Color.parse("#A000A0"))
  setCustomEnvColor(61, Geyser.Color.parse("#FF0000"))
  setCustomEnvColor(62, Geyser.Color.parse("#C0C0C0"))
  setCustomEnvColor(63, Geyser.Color.parse("#808080"))
  setCustomEnvColor(64, Geyser.Color.parse("#C0C0C0"))
  setCustomEnvColor(65, Geyser.Color.parse("#C0C0C0"))
  setCustomEnvColor(67, Geyser.Color.parse("#A0A000"))
  setCustomEnvColor(68, Geyser.Color.parse("#C0C0C0"))
  setCustomEnvColor(69, Geyser.Color.parse("#C0C0C0"))
  setCustomEnvColor(70, Geyser.Color.parse("#A0A000"))
  setCustomEnvColor(71, Geyser.Color.parse("#C0C0C0"))
  setCustomEnvColor(72, Geyser.Color.parse("#A0A000"))
  setCustomEnvColor(73, Geyser.Color.parse("#A000A0"))
  setCustomEnvColor(74, Geyser.Color.parse("#A000A0"))
  setCustomEnvColor(75, Geyser.Color.parse("#C0C0C0"))
  setCustomEnvColor(76, Geyser.Color.parse("#A000A0"))
  setCustomEnvColor(77, Geyser.Color.parse("#A0A000"))
  setCustomEnvColor(78, Geyser.Color.parse("#00B300"))
  setCustomEnvColor(79, Geyser.Color.parse("#C0C0C0"))
  setCustomEnvColor(81, Geyser.Color.parse("#A000A0"))
  setCustomEnvColor(82, Geyser.Color.parse("#FFFFFF"))
  setCustomEnvColor(83, Geyser.Color.parse("#FF0000"))
  setCustomEnvColor(84, Geyser.Color.parse("#FF0000"))
  setCustomEnvColor(85, Geyser.Color.parse("#C0C0C0"))
  setCustomEnvColor(86, Geyser.Color.parse("#FFFF00"))
end

function MapExporter.colorFixers.Aetolia()
  setCustomEnvColor(1, Geyser.Color.parse("#A00000"))
  setCustomEnvColor(2, Geyser.Color.parse("#A00000"))
  setCustomEnvColor(3, Geyser.Color.parse("#A00000"))
  setCustomEnvColor(4, Geyser.Color.parse("#00B300"))
  setCustomEnvColor(5, Geyser.Color.parse("#FFFF00"))
  setCustomEnvColor(6, Geyser.Color.parse("#FFFF00"))
  setCustomEnvColor(7, Geyser.Color.parse("#00FF00"))
  setCustomEnvColor(8, Geyser.Color.parse("#FFFFFF"))
  setCustomEnvColor(9, Geyser.Color.parse("#A00000"))
  setCustomEnvColor(10, Geyser.Color.parse("#0000FF"))
  setCustomEnvColor(11, Geyser.Color.parse("#A0A000"))
  setCustomEnvColor(12, Geyser.Color.parse("#A0A000"))
  setCustomEnvColor(13, Geyser.Color.parse("#00B300"))
  setCustomEnvColor(14, Geyser.Color.parse("#A00000"))
  setCustomEnvColor(15, Geyser.Color.parse("#00B300"))
  setCustomEnvColor(16, Geyser.Color.parse("#00A0A0"))
  setCustomEnvColor(17, Geyser.Color.parse("#00B300"))
  setCustomEnvColor(19, Geyser.Color.parse("#00A0A0"))
  setCustomEnvColor(20, Geyser.Color.parse("#0000FF"))
  setCustomEnvColor(21, Geyser.Color.parse("#00B300"))
  setCustomEnvColor(22, Geyser.Color.parse("#0000FF"))
  setCustomEnvColor(23, Geyser.Color.parse("#A0A000"))
  setCustomEnvColor(24, Geyser.Color.parse("#0000A0"))
  setCustomEnvColor(25, Geyser.Color.parse("#0000FF"))
  setCustomEnvColor(26, Geyser.Color.parse("#808080"))
  setCustomEnvColor(27, Geyser.Color.parse("#FFFFFF"))
  setCustomEnvColor(28, Geyser.Color.parse("#0000FF"))
  setCustomEnvColor(29, Geyser.Color.parse("#C0C0C0"))
  setCustomEnvColor(30, Geyser.Color.parse("#00FFFF"))
  setCustomEnvColor(31, Geyser.Color.parse("#808080"))
  setCustomEnvColor(32, Geyser.Color.parse("#A00000"))
  setCustomEnvColor(33, Geyser.Color.parse("#A000A0"))
  setCustomEnvColor(34, Geyser.Color.parse("#A0A000"))
  setCustomEnvColor(35, Geyser.Color.parse("#00B300"))
  setCustomEnvColor(36, Geyser.Color.parse("#00B300"))
  setCustomEnvColor(37, Geyser.Color.parse("#808080"))
  setCustomEnvColor(38, Geyser.Color.parse("#00A0A0"))
  setCustomEnvColor(39, Geyser.Color.parse("#FF0000"))
  setCustomEnvColor(40, Geyser.Color.parse("#0000A0"))
  setCustomEnvColor(41, Geyser.Color.parse("#A0A000"))
  setCustomEnvColor(42, Geyser.Color.parse("#FFFFFF"))
  setCustomEnvColor(43, Geyser.Color.parse("#00A0A0"))
  setCustomEnvColor(44, Geyser.Color.parse("#00A0A0"))
  setCustomEnvColor(45, Geyser.Color.parse("#A0A000"))
  setCustomEnvColor(46, Geyser.Color.parse("#A0A000"))
  setCustomEnvColor(48, Geyser.Color.parse("#0000FF"))
  setCustomEnvColor(49, Geyser.Color.parse("#0000FF"))
  setCustomEnvColor(50, Geyser.Color.parse("#0000FF"))
  setCustomEnvColor(52, Geyser.Color.parse("#A000A0"))
  setCustomEnvColor(53, Geyser.Color.parse("#00FFFF"))
  setCustomEnvColor(54, Geyser.Color.parse("#FFFF00"))
  setCustomEnvColor(55, Geyser.Color.parse("#A0A000"))
  setCustomEnvColor(56, Geyser.Color.parse("#A0A000"))
  setCustomEnvColor(57, Geyser.Color.parse("#00B300"))
  setCustomEnvColor(58, Geyser.Color.parse("#A000A0"))
  setCustomEnvColor(59, Geyser.Color.parse("#808080"))
  setCustomEnvColor(60, Geyser.Color.parse("#FFFFFF"))
  setCustomEnvColor(61, Geyser.Color.parse("#808080"))
  setCustomEnvColor(62, Geyser.Color.parse("#808080"))
  setCustomEnvColor(63, Geyser.Color.parse("#00FF00"))
  setCustomEnvColor(65, Geyser.Color.parse("#00A0A0"))
  setCustomEnvColor(66, Geyser.Color.parse("#FFFFFF"))
  setCustomEnvColor(67, Geyser.Color.parse("#A000A0"))
  setCustomEnvColor(68, Geyser.Color.parse("#808080"))
  setCustomEnvColor(69, Geyser.Color.parse("#A00000"))
  setCustomEnvColor(70, Geyser.Color.parse("#00FFFF"))
  setCustomEnvColor(71, Geyser.Color.parse("#00B300"))
  setCustomEnvColor(72, Geyser.Color.parse("#00FF00"))
  setCustomEnvColor(73, Geyser.Color.parse("#FF0000"))
  setCustomEnvColor(75, Geyser.Color.parse("#A0A000"))
  setCustomEnvColor(76, Geyser.Color.parse("#FFFF00"))
  setCustomEnvColor(77, Geyser.Color.parse("#FF0000"))
  setCustomEnvColor(78, Geyser.Color.parse("#00B300"))
  setCustomEnvColor(79, Geyser.Color.parse("#A0A000"))
  setCustomEnvColor(80, Geyser.Color.parse("#A0A000"))
  setCustomEnvColor(81, Geyser.Color.parse("#A0A000"))
  setCustomEnvColor(82, Geyser.Color.parse("#FFFF00"))
  setCustomEnvColor(83, Geyser.Color.parse("#808080"))
  setCustomEnvColor(84, Geyser.Color.parse("#0000FF"))
  setCustomEnvColor(85, Geyser.Color.parse("#A0A000"))
  setCustomEnvColor(87, Geyser.Color.parse("#A0A000"))
  setCustomEnvColor(88, Geyser.Color.parse("#00FFFF"))
  setCustomEnvColor(89, Geyser.Color.parse("#00B300"))
  setCustomEnvColor(90, Geyser.Color.parse("#A0A000"))
  setCustomEnvColor(91, Geyser.Color.parse("#FFFFFF"))
  setCustomEnvColor(92, Geyser.Color.parse("#00B300"))
  setCustomEnvColor(93, Geyser.Color.parse("#C8C8C8"))
  setCustomEnvColor(94, Geyser.Color.parse("#A0A000"))
  setCustomEnvColor(96, Geyser.Color.parse("#FF0000"))
  setCustomEnvColor(98, Geyser.Color.parse("#808080"))
  setCustomEnvColor(99, Geyser.Color.parse("#808080"))
  setCustomEnvColor(100, Geyser.Color.parse("#808080"))
  setCustomEnvColor(101, Geyser.Color.parse("#FFFFFF"))
  setCustomEnvColor(102, Geyser.Color.parse("#A00000"))
  setCustomEnvColor(103, Geyser.Color.parse("#00B300"))
  setCustomEnvColor(104, Geyser.Color.parse("#A00000"))
  setCustomEnvColor(105, Geyser.Color.parse("#808080"))
  setCustomEnvColor(106, Geyser.Color.parse("#A0A000"))
  setCustomEnvColor(107, Geyser.Color.parse("#00A0A0"))
  setCustomEnvColor(108, Geyser.Color.parse("#A0A000"))
  setCustomEnvColor(109, Geyser.Color.parse("#FFFF00"))
  setCustomEnvColor(110, Geyser.Color.parse("#A0A000"))
  setCustomEnvColor(113, Geyser.Color.parse("#A0A000"))
  setCustomEnvColor(114, Geyser.Color.parse("#00A0A0"))
  setCustomEnvColor(116, Geyser.Color.parse("#808080"))
  setCustomEnvColor(117, Geyser.Color.parse("#FFFFFF"))
  setCustomEnvColor(118, Geyser.Color.parse("#A0A000"))
  setCustomEnvColor(120, Geyser.Color.parse("#A0A000"))
  setCustomEnvColor(121, Geyser.Color.parse("#00FF00"))
  setCustomEnvColor(122, Geyser.Color.parse("#A0A000"))
  setCustomEnvColor(123, Geyser.Color.parse("#A0A000"))
  setCustomEnvColor(124, Geyser.Color.parse("#A0A000"))
  setCustomEnvColor(125, Geyser.Color.parse("#A0A000"))
  setCustomEnvColor(126, Geyser.Color.parse("#A0A000"))
  setCustomEnvColor(127, Geyser.Color.parse("#808080"))
  setCustomEnvColor(128, Geyser.Color.parse("#FF00FF"))
  setCustomEnvColor(129, Geyser.Color.parse("#B1B1B1"))
  setCustomEnvColor(130, Geyser.Color.parse("#C0C0C0"))
  setCustomEnvColor(131, Geyser.Color.parse("#A00000"))
  setCustomEnvColor(132, Geyser.Color.parse("#A0A000"))
  setCustomEnvColor(133, Geyser.Color.parse("#00B300"))
  setCustomEnvColor(134, Geyser.Color.parse("#00FF00"))
  setCustomEnvColor(136, Geyser.Color.parse("#663300"))
  setCustomEnvColor(137, Geyser.Color.parse("#333300"))
  setCustomEnvColor(138, Geyser.Color.parse("#00B300"))
  setCustomEnvColor(140, Geyser.Color.parse("#00A0A0"))
  setCustomEnvColor(142, Geyser.Color.parse("#6633FF"))
  setCustomEnvColor(143, Geyser.Color.parse("#CC6600"))
  setCustomEnvColor(144, Geyser.Color.parse("#FFFF00"))
  setCustomEnvColor(145, Geyser.Color.parse("#FF0000"))
  setCustomEnvColor(146, Geyser.Color.parse("#0066FF"))
  setCustomEnvColor(147, Geyser.Color.parse("#3333FF"))
  setCustomEnvColor(148, Geyser.Color.parse("#0099FF"))
  setCustomEnvColor(149, Geyser.Color.parse("#FF00FF"))
  setCustomEnvColor(150, Geyser.Color.parse("#99FF00"))
  setCustomEnvColor(151, Geyser.Color.parse("#00FF00"))
  setCustomEnvColor(152, Geyser.Color.parse("#FF9900"))
  setCustomEnvColor(153, Geyser.Color.parse("#FF3300"))
  setCustomEnvColor(154, Geyser.Color.parse("#6633CC"))
  setCustomEnvColor(155, Geyser.Color.parse("#00FF66"))
  setCustomEnvColor(156, Geyser.Color.parse("#434343"))
  setCustomEnvColor(157, Geyser.Color.parse("#FF0099"))
end

function MapExporter.colorFixers.Lusternia()
  setCustomEnvColor(1, Geyser.Color.parse("#C0C0C0"))
  setCustomEnvColor(2, Geyser.Color.parse("#A0A000"))
  setCustomEnvColor(3, Geyser.Color.parse("#A0A000"))
  setCustomEnvColor(4, Geyser.Color.parse("#00FF00"))
  setCustomEnvColor(5, Geyser.Color.parse("#FFFF00"))
  setCustomEnvColor(6, Geyser.Color.parse("#FFFF00"))
  setCustomEnvColor(7, Geyser.Color.parse("#00B300"))
  setCustomEnvColor(8, Geyser.Color.parse("#C0C0C0"))
  setCustomEnvColor(9, Geyser.Color.parse("#C0C0C0"))
  setCustomEnvColor(10, Geyser.Color.parse("#00A0A0"))
  setCustomEnvColor(11, Geyser.Color.parse("#A0A000"))
  setCustomEnvColor(12, Geyser.Color.parse("#A0A000"))
  setCustomEnvColor(13, Geyser.Color.parse("#00B300"))
  setCustomEnvColor(14, Geyser.Color.parse("#A0A000"))
  setCustomEnvColor(15, Geyser.Color.parse("#00B300"))
  setCustomEnvColor(16, Geyser.Color.parse("#FFFFFF"))
  setCustomEnvColor(17, Geyser.Color.parse("#00FF00"))
  setCustomEnvColor(18, Geyser.Color.parse("#FF0000"))
  setCustomEnvColor(19, Geyser.Color.parse("#C0C0C0"))
  setCustomEnvColor(20, Geyser.Color.parse("#0000FF"))
  setCustomEnvColor(21, Geyser.Color.parse("#00B300"))
  setCustomEnvColor(22, Geyser.Color.parse("#0000A0"))
  setCustomEnvColor(23, Geyser.Color.parse("#00A0A0"))
  setCustomEnvColor(24, Geyser.Color.parse("#0000A0"))
  setCustomEnvColor(25, Geyser.Color.parse("#00FFFF"))
  setCustomEnvColor(27, Geyser.Color.parse("#FFFFFF"))
  setCustomEnvColor(28, Geyser.Color.parse("#00FF00"))
  setCustomEnvColor(29, Geyser.Color.parse("#A00000"))
  setCustomEnvColor(30, Geyser.Color.parse("#00B300"))
  setCustomEnvColor(31, Geyser.Color.parse("#00B300"))
  setCustomEnvColor(32, Geyser.Color.parse("#FF0000"))
  setCustomEnvColor(33, Geyser.Color.parse("#FFFFFF"))
  setCustomEnvColor(34, Geyser.Color.parse("#A00000"))
  setCustomEnvColor(35, Geyser.Color.parse("#A000A0"))
  setCustomEnvColor(36, Geyser.Color.parse("#A000A0"))
  setCustomEnvColor(37, Geyser.Color.parse("#FFFFFF"))
  setCustomEnvColor(38, Geyser.Color.parse("#C0C0C0"))
  setCustomEnvColor(39, Geyser.Color.parse("#FF00FF"))
  setCustomEnvColor(40, Geyser.Color.parse("#C0C0C0"))
end

function MapExporter.colorFixers.Achaea()
  setCustomEnvColor(2, Geyser.Color.parse("#80735f"))
  setCustomEnvColor(3, Geyser.Color.parse("#765116"))
  setCustomEnvColor(4, Geyser.Color.parse("#36662e"))
  setCustomEnvColor(5, Geyser.Color.parse("#ffffcc"))
  setCustomEnvColor(6, Geyser.Color.parse("#f9fd00"))
  setCustomEnvColor(7, Geyser.Color.parse("#1dc713"))
  setCustomEnvColor(8, Geyser.Color.parse("#bda0cb"))
  setCustomEnvColor(9, Geyser.Color.parse("#2d7720"))
  setCustomEnvColor(10, Geyser.Color.parse("#00ddff"))
  setCustomEnvColor(11, Geyser.Color.parse("#837766"))
  setCustomEnvColor(12, Geyser.Color.parse("#7c7c7c"))
  setCustomEnvColor(13, Geyser.Color.parse("#41ab2f"))
  setCustomEnvColor(14, Geyser.Color.parse("#584a34"))
  setCustomEnvColor(15, Geyser.Color.parse("#76843c"))
  setCustomEnvColor(16, Geyser.Color.parse("#c5fcff"))
  setCustomEnvColor(17, Geyser.Color.parse("#89e14b"))
  setCustomEnvColor(18, Geyser.Color.parse("#ab9e6d"))
  setCustomEnvColor(19, Geyser.Color.parse("#56a574"))
  setCustomEnvColor(20, Geyser.Color.parse("#0000ff"))
  setCustomEnvColor(21, Geyser.Color.parse("#94e45d"))
  setCustomEnvColor(22, Geyser.Color.parse("#5ff0f0"))
  setCustomEnvColor(23, Geyser.Color.parse("#918010"))
  setCustomEnvColor(24, Geyser.Color.parse("#003366"))
  setCustomEnvColor(25, Geyser.Color.parse("#f98167"))
  setCustomEnvColor(27, Geyser.Color.parse("#ffffff"))
  setCustomEnvColor(28, Geyser.Color.parse("#00e342"))
  setCustomEnvColor(29, Geyser.Color.parse("#990000"))
  setCustomEnvColor(30, Geyser.Color.parse("#4d42d4"))
  setCustomEnvColor(31, Geyser.Color.parse("#dd4400"))
  setCustomEnvColor(32, Geyser.Color.parse("#ddba82"))
  setCustomEnvColor(33, Geyser.Color.parse("#837766"))
  setCustomEnvColor(34, Geyser.Color.parse("#0000ff"))
  setCustomEnvColor(35, Geyser.Color.parse("#ffffff"))
  setCustomEnvColor(36, Geyser.Color.parse("#918010"))
  setCustomEnvColor(39, Geyser.Color.parse("#918010"))
  setCustomEnvColor(40, Geyser.Color.parse("#C0C0C0"))
  setCustomEnvColor(41, Geyser.Color.parse("#C0C0C0"))
  setCustomEnvColor(42, Geyser.Color.parse("#cf1020"))
  setCustomEnvColor(43, Geyser.Color.parse("#00701f"))
  setCustomEnvColor(48, Geyser.Color.parse("#f98167"))
end

function MapExporter.colorFixers.Starmourn()
  setCustomEnvColor(1  , Geyser.Color.parse("#d7875f"))
  setCustomEnvColor(2  , Geyser.Color.parse("#87d7d7"))
  setCustomEnvColor(3  , Geyser.Color.parse("#ff875f"))
  setCustomEnvColor(4  , Geyser.Color.parse("#87d7d7"))
  setCustomEnvColor(5  , Geyser.Color.parse("#87d7d7"))
  setCustomEnvColor(6  , Geyser.Color.parse("#0000ff"))
  setCustomEnvColor(7  , Geyser.Color.parse("#ffd700"))
  setCustomEnvColor(8  , Geyser.Color.parse("#008000"))
  setCustomEnvColor(9  , Geyser.Color.parse("#c6c6c6"))
  setCustomEnvColor(10 , Geyser.Color.parse("#afffff"))
  setCustomEnvColor(11 , Geyser.Color.parse("#5f00ff"))
  setCustomEnvColor(12 , Geyser.Color.parse("#005f00"))
  setCustomEnvColor(13 , Geyser.Color.parse("#c6c6c6"))
  setCustomEnvColor(14 , Geyser.Color.parse("#00afff"))
  setCustomEnvColor(15 , Geyser.Color.parse("#87d7d7"))
  setCustomEnvColor(16 , Geyser.Color.parse("#8787ff"))
  setCustomEnvColor(17 , Geyser.Color.parse("#eeeeee"))
  setCustomEnvColor(18 , Geyser.Color.parse("#c6c6c6"))
  setCustomEnvColor(19 , Geyser.Color.parse("#008700"))
  setCustomEnvColor(20 , Geyser.Color.parse("#87af00"))
  setCustomEnvColor(21 , Geyser.Color.parse("#c6c6c6"))
  setCustomEnvColor(22 , Geyser.Color.parse("#c6c6c6"))
  setCustomEnvColor(23 , Geyser.Color.parse("#c6c6c6"))
  setCustomEnvColor(26 , Geyser.Color.parse("#c6c6c6"))
  setCustomEnvColor(27 , Geyser.Color.parse("#eeeeee"))
  setCustomEnvColor(28 , Geyser.Color.parse("#5faf00"))
  setCustomEnvColor(29 , Geyser.Color.parse("#949494"))
  setCustomEnvColor(30 , Geyser.Color.parse("#00ff00"))
  setCustomEnvColor(31 , Geyser.Color.parse("#d78700"))
  setCustomEnvColor(32 , Geyser.Color.parse("#87d7d7"))
  setCustomEnvColor(34 , Geyser.Color.parse("#87d7d7"))
  setCustomEnvColor(35 , Geyser.Color.parse("#005fff"))
  setCustomEnvColor(36 , Geyser.Color.parse("#87d7d7"))
  setCustomEnvColor(37 , Geyser.Color.parse("#d75f00"))
  setCustomEnvColor(38 , Geyser.Color.parse("#87d7d7"))
  setCustomEnvColor(39 , Geyser.Color.parse("#87d7d7"))
  setCustomEnvColor(40 , Geyser.Color.parse("#878700"))
  setCustomEnvColor(42 , Geyser.Color.parse("#875f00"))
  setCustomEnvColor(43 , Geyser.Color.parse("#c6c6c6"))
  setCustomEnvColor(44 , Geyser.Color.parse("#c6c6c6"))
  setCustomEnvColor(45 , Geyser.Color.parse("#ff5f5f"))
  setCustomEnvColor(46 , Geyser.Color.parse("#87d7d7"))
  setCustomEnvColor(47 , Geyser.Color.parse("#87d7d7"))
  setCustomEnvColor(48 , Geyser.Color.parse("#875f00"))
  setCustomEnvColor(49 , Geyser.Color.parse("#00afff"))
  setCustomEnvColor(50 , Geyser.Color.parse("#00afff"))
  setCustomEnvColor(51 , Geyser.Color.parse("#af8700"))
  setCustomEnvColor(52 , Geyser.Color.parse("#008787"))
  setCustomEnvColor(53 , Geyser.Color.parse("#008000"))
  setCustomEnvColor(54 , Geyser.Color.parse("#870000"))
  setCustomEnvColor(55 , Geyser.Color.parse("#c6c6c6"))
  setCustomEnvColor(56 , Geyser.Color.parse("#800000"))
  setCustomEnvColor(57 , Geyser.Color.parse("#ff0000"))
  setCustomEnvColor(58 , Geyser.Color.parse("#c6c6c6"))
  setCustomEnvColor(59 , Geyser.Color.parse("#5f5f00"))
  setCustomEnvColor(60 , Geyser.Color.parse("#87d7d7"))
  setCustomEnvColor(61 , Geyser.Color.parse("#87d700"))
  setCustomEnvColor(62 , Geyser.Color.parse("#87d7d7"))
  setCustomEnvColor(63 , Geyser.Color.parse("#87d7d7"))
  setCustomEnvColor(64 , Geyser.Color.parse("#00afff"))
  setCustomEnvColor(65 , Geyser.Color.parse("#87ffaf"))
  setCustomEnvColor(66 , Geyser.Color.parse("#87d7d7"))
  setCustomEnvColor(67 , Geyser.Color.parse("#87d7d7"))
  setCustomEnvColor(69 , Geyser.Color.parse("#878700"))
  setCustomEnvColor(70 , Geyser.Color.parse("#5f5f00"))
  setCustomEnvColor(71 , Geyser.Color.parse("#87d7d7"))
  setCustomEnvColor(72 , Geyser.Color.parse("#878700"))
  setCustomEnvColor(73 , Geyser.Color.parse("#878700"))
  setCustomEnvColor(75 , Geyser.Color.parse("#00875f"))
  setCustomEnvColor(76 , Geyser.Color.parse("#87af5f"))
  setCustomEnvColor(77 , Geyser.Color.parse("#87af5f"))
  setCustomEnvColor(78 , Geyser.Color.parse("#87af5f"))
  setCustomEnvColor(79 , Geyser.Color.parse("#87af5f"))
  setCustomEnvColor(80 , Geyser.Color.parse("#87af5f"))
  setCustomEnvColor(81 , Geyser.Color.parse("#87af5f"))
  setCustomEnvColor(82 , Geyser.Color.parse("#87af5f"))
  setCustomEnvColor(83 , Geyser.Color.parse("#87af5f"))
  setCustomEnvColor(84 , Geyser.Color.parse("#87af5f"))
  setCustomEnvColor(85 , Geyser.Color.parse("#00afff"))
  setCustomEnvColor(86 , Geyser.Color.parse("#d75f00"))
  setCustomEnvColor(87 , Geyser.Color.parse("#0000ff"))
  setCustomEnvColor(88 , Geyser.Color.parse("#87d7d7"))
  setCustomEnvColor(89 , Geyser.Color.parse("#87d7d7"))
  setCustomEnvColor(92 , Geyser.Color.parse("#af0087"))
  setCustomEnvColor(93 , Geyser.Color.parse("#808000"))
end
</script>
					<eventHandlerList />
				</Script>
			</ScriptGroup>
		</ScriptGroup>
	</ScriptPackage>
</MudletPackage>
